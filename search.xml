<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FirstBlog</title>
    <url>//2023/05/06/FirstBlog/</url>
    <content><![CDATA[<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><h2 id="乱七八糟搞了两天，卸载重装无数遍，折磨疯了要！"><a href="#乱七八糟搞了两天，卸载重装无数遍，折磨疯了要！" class="headerlink" title="乱七八糟搞了两天，卸载重装无数遍，折磨疯了要！"></a>乱七八糟搞了两天，卸载重装无数遍，折磨疯了要！</h2><h2 id="不过，最终还是搞好了，成就感还是大大滴有！"><a href="#不过，最终还是搞好了，成就感还是大大滴有！" class="headerlink" title="不过，最终还是搞好了，成就感还是大大滴有！"></a>不过，最终还是搞好了，成就感还是大大滴有！</h2><h2 id="感谢驴驴一直陪着我，哈哈！"><a href="#感谢驴驴一直陪着我，哈哈！" class="headerlink" title="感谢驴驴一直陪着我，哈哈！"></a>感谢驴驴一直陪着我，哈哈！</h2>]]></content>
      <categories>
        <category>生活小记</category>
      </categories>
  </entry>
  <entry>
    <title>VMware+Centos7重启自动更换ip问题</title>
    <url>//2023/05/30/2023-05-30-VMware-Centos7%E9%87%8D%E5%90%AF%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%8D%A2ip%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>在一开始我创建的虚拟机去用 FinalShell 远程连接的时候，第一次可以连接上，然后重启就失效。然后查看了虚拟机的IP地址发现已经变化，上一次还是192.168.136.128，下一次就变成了192.168.136.134，就很麻烦，每次都要去改 FinalShell 的配置</p>
<p>可以在虚拟机或shell 中使用 ip addr 命令 查看当前 ip</p>
<p><img src="https://pic.imgdb.cn/item/64755909f024cca173e86c56.jpg"></p>
<blockquote>
<p>后来找到，变化的原因是：因为虚拟机默认设置的ip地址是 dhcp 动态地址，所以才会一直变化，只需要将其更换为静态地址，再配置一个固定的ip即可。</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改虚拟机配置文件</span><br></pre></td></tr></table></figure>


<ol>
<li>进入虚拟机网络配置<br><img src="https://pic.imgdb.cn/item/647b47b7f024cca17346aa52.jpg"></li>
<li>记住这两组ip<br><img src="https://pic.imgdb.cn/item/647b4951f024cca1734c0a83.jpg"></li>
</ol>
<h5 id="进入配置文件"><a href="#进入配置文件" class="headerlink" title="进入配置文件"></a>进入配置文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<h5 id="进入读写"><a href="#进入读写" class="headerlink" title="进入读写"></a>进入读写</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">i	    </span><br></pre></td></tr></table></figure>

<h6 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h6><p><img src="https://pic.imgdb.cn/item/647b48b8f024cca1734a2e58.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.10.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.10.2</span><br><span class="line">DNS1=192.168.10.2            </span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=787fd432-199e-4e64-ad90-160834ab288b</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>
<ol>
<li><code>BOOTPROTO</code> 改为<code>static</code></li>
<li><code>IPADDR</code>  前三组ip和前面的子网ip保持一致，最后一组随意，<code>1-254</code>之间都可以</li>
<li><code>NETMASK</code>   前面的子网掩码</li>
<li><code>GATEWAY</code>   前三组ip和前面的子网ip保持一致，最后一组随意，<code>1-254</code>之间都可以</li>
<li><code>DNS1</code> 与 <code>GATEWAY</code>保持一致</li>
</ol>
<h5 id="保存并退出"><a href="#保存并退出" class="headerlink" title="保存并退出"></a>保存并退出</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ESC</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:wq  </span><br></pre></td></tr></table></figure>





<p>最后重启验证即可。</p>
]]></content>
      <categories>
        <category>BUG分享</category>
      </categories>
      <tags>
        <tag>BUG分享</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机安装运行环境</title>
    <url>//2023/06/02/2023-06-02-Centos7%E5%AE%89%E8%A3%85%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>安装过程中可能会出现一些问题，不对，是肯定会出问题，但是不要放弃，出问题就去解决它，我也重装了很多次，大不了重头再来！反正电脑又不会爆炸不是吗💕</li>
</ul>
<blockquote>
<p>使用 Vmware8 + Centos7 环境安装 JDK17、tomcat8、mysql8、lrzsz等环境</p>
</blockquote>
<h1 id="安装JDK17"><a href="#安装JDK17" class="headerlink" title="安装JDK17"></a>安装JDK17</h1><ul>
<li>一般软件我都默认安装在 <code>/usr/local</code> 下</li>
</ul>
<h2 id="下载JDK两种方式"><a href="#下载JDK两种方式" class="headerlink" title="下载JDK两种方式"></a>下载JDK两种方式</h2><pre><code>1. 通过 wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz 直接在shell下载
2. 通过官网下载，然后再通过Xshell或者finalShell之类的工具上传到linux  
    网址：https://www.oracle.com/cn/java/technologies/downloads/#java17
</code></pre>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>我用的是第二种方式</li>
<li>首先进入到 usr&#x2F;local</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个存放 JDK17 的目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir jdk17</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6479f1dff024cca173e6ff14.png"></p>
<ul>
<li>押解JDK17包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf  jdk-17.0.1_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6479f20df024cca173e7547c.png"></p>
<ul>
<li><p>押解完毕后,<code>vim/etc/profile</code><br><img src="https://pic.imgdb.cn/item/6479f247f024cca173e7bfe4.png"></p>
</li>
<li><p>配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">jdk17</span></span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jdk17/jdk-17.0.1</span><br><span class="line"></span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/</span><br><span class="line"></span><br><span class="line">export PATH=.:$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6479f2fff024cca173e92f80.png"></p>
</li>
<li><p>红框里的路径是<code>你的jdk</code>目录下的路径，所以如果你在其他的文件下压解jdk17那么就需要你<code>自己去pwd</code>一下查看路径</p>
</li>
<li><p>修改后<code>ESC</code>保存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">：wq</span><br></pre></td></tr></table></figure>

</li>
<li><p>重启环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source  /etc/profile    </span><br></pre></td></tr></table></figure></li>
</ul>
<p>查看版本号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version   </span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6479f39bf024cca173ea02a1.png"></p>
<p> PS：如果有其他的问题就基本上就是环境变量没有配置好或者误删除掉了里面的符号，建议重新删掉然后再去配置。</p>
<ul>
<li>至此JDK17就安装完成咯！</li>
</ul>
<h1 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a>tomcat安装</h1><blockquote>
<p>tomcat版本：8.0.50</p>
</blockquote>
<blockquote>
<p>点击【<code>Which version</code>】可查看Tomcat各版本所对应的jdk版本，（下载Tomcat各版本之前需要查看自己所对应的jdk版本，如果你下载的Tomcat版本高于或低于所下载的jdk版本，安装运行之后可能会出现<code>报错</code>，就比如我下载的是如图以下的Tomcat8.5的版本，那么jdk的版本至少得是Java7的版本或者Java7之后的版本都行，如果我下的是Tomcat11的版本，那么jdk版本就至少是Java17的版本或Java17之后的版本。）<br><img src="https://pic.imgdb.cn/item/6479f5fff024cca173ecde31.png"></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">后缀</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Core</td>
<td align="center">是Tomcat正式的二进制发布版本</td>
</tr>
<tr>
<td align="center">zip</td>
<td align="center">压缩包。</td>
</tr>
<tr>
<td align="center">tar.gz</td>
<td align="center">Linux操作系统和Unix操作系统形式的压缩包</td>
</tr>
<tr>
<td align="center">32-bit Windows zip</td>
<td align="center">Windows32位操作系统压缩包</td>
</tr>
<tr>
<td align="center">64-bit Windows zip</td>
<td align="center">Windows64位操作系统压包</td>
</tr>
<tr>
<td align="center">32-bit&#x2F;64-bit Windows Service Installer</td>
<td align="center">Windows32位与64位操作系统的安装程序包</td>
</tr>
</tbody></table>
<ul>
<li>下载<code>tomcat</code>安装包</li>
<li><a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></li>
<li>我这边是下载的apache-tomcat-8.0.50.tar.gz</li>
</ul>
<p> <img src="https://pic.imgdb.cn/item/6479f496f024cca173eb0707.png"><br> <img src="https://pic.imgdb.cn/item/6479f4acf024cca173eb208d.png"></p>
<ul>
<li><p>解压</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.0.50.tar.gz</span><br></pre></td></tr></table></figure>
<p> <img src="https://pic.imgdb.cn/item/6479f4dcf024cca173eb55e8.png"></p>
</li>
<li><p>我是放在了<code>usr/local/tomcat</code>下所以要创建tomcat文件夹并将解压文件移动到tomcat下(由于之前新建过再次创建或出现重复)</p>
</li>
<li><p>一样，先创建一个目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/tomcat</span><br><span class="line"></span><br><span class="line">mv apache-tomcat-8.0.50 /usr/local/tomcat/</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6479f551f024cca173ebdf0e.png"></p>
<ul>
<li>进入tomcat安装<code>bin</code>目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd usr/local/tomcat/apache-tomcat-8.0.50/bin/</span><br></pre></td></tr></table></figure></li>
<li>启动tomcat<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6479f59af024cca173ec2f9b.png"></p>
<ul>
<li>成功启动后浏览器输入<code>http://localhost:8080/</code>查看信息（输入自己的IP，比如我输入服务器IP47.97.189.117:8080）</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6479f5d3f024cca173ec7c95.png"></p>
<ul>
<li>那么tomcat也就安装完成了</li>
</ul>
<h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><ul>
<li>最麻烦的来了</li>
</ul>
<h2 id="下载mysql"><a href="#下载mysql" class="headerlink" title="下载mysql"></a>下载mysql</h2><blockquote>
<p>Mysql安装版本：8.0.33</p>
</blockquote>
<ul>
<li>进入官网下载对应的版本<br>网址 <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6479fb0ff024cca173f2c1fd.png"></p>
<h2 id="安装mysql之前先做的事-必看-必看-必看！"><a href="#安装mysql之前先做的事-必看-必看-必看！" class="headerlink" title="安装mysql之前先做的事(必看!必看!必看！)"></a>安装mysql之前先做的事(必看!必看!必看！)</h2><ol>
<li><p>查看本地有没有安装mariadb ，有的话删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa |grep mariadb</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# rpm -e --nodeps 软件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看本地有没有安装Mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa |grep mysql</span><br><span class="line"></span><br><span class="line">[root@localhost ~]#  rpm -e --nodeps 软件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找本地有没有Mysql文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find / -name mysql</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# whereis mysql</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# rm -rf  #删除</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>确保环境准备无误</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -qa |grep mariadb</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# find / -name mysql</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# rpm -qa |grep mysql</span><br></pre></td></tr></table></figure>

</li>
<li><p>环境准备没问题开始上传Mysql安装包安装（rz&#x2F;xftp）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls</span><br><span class="line">mysql-8.0.33-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个<code>mysql</code>目录存放解压出来的安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir mysql</span><br></pre></td></tr></table></figure></li>
<li><p>解压缩</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tar -xf mysql-8.0.33-1.el7.x86_64.rpm-bundle.tar -C mysql</span><br></pre></td></tr></table></figure></li>
<li><p>查看解压后文件夹内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cd mysql</span><br><span class="line"></span><br><span class="line">[root@localhost mysql]# ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时你的文件夹应该是跟我<code>一样</code>的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql-community-client-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-client-plugins-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-debuginfo-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-icu-data-files-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-compat-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-debug-8.0.33-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-test-8.0.33-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始安装依赖按照<code>顺序安装</code>否则报错!!!!!!!!!</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.33-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.33-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-embedded-compat-8.0.33-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-libs-8.0.33-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-libs-compat-8.0.33-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">yum install openssl-devel</span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-devel-8.0.33-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-client-8.0.33-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum -y install mysql-community*</span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-server-8.0.33-1.el7.x86_64.rpm </span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-test-8.0.33-1.el7.x86_64.rpm </span><br></pre></td></tr></table></figure>

</li>
<li><p>安装完成后, 开始进行下一步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console                                         #初始化数据库</span><br><span class="line"></span><br><span class="line">chown -R mysql:mysql /var/lib/mysql/                         #给mysql目录属主属组改成mysql</span><br><span class="line"></span><br><span class="line">systemctl start mysqld                                                 #启动mysql</span><br><span class="line">systemctl status mysqld                                               #查看mysql状态（active running)</span><br><span class="line"></span><br><span class="line">cat /var/log/mysqld.log |grep password                        #查看mysql密码</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入mysql密码(这里输入密码是不显示的，但是是输入进去了)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    [root@localhost ~]# mysql -u root -p</span><br><span class="line">Enter password: </span><br></pre></td></tr></table></figure>
</li>
<li><p>进入数据库以后要修改密码(毕竟他给的密码太麻烦了不是吗)</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;123456&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>至此完成</p>
</li>
<li><p>设置远程连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; update user set user.host=&#x27;%&#x27;where user.user=&#x27;root&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 然后用我们的远程工具测试即可</p>
<blockquote>
<p>对了，navicat或者其他什么测试记得linux连接上数据库</p>
</blockquote>
<h1 id="安装-lrzsz"><a href="#安装-lrzsz" class="headerlink" title="安装 lrzsz"></a>安装 lrzsz</h1><ol>
<li><p>搜索lrzsz安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list lrzsz</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用yum命令在线安装</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install lrzsz.x86_64</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Yum(全称为Yellow dog Updater, Modified)是一个在Fedora和RedHat以及Cent05中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p>
</blockquote>
<ul>
<li>安装完后输入 rz ，就会跳出一个窗口，选择文件后即可上传</li>
</ul>
<p> #Over!Over!</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM常用命令</title>
    <url>//2023/06/03/2023-06-03-VIM%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h1><ul>
<li>以<code>:</code>和<code>/</code>开头的命令都有历史纪录，可以首先键入:或&#x2F;然后按上下箭头来选择某个历史命令。</li>
</ul>
<h1 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h1><ul>
<li>在命令行窗口中输入以下命令即可<br><code>vim</code> 直接启动vim<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim</span><br></pre></td></tr></table></figure></li>
<li><code>vim filename</code> 打开vim并创建名为filename的文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim filename</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h1><ul>
<li><p>打开<code>单个</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim file</span><br></pre></td></tr></table></figure>
</li>
<li><p>同时打开<code>多个</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim file1 file2 file3 ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>在vim窗口中打开一个<code>新文件</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:open file</span><br></pre></td></tr></table></figure>
</li>
<li><p>在新窗口中<code>打开</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:split file</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到<code>下</code>一个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:bn</span><br></pre></td></tr></table></figure>
</li>
<li><p>切换到<code>上</code>一个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:bp</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前打开的文件列表，当前正在编辑的文件会用<code>[]</code>括起<br>来。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:args</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开远程文件，比如ftp或者share folder</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:e ftp://192.168.10.76/abc.txt</span><br><span class="line">:e \\qadrive\test\1.txt</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="vim的模式"><a href="#vim的模式" class="headerlink" title="vim的模式"></a>vim的模式</h1><ol>
<li>正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空</li>
<li>插入模式（按<code>i</code>键进入） 左下角显示–INSERT–</li>
<li>可视模式（不知道如何进入） 左下角显示–VISUAL–</li>
</ol>
<h1 id="导航命令"><a href="#导航命令" class="headerlink" title="导航命令"></a>导航命令</h1><ul>
<li><code>%</code> 括号匹配</li>
</ul>
<h1 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h1><ol>
<li><code>i</code> 在当前位置生前插入</li>
<li><code>I</code> 在当前行首插入</li>
<li><code>a</code> 在当前位置后插入</li>
<li><code>A</code> 在当前行尾插入</li>
<li><code>o</code> 在当前行之后插入一行</li>
<li><code>O</code> 在当前行之前插入一行</li>
</ol>
<h1 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h1><ul>
<li><p><code>/text</code>　　查找text，按n健查找下一个，按N健查找前一个。</p>
</li>
<li><p><code>?text</code>　　查找text，反向查找，按n健查找下一个，按N健查找前一个。</p>
</li>
<li><p>vim中有一些特殊字符在查找时需要转义　　<code>.*[]^%/?~$</code></p>
</li>
<li><p><code>:set ignorecase</code>　　<code>忽略大小写</code>的查找</p>
</li>
<li><p><code>:set noignorecase</code>　　<code>不忽略大小写</code>的查找</p>
</li>
<li><p>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按<code>*</code>或<code>#</code>键即可以该单词进行搜索，相当于&#x2F;搜索。而#命令相当于?搜索。</p>
</li>
<li><p><code>:set hlsearch</code>　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。</p>
</li>
<li><p><code>:set nohlsearch</code>　　关闭高亮搜索显示</p>
</li>
<li><p><code>:nohlsearch</code>　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。</p>
</li>
<li><p><code>:set incsearch</code>　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</p>
</li>
<li><p><code>:set wrapscan</code>　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</p>
</li>
</ul>
<h1 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h1><ul>
<li><code>ra</code> 将当前字符替换为a，当期字符即光标所在字符。</li>
<li><code>s/old/new/ </code>用old替换new，<code>替换当前行</code>的<code>第一个</code>匹配</li>
<li><code>s/old/new/g </code>用old替换new，<code>替换当前行</code>的所有匹配</li>
<li><code>%s/old/new/ </code>用old替换new，<code>替换所有行</code>的第一个匹配</li>
<li><code>%s/old/new/g</code> 用old替换new，<code>替换整个文件</code>的所有匹配</li>
<li><code>:10,20 s/^/ </code>   &#x2F;g 在第10行知第20行每行前面加四个空格，用<code>- </code>于缩进。</li>
<li><code>ddp</code> 交换光标所在行和其下紧邻的一行。</li>
</ul>
<h1 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h1><ol>
<li><code>h</code> 左移一个字符</li>
<li><code>l</code> 右移一个字符，这个命令很少用，一般用<code>w</code>代替。</li>
<li><code>k</code> 上移一个字符</li>
<li><code>j</code> 下移一个字符</li>
</ol>
<ul>
<li>以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h- 就是向左移动5个字符，在Vim中，很多命令都可以配合数字使- 用，比如删除10个字符10x，在当前位置后插入3个！，3a！</li>
<li><code>&lt;Esc&gt;</code>，这里的Esc是必须的，否则命令不生效。</li>
<li><code>w</code> 向前移动一个单词（光标停在单词首部），如果已到行尾，则转- 至下一行行首。此命令快，可以代替l命令。</li>
<li><code>b </code>向后移动一个单词 <code>2b</code> 向后移动2个单词</li>
<li><code>e</code>，同<code>w</code>，只不过是光标停在单词尾部</li>
<li><code>ge</code>，同<code>b</code>，光标停在单词尾部。</li>
<li><code>^ </code>移动到本行第一个非空白字符上。</li>
<li><code>0（数字0）</code>移动到本行第一个字符上，</li>
<li><code>&lt;HOME&gt;</code> 移动到本行第一个字符。同<code>0</code>健。</li>
<li><code>$</code> 移动到行尾 3$ 移动到下面3行的行尾</li>
<li><code>gg</code> 移动到文件头。 &#x3D; [[</li>
<li><code>G（shift + g）</code> 移动到文件尾。 &#x3D; ]]</li>
<li><code>f（find）</code>命令也可以用于移动，fx将找到光标后第一个为x的字- 符，3fd将找到第三个为d的字符。</li>
<li><code>F</code> 同f，反向查找。</li>
<li>跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。- 另一个方法是行号+G，比如230G跳到230行。</li>
<li><code>Ctrl + e</code> 向<code>下</code>滚动<code>一</code>行</li>
<li><code>Ctrl + y</code> 向<code>上</code>滚动<code>一</code>行</li>
<li><code>Ctrl + d</code> 向<code>下</code>滚动<code>半</code>屏</li>
<li><code>Ctrl + u</code> 向<code>上</code>滚动<code>半</code>屏</li>
<li><code>Ctrl + f</code> 向<code>下</code>滚动<code>一</code>屏</li>
<li><code>Ctrl + b</code> 向<code>上</code>滚动<code>一</code>屏</li>
</ul>
<h1 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h1><ul>
<li><code>u</code> 撤销（Undo）</li>
<li><code>U</code> 撤销对<code>整行</code>的操作</li>
<li><code>Ctrl + r</code> 重做（Redo），即撤销的撤销。</li>
</ul>
<h1 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h1><ol>
<li><code>x </code>删除当前字符</li>
<li><code>3x</code> 删除当前光标开始向后三个字符<br>1.<code>X</code>删除当前字符的前一个字符。X&#x3D;dh<br>1.<code>dl</code>删除当前字符， dl&#x3D;x<br>1.<code>dh</code>删除前一个字符<br>1.<code>dd</code>删除当前行<br>1.<code>dj</code>删除上一行<br>1.<code>dk</code>删除下一行<br>1.<code> 10d</code> 删除当前行开始的10行。</li>
<li><code>D </code>删除当前字符至行尾。D&#x3D;d$</li>
<li><code>d$</code> 删除当前字符之后的所有字符（本行）</li>
<li><code>kdgg</code> 删除当前行之前所有行（不包括当前行）</li>
<li><code>jdG（jd shift + g）</code>   删除当前行之后所有行（不包括当前1. 行）</li>
<li><code>:1,10d</code> 删除1-10行</li>
<li><code>:11,$d</code> 删除11行及以后所有的行</li>
<li><code>:1,$d </code>删除所有行</li>
<li><code>J(shift + j)</code>　　删除两行之间的空行，实际上是合并两行。</li>
</ol>
<h1 id="拷贝和粘贴"><a href="#拷贝和粘贴" class="headerlink" title="拷贝和粘贴"></a>拷贝和粘贴</h1><ol>
<li><code>yy</code> 拷贝当前行</li>
<li><code>nyy</code> 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。</li>
<li><code>p</code>  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行1. 的下一行粘贴。</li>
<li><code>shift+p</code> 在当前行前粘贴</li>
<li><code>:1,10 co 20</code> 将1-10行插入到第20行之后。</li>
<li><code>:1,$ co $</code> 将整个文件复制一份并添加到文件尾部。</li>
<li>正常模式下按<code>v</code>（逐字）或<code>V</code>（逐行）进入可视模式，然后用jklh命令移动即1. 可选择某些行或字符，再按y即可复制<br>1.<code> ddp</code>交换当前行和其下一行</li>
<li><code>xp</code>交换当前字符和其后一个字符</li>
</ol>
<h1 id="剪切命令"><a href="#剪切命令" class="headerlink" title="剪切命令"></a>剪切命令</h1><ol>
<li>正常模式下按<code>v</code>（逐字）或<code>V</code>（逐行）进入可视模式，然后用<code>jklh</code>命令移动即1. 可选择某些行或字符，再按d即可剪切</li>
<li><code>ndd</code> 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴</li>
<li><code>:1,10d</code> 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</li>
<li><code>:1, 10 m 20</code> 将第1-10行移动到第20行之后。</li>
</ol>
<h1 id="窗口命令"><a href="#窗口命令" class="headerlink" title="窗口命令"></a>窗口命令</h1><ol>
<li><code>:split</code>或<code>new</code> 打开一个新窗口，光标停在顶层的窗口上</li>
<li><code>:split file</code>或<code>:new file</code> 用新窗口打开文件</li>
<li><code>split</code>打开的窗口都是<code>横向</code>的，使用<code>vsplit</code>可以<code>纵向</code>打开窗口。</li>
<li><code>Ctrl+ww</code> 移动到下一个窗口</li>
<li><code>Ctrl+wj</code> 移动到下方的窗口</li>
<li><code>Ctrl+wk</code> 移动到上方的窗口</li>
<li>关闭窗口</li>
<li><code>:close</code> 最后一个窗口不能使用此命令，可以防止意外退出vim。</li>
<li><code>:q</code> 如果是最后一个被关闭的窗口，那么将退出vim。</li>
<li><code>ZZ </code>保存并退出。</li>
<li>关闭所有窗口，只保留当前窗口 <code>:only</code></li>
<li>录制宏,按<code>q</code>键<code>加任意字母</code>开始录制，再按<code>q键结束录制</code>（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</li>
</ol>
<h1 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h1><ol>
<li><code>:!command</code></li>
<li><code>:!ls</code> 列出当前目录下文件</li>
<li><code>:!perl -c script.pl</code> 检查perl脚本语法，可以不用退出vim，非常方1. 便。</li>
<li><code>:!perl script.pl</code> 执行perl脚本，可以不用退出vim，非常方便。</li>
<li><code>:suspend或Ctrl - Z</code> 挂起vim，回到shell，按fg可以返回vim。</li>
</ol>
<h1 id="注释命令"><a href="#注释命令" class="headerlink" title="注释命令"></a>注释命令</h1><ol>
<li>perl程序中<code>#</code>开始的行为注释，所以要注释某些行，只需在行首加入#</li>
<li><code>3,5 s/^/#/g</code> 注释第3-5行</li>
<li><code>3,5 s/^#//g</code> 解除3-5行的注释</li>
<li><code>1,$ s/^/#/g</code> 注释整个文档。</li>
<li><code>:%s/^/#/g</code> 注释整个文档，此法更快。</li>
</ol>
<h1 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h1><ol>
<li><code>:help or F1</code> 显示整个帮助</li>
<li><code>:help xxx</code> 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl1. +[的帮助）。<br>1.<code> :help &#39;number&#39;</code> Vim选项的帮助用单引号括起</li>
<li><code>:help &lt;Esc&gt;</code> 特殊键的帮助用&lt;&gt;扩起</li>
<li><code>:help -t</code> Vim启动参数的帮助用-</li>
<li><code>：help i_&lt;Esc&gt;</code> 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式</li>
<li>帮助文件中位于||之间的内容是超链接，可以用<code>Ctrl+]</code>进入链接，<code>Ctrl+o（Ctrl + t）</code>返回</li>
</ol>
<h1 id="其他非编辑命令"><a href="#其他非编辑命令" class="headerlink" title="其他非编辑命令"></a>其他非编辑命令</h1><ol>
<li><code>. </code>重复前一次命令</li>
<li><code>:set ruler?</code>　　查看是否设置了ruler，在.vimrc中，使用set命令设制1. 的选项都可以通过这个命令查看</li>
<li><code>:scriptnames</code>　　查看vim脚本文件的位置，比如.vimrc文件，语法文件1. 及plugin等。</li>
<li><code>:set list</code> 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs&#x3D;tab:&gt;-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。</li>
</ol>
<ul>
<li>Vim教程<blockquote>
<p>在Unix系统上<br> <code>$ vimtutor</code></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>在Windows系统上<br><code>:help tutor</code></p>
</blockquote>
<ol>
<li><code>:syntax</code> 列出已经定义的语法项</li>
<li><code>:syntax clear</code> 清除已定义的语法规则</li>
<li><code>:syntax case match</code> 大小写敏感，int和Int将视为不同的语法元素</li>
<li><code>:syntax case ignore</code> 大小写无关，int和Int将视为相同的语法元素，并用同样的配色方案</li>
</ol>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Android_Studio安装</title>
    <url>//2023/06/04/2023-06-04-Android-Studio%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>学校的移动应用开发课程，不得已下一个，记录一下<br>还是得吐槽一下老师，绝了，混子</p>
</blockquote>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ol>
<li>官网下载<blockquote>
<p>官网：<a href="https://developer.android.google.cn/studio">https://developer.android.google.cn/studio</a></p>
</blockquote>
</li>
<li>随便在哪下，跑起来就行不是吗</li>
</ol>
<p>我下的版本是2022.1</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li><p>打开安装包点击next<br><img src="https://pic.imgdb.cn/item/647c707c1ddac507cc08a7c1.jpg"></p>
</li>
<li><p>继续next，打勾那个是安卓虚拟设备，记得<code>勾上</code><br><img src="https://pic.imgdb.cn/item/647c717d1ddac507cc098e9d.jpg"></p>
</li>
<li><p>更换安装位置，别做c盘战士就是了，继续next<br><img src="https://pic.imgdb.cn/item/647c71a21ddac507cc09b20f.jpg"></p>
</li>
<li><p>Install，左下角打勾的地方是不创建快捷方式，一般没必要<br><img src="https://pic.imgdb.cn/item/647c71f41ddac507cc0a004e.jpg"></p>
</li>
<li><p>ok<br><img src="https://pic.imgdb.cn/item/647c72501ddac507cc0a5176.jpg"></p>
</li>
</ol>
<ul>
<li><p>打开Android Studio</p>
</li>
<li><p>安装谷歌什么的，<code>不需要</code><br><img src="https://pic.imgdb.cn/item/647c7ba91ddac507cc1f1550.jpg"></p>
</li>
</ul>
<h1 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h1><blockquote>
<p>SDK全称为Software Development kit,就是<code>软件开发工具包</code>,可以将app源码编译为可执行的app应用</p>
</blockquote>
<ul>
<li><p>提示需要安装<code>SDK</code><br><img src="https://pic.imgdb.cn/item/647c7b461ddac507cc1e78ef.jpg"></p>
</li>
<li><p>选 <code>custom</code><br><img src="https://pic.imgdb.cn/item/647c7c941ddac507cc207720.jpg"></p>
</li>
<li><p>选界面，进去也可以调，随意选<br><img src="https://pic.imgdb.cn/item/647c7cbd1ddac507cc20c20c.jpg"></p>
</li>
<li><p>安装SDK，除了<code>安装位置</code>，其他默认即可 （看着我的眼睛，不要做c盘战士好吗）<br><img src="https://pic.imgdb.cn/item/647c7d7c1ddac507cc225071.jpg"></p>
</li>
<li><p>这里是虚拟机的内存，学习两个G也够用了<br><img src="https://pic.imgdb.cn/item/647c7e031ddac507cc23430a.jpg"></p>
</li>
<li><p>提示要安装这个，next即可<br><img src="https://pic.imgdb.cn/item/647c7e6f1ddac507cc23db61.jpg"></p>
</li>
<li><p>要下载SDK，next即可<br><img src="https://pic.imgdb.cn/item/647c7eb01ddac507cc243b9a.jpg"></p>
</li>
<li><p>一定一定要选Accept，最后一个好像是Intel硬件加速什么的，我也点了，前两个<code>必选Accept</code>,选完Finish<br><img src="https://pic.imgdb.cn/item/647c7f001ddac507cc24b2b7.jpg"></p>
</li>
<li><p>稍等一会，安装中<br><img src="https://pic.imgdb.cn/item/647c7f671ddac507cc2558a8.jpg"></p>
</li>
<li><p>下载完点击finish，进入到新建工程界面<br><img src="https://pic.imgdb.cn/item/647c80cb1ddac507cc274f48.jpg"></p>
</li>
</ul>
<blockquote>
<p>这就差不多ok了</p>
</blockquote>
<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><ul>
<li><p>这里新建一个项目<br><img src="https://pic.imgdb.cn/item/647c811b1ddac507cc27b40d.jpg"></p>
</li>
<li><p>选这个<br><img src="https://pic.imgdb.cn/item/647c813c1ddac507cc27dee8.jpg"></p>
</li>
<li><p>默认位置改一下，默认语言改为<code>java</code>，然后<code>finish</code><br><img src="https://pic.imgdb.cn/item/647c81b21ddac507cc2876ac.jpg"></p>
</li>
<li><p>然后就会默认创建一个工程<br><img src="https://pic.imgdb.cn/item/647c821b1ddac507cc28fe02.jpg"></p>
</li>
</ul>
<h1 id="安装安卓模拟器，"><a href="#安装安卓模拟器，" class="headerlink" title="安装安卓模拟器，"></a>安装安卓模拟器，</h1><ul>
<li><p>点击<code>Device Manager</code><br><img src="https://pic.imgdb.cn/item/647c82791ddac507cc296bbc.jpg"></p>
</li>
<li><p>点击，都是外观，我这里选择的是 Pixel 4，选择完 next<br><img src="https://pic.imgdb.cn/item/647c83021ddac507cc2a2ff8.jpg"></p>
</li>
<li><p>版本我选择的13<br><img src="https://pic.imgdb.cn/item/647c84221ddac507cc2bdd83.jpg"></p>
</li>
<li><p>安装，点击下载键<br><img src="https://pic.imgdb.cn/item/647c84681ddac507cc2c6856.jpg"></p>
</li>
<li><p>无脑finish<br><img src="https://pic.imgdb.cn/item/647c852f1ddac507cc2dd8df.jpg"></p>
</li>
<li><p>点击启动键<br><img src="https://pic.imgdb.cn/item/647c857e1ddac507cc2e4f8e.jpg"></p>
</li>
<li><p>如果想要这种界面的模拟器，不需要就略过</p>
<blockquote>
<p>左上角点击<code>File</code> -&gt; 点击 <code>Settings</code>或者<code>Ctrl + Alt + s</code> -&gt; 搜索栏搜索 <code>Emulator</code> -&gt; 将 <code>Launuch in a tool window</code> 的复选框<code>对勾去掉</code> -&gt; 设置框右下角 <code>apply</code> -&gt; <code>ok</code> -&gt; 重新启动 Android Studio 即可<br><img src="https://pic.imgdb.cn/item/647c883c1ddac507cc339837.jpg"></p>
</blockquote>
</li>
<li><p>重启完成后运行模拟器，然后点击<br><img src="https://pic.imgdb.cn/item/647c899c1ddac507cc35330e.jpg"></p>
</li>
<li><p>效果如图,ok了<br><img src="https://pic.imgdb.cn/item/647c89ba1ddac507cc3559d6.jpg"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>linux以及windows配置redis</title>
    <url>//2023/06/04/2023-06-04-linux%E4%BB%A5%E5%8F%8Awindows%E9%85%8D%E7%BD%AEredis/</url>
    <content><![CDATA[<h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><h2 id="linux下载"><a href="#linux下载" class="headerlink" title="linux下载"></a>linux下载</h2><blockquote>
<p><a href="https://redis.io/docs/getting-started/">https://redis.io/docs/getting-started/</a></p>
</blockquote>
<h2 id="windows下载"><a href="#windows下载" class="headerlink" title="windows下载"></a>windows下载</h2><blockquote>
<p><a href="https://github.com/MicrosoftArchive/redis/releases">https://github.com/MicrosoftArchive/redis/releases</a></p>
</blockquote>
<h2 id="linux编译"><a href="#linux编译" class="headerlink" title="linux编译"></a>linux编译</h2><ol>
<li>先<code>押解</code>压缩包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-4.0.0.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure></li>
<li>然后安装Redis的依赖环境<code>gcc</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure></li>
<li>进入 &#x2F;usr&#x2F;local&#x2F;redis-4.0.0进行<code>编译</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li>
<li>进入redis的<code>src</code>目录中，进行安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意，以上四步只在第一次安装执行<br>5. 在src目录下，运行redis.server 默认端口号为 6379</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./redis.server</span><br></pre></td></tr></table></figure>

<ul>
<li>ok 启动完成</li>
</ul>
<h2 id="windows启动"><a href="#windows启动" class="headerlink" title="windows启动"></a>windows启动</h2><p>打开redis根目录</p>
<ol>
<li>双击 <code>redis-server.exe</code></li>
<li>双击 <code>redis-cli.exe</code></li>
</ol>
<ul>
<li>ok运行完成</li>
</ul>
<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><h2 id="开启登录密码校验"><a href="#开启登录密码校验" class="headerlink" title="开启登录密码校验"></a>开启登录密码校验</h2><blockquote>
<p>redis安装后默认是不需要密码的，但是这样是不安全的，所有我们在<code>配置</code>文件中修改，打开密码校验</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/你的redis目录/src/redis.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>通过搜索找到密码配置<ul>
<li>进入文件中后<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/pass  或  /requirepass</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<blockquote>
<p>未打开时，这是一个<code>注释</code>，看清楚奥<br><img src="https://pic.imgdb.cn/item/647c3dd6f024cca17395f74e.jpg"></p>
</blockquote>
<ul>
<li><p>找到后按 <code>i</code> 进去编辑模式，注释去掉，然后 <code>requirepass</code> 后面就是你修改的密码</p>
</li>
<li><p>修改后按<code>esc</code> + <code>:wq </code>保存并退出</p>
</li>
<li><p>然后再次打开redis服务就会需要密码了</p>
</li>
<li><p>验证一下<br><img src="https://pic.imgdb.cn/item/647c3f29f024cca17398aba8.jpg"></p>
</li>
</ul>
<h2 id="打开远程连接"><a href="#打开远程连接" class="headerlink" title="打开远程连接"></a>打开远程连接</h2><blockquote>
<p>刚安装的redis默认只能有当前服务器连接，不支持远程连接，我们需要修改配置<br>在windows中redis的根目录下试验一下<br><img src="https://pic.imgdb.cn/item/647c40e3f024cca1739e6351.jpg"></p>
</blockquote>
<p>果然</p>
<ul>
<li>还是修改conf文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim redis.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<p>进入文件后 输入 <code>/bind</code> 搜索</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bind</span><br></pre></td></tr></table></figure>
<p>找到它，注释掉<br><img src="https://pic.imgdb.cn/item/647c4163f024cca173a13625.jpg"></p>
<ul>
<li>重启redis,先找到它，然后<code>干掉</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef |grep redis</span><br><span class="line">kill -9 你redis的进程号</span><br></pre></td></tr></table></figure>
<img src="https://pic.imgdb.cn/item/647c42e0f024cca173a9aab4.jpg"></li>
</ul>
<p>最后<code>关闭防火墙</code>或者<code>设置好端口号</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent #开放6379端口</span><br><span class="line">firewall-cmd --reload   # 重启防火墙</span><br></pre></td></tr></table></figure>

<p>windows校验<br><img src="https://pic.imgdb.cn/item/647c45c4f024cca173b17ab3.jpg"></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖优化篇</title>
    <url>//2023/06/07/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E4%BC%98%E5%8C%96%E7%AF%87/</url>
    <content><![CDATA[<p>在此特别感谢黑马程序员提供的教程:</p>
<div class="bvideo"><a href="//www.bilibili.com/video/BV13a411q753" target="_blank">
        <div class="bvideo-box">
            <div class="bvideo-cover">
                <div class="cover-default"></div>
                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i0.hdslb.com/bfs/archive/66e8947b3c48d6710c93d572ebc91f27bf4db9fc.png)">
                    <i class="icon-video"></i>
                </div>
                <span class="duration">32:16:10</span>
            </div>
            <div class="bvideo-info">
                <p class="title">黑马程序员Java项目实战《瑞吉外卖》，轻松掌握springboot + mybatis plus开发核心技术的真java实战项目</p>
                <p class="card-status">
                    <span class="play-num">
                        <i class="fa fa-youtube-play"></i>
                        <span>246.9万</span></span>
                    <span>
                        <i class="fa fa-list-alt"></i>
                        <span>7.5万</span></span></p>
                <div class="partition">
                    <label class="card-label">视频</label>
                    <label class="up-label"></label>
                    <label class="up-name">黑马程序员</label>
                </div>
                <div class="actions hide"></div>
            </div>
        </div>
    </a></div>

<blockquote>
<p>本文是瑞吉外卖项目的优化篇<br>直接开始</p>
</blockquote>
<h1 id="上传git"><a href="#上传git" class="headerlink" title="上传git"></a>上传git</h1><ol>
<li><p>将之前做好的项目上传到github或gitee，然后新建一个<code>分支</code>，接下来所有的操作都在新建的分支上操作，最后<code>合并</code>分支即可</p>
<blockquote>
<p>上传就不放上来了，如果忘了可以回去看看</p>
</blockquote>
</li>
<li><p>上传完后，在新建的<code>v1.0</code>分支上进行<code>redis</code>的环境配置</p>
</li>
</ol>
<h1 id="项目redis环境配置"><a href="#项目redis环境配置" class="headerlink" title="项目redis环境配置"></a>项目redis环境配置</h1><h2 id="配置pom文件"><a href="#配置pom文件" class="headerlink" title="配置pom文件"></a>配置pom文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h2 id="新增redis配置类"><a href="#新增redis配置类" class="headerlink" title="新增redis配置类"></a>新增redis配置类</h2><ul>
<li>因为springboot的自动配置会将key和value做些更改，所以将key的配置改一下<br><img src="https://pic.imgdb.cn/item/64800e901ddac507cc7a50b5.jpg"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object,Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="yml配置文件添加配置项"><a href="#yml配置文件添加配置项" class="headerlink" title="yml配置文件添加配置项"></a>yml配置文件添加配置项</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span>  <span class="comment">#redis服务器的ip,如果是本地可以直接用 localhost,方便后续观察调试</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span>        <span class="comment">#redis的端口号，默认为6379</span></span><br><span class="line">      <span class="attr">password:</span>         <span class="comment">#自己设置的redis密码，localhost 可以不填密码</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">0</span>       <span class="comment">#默认0号数据库</span></span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul>
<li>配置完成后，上传到v1.0分支，在网页上刷新切换分支验证一下<br><img src="https://pic.imgdb.cn/item/648010901ddac507cc7d3cb5.jpg"></li>
</ul>
<blockquote>
<p>ok，这就配置好了</p>
</blockquote>
<h1 id="缓存短信验证码优化"><a href="#缓存短信验证码优化" class="headerlink" title="缓存短信验证码优化"></a>缓存短信验证码优化</h1><blockquote>
<p>之前用的是 <code>session</code> 存储验证码，而 session 的默认存活时间是<code>三十分钟</code>，显然不符合验证码的逻辑，现在改造为将验证码缓存在<code>redis</code>中</p>
</blockquote>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol>
<li>在服务端 <code>UserController</code> 中注入 <code>RedisTemplate </code>对象，用于操作redis</li>
<li>在服务端 <code>UserController</code> 的 <code>sendMsg</code> 方法中，将随机生成的验证码缓存到 redis 中，并设置有效期<code>5</code>分钟</li>
<li>在服务端 <code>UserController</code> 的 <code>login</code> 方法中， 从 redis 中获取缓存的验证码，如果登录成功则<code>删除</code>redis的验证码</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>在 <code>UserServiceImpl</code> 中 注入 <code>RedisTemplate</code>,将验证码存入 redis 中，并设置有效时间</li>
</ul>
<p><code>UserServiceImpl</code> 的 <code>sendMsg</code> 实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure>


<p><code>UserServiceImpl</code> 的 <code>login</code> 实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#从redis 中获取验证码</span><br><span class="line"> <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br></pre></td></tr></table></figure>
<p>如果登录成功，删除redis缓存的验证码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        删除验证码</span></span><br><span class="line">        redisTemplate.delete(phone);</span><br></pre></td></tr></table></figure>

<ul>
<li>UserServiceImpl 完整代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码发送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(User user, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成 4位数 验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">        <span class="comment">//调用阿里云，发送手机验证码</span></span><br><span class="line"><span class="comment">//            SMSUtils.sendMessage(&quot;阿里云短信测试&quot;, &quot;SMS_154950909&quot;,phone,code);</span></span><br><span class="line">        <span class="comment">//生成的验证码 保存到 session</span></span><br><span class="line"><span class="comment">//        session.setAttribute(phone, code);</span></span><br><span class="line">        redisTemplate.opsForValue().set(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;code:&#123;&#125;&quot;</span>, code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(Map map, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//获取验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">        <span class="comment">//获取session中的验证码,根据 key 获取 value</span></span><br><span class="line"><span class="comment">//        Object codeInSession = session.getAttribute(phone);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从redis 中获取 验证码</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对比验证码</span></span><br><span class="line">        <span class="keyword">if</span> (!(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果正确，登录</span></span><br><span class="line"><span class="comment">//        删除验证码</span></span><br><span class="line">        redisTemplate.delete(phone);</span><br><span class="line">        <span class="comment">//判断是否为新用户，如果不是，自动注册为新用户</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        <span class="comment">//查询数据库，如果查出不等于空，直接返回对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//如果等于空，注册</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//是新用户</span></span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setPhone(phone);</span><br><span class="line">            user.setStatus(<span class="number">1</span>);</span><br><span class="line">            userService.save(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h2><ol>
<li><p>运行idea，打开网页进入到界面,输入手机号获取验证码<br><img src="https://pic.imgdb.cn/item/648019881ddac507cc8a14df.jpg"><br><img src="https://pic.imgdb.cn/item/6480197f1ddac507cc8a0c7c.jpg"></p>
</li>
<li><p>登陆进去以后查看redis 是否已经删除<br><img src="https://pic.imgdb.cn/item/648019e91ddac507cc8a7c7e.jpg"></p>
</li>
</ol>
<ul>
<li>那么这就ok了</li>
</ul>
<h1 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><blockquote>
<p>前面我们已经实现了移动端菜品查看功能，对应的服务端方法为DishController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长。现在需要对此方法进行缓存优化，提高系统的性能。</p>
</blockquote>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>思路分析<ol>
<li>改造DishController的list方法，先从Redis中获取菜品数据，如果有则直接返回，无需查询数据库;如果没有则查询数据库，并将查询到的菜品数据放入Redis。</li>
<li>改造DishController的save和update方法，加入清理缓存的逻辑<blockquote>
<p>注意事项:使用缓存过程中，要注意保证数据库中的数据和缓存中的数据一致，如果数据库中的数据发生变化，需要及时清理缓存数据。</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<ol>
<li><p>先在DishController中注入RedisTemplate</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在dishservice中实现方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;DishDto&gt; <span class="title function_">getByList</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+       List&lt;DishDto&gt; dishDtoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">+       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_&quot;</span>  + dish.getStatus();</span><br><span class="line">+        dishDtoList = (List&lt;DishDto&gt;) redisTemplate.opsForValue().get(key);</span><br><span class="line">+        <span class="keyword">if</span> (dishDtoList != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dishDtoList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件查询器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//过滤id</span></span><br><span class="line">        queryWrapper.eq(dish.getCategoryId() != <span class="literal">null</span>, Dish::getCategoryId, dish.getCategoryId());</span><br><span class="line">        <span class="comment">//过滤状态</span></span><br><span class="line">        queryWrapper.eq(Dish::getStatus, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Dish::getSort).orderByAsc(Dish::getUpdateTime);</span><br><span class="line">        <span class="comment">//获取查询到的结果作为返回值</span></span><br><span class="line">        List&lt;Dish&gt; list = dishService.list(queryWrapper);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">         dishDtoList = list.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//对象拷贝</span></span><br><span class="line">            BeanUtils.copyProperties(item, dishDto);</span><br><span class="line">            <span class="comment">//获取分类id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">            <span class="comment">//根据id获取分类对象</span></span><br><span class="line">            <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">            <span class="keyword">if</span> (category != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">                dishDto.setCategoryName(categoryName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取当前菜品的id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> item.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;DishFlavor&gt; dishFlavorLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            dishFlavorLambdaQueryWrapper.eq(DishFlavor::getDishId, id);</span><br><span class="line">            <span class="comment">//根据菜品id，查询到菜品口味</span></span><br><span class="line">            List&lt;DishFlavor&gt; dishFlavorList = dishFlavorService.list(dishFlavorLambdaQueryWrapper);</span><br><span class="line">            <span class="comment">//赋给dishDto的对应属性</span></span><br><span class="line">            dishDto.setFlavors(dishFlavorList);</span><br><span class="line">            <span class="keyword">return</span> dishDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">         <span class="comment">//如果不存在,那么需要查询数据库,并将查询到的菜品放入缓存,有效期六十分钟</span></span><br><span class="line">+        redisTemplate.opsForValue().set(key,dishDtoList,<span class="number">60</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dishDtoList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改DishServiceImpl中的<code>update</code>和<code>save</code>和批量修改方法(<code>status</code>)，加入清理缓存的逻辑</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">update</button></li><li class="tab"><button type="button" data-href="#tab1-2">save</button></li><li class="tab"><button type="button" data-href="#tab1-3">status</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改菜品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">//修改 dish 表中数据</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(dto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先删除 dishFlavor 中的口味数据 ，执行 delete操作</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过对比得到和修改菜品id 相对应的 口味数据</span></span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, dto.getId());</span><br><span class="line">        <span class="comment">//执行删除操作</span></span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line">        <span class="comment">//再将新的口味数据添加进 dish-flavor ，执行 insert 操作</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dto.getFlavors();</span><br><span class="line">        <span class="comment">//将前端传回的口味数据封装到 集合中</span></span><br><span class="line">        List&lt;DishFlavor&gt; list = flavors.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="comment">//将前端传回的菜品id封装到 flavors 中</span></span><br><span class="line">            item.setDishId(dto.getId());</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//执行添加操作</span></span><br><span class="line">        dishFlavorService.saveBatch(list);</span><br><span class="line">        <span class="comment">//精确清除某个分类下的缓存</span></span><br><span class="line">+        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dto.getCategoryId() + <span class="string">&quot;_&quot;</span> + dto.getStatus();</span><br><span class="line">+        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品同时，保存对应口味</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">//保存菜品的基本信息到菜品表dish</span></span><br><span class="line">        <span class="built_in">this</span>.save(dto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从 dish 中获取id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dto.getId();  <span class="comment">//保存菜品id</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//菜品口味</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dto.getFlavors();</span><br><span class="line">        flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">            item.setDishId(dishId);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存菜品口味数据到菜品口味表 dish——flavor</span></span><br><span class="line">        dishFlavorService.saveBatch(flavors);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空缓存数据</span></span><br><span class="line">+        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dto.getCategoryId() + <span class="string">&quot;_&quot;</span> + dto.getStatus();</span><br><span class="line">+        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量停售，启售</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(Integer status, List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        LambdaUpdateWrapper&lt;Dish&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        updateWrapper.in(ids != <span class="literal">null</span>, Dish::getId, ids);</span><br><span class="line">        updateWrapper.set(Dish::getStatus, status);</span><br><span class="line">+        LambdaQueryWrapper&lt;Dish&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">+        lambdaQueryWrapper.in(Dish::getId, ids);</span><br><span class="line">+        List&lt;Dish&gt; dishes = dishService.list(lambdaQueryWrapper);</span><br><span class="line">+            <span class="keyword">for</span> (Dish dish : dishes) &#123;</span><br><span class="line">+                 <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dish.getCategoryId() + <span class="string">&quot;_1&quot;</span>;</span><br><span class="line">+                   redisTemplate.delete(key);</span><br><span class="line">+              &#125;</span><br><span class="line">        dishService.update(updateWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li>
</ol>
<h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><ul>
<li>在实现过程中，使用老师给的<code>redis</code>配置类出现了bug，菜品的实现类中的创造时间和修改时间使用的 <code>LocalDateTime</code> 类型，redis存的进去，但取不出来。正常运行，但是前后端联调时，移动端的菜品信息都无法访问，在找了资料后才发现是redis貌似不支持 <code>LocalDateTime</code> 的类型。所以我更改了redis<code>配置类</code></li>
</ul>
<h3 id="更改RedisConfig"><a href="#更改RedisConfig" class="headerlink" title="更改RedisConfig"></a>更改<code>RedisConfig</code></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"><span class="comment">//     extends CachingConfigurerSupport</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) &#123;</span></span><br><span class="line"><span class="comment">//        RedisTemplate&lt;Object, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //默认的Key序列化器为：JdkSerializationRedisSerializer</span></span><br><span class="line"><span class="comment">//        redisTemplate.setKeySerializer(new StringRedisSerializer()); // key序列化</span></span><br><span class="line"><span class="comment">//        redisTemplate.setValueSerializer(new GenericJackson2JsonRedisSerializer()); // value序列化</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        redisTemplate.setConnectionFactory(connectionFactory);</span></span><br><span class="line"><span class="comment">//        return redisTemplate;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean()</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; j2jrs = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        <span class="comment">// 解决jackson2无法反序列化LocalDateTime的问题</span></span><br><span class="line">        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">        om.registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);</span><br><span class="line">        j2jrs.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 序列化 value 时使用此序列化方法</span></span><br><span class="line">        template.setValueSerializer(j2jrs);</span><br><span class="line">        template.setHashValueSerializer(j2jrs);</span><br><span class="line">        <span class="comment">// 序列化 key 时</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">srs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        template.setKeySerializer(srs);</span><br><span class="line">        template.setHashKeySerializer(srs);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更改Dihs-实现类"><a href="#更改Dihs-实现类" class="headerlink" title="更改Dihs 实现类"></a>更改Dihs 实现类</h3><ul>
<li>同时在dish实现类的 创建时间和修改时间上加上注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建时间</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改时间</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p><img src="https://pic.imgdb.cn/item/648135a31ddac507cc0b33cc.jpg"></p>
<ul>
<li>由于我们现在还没有编写套餐数据的缓存，所以我们现在可以用菜品数据和套餐数据做对比</li>
<li>先手动点击一遍所有的分类，让Redis缓存（包括菜品分类和套餐分类）</li>
<li>之后去控制台清空输出，方便我们后续对比<br>随后再次点击菜品分类，控制台日志不会输出SQL语句的日志</li>
<li>但是点击套餐分类时，控制台会输出SQL语句的日志</li>
<li>当我们对菜品数据进行任意形式的修改(修改&#x2F;添加&#x2F;删除&#x2F;改状态)时，缓存数据将被清理，同时重新查询，避免出现脏数据</li>
</ul>
<h1 id="缓存套餐数据"><a href="#缓存套餐数据" class="headerlink" title="缓存套餐数据"></a>缓存套餐数据</h1><h2 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h2><blockquote>
<p>前面我们已经实现了移动端套餐查看功能，对应的服务端方法为SetmealController的list方法，此方法会根据前端提交的查询条件进行数据库查询操作。在高并发的情况下，频繁查询数据库会导致系统性能下降，服务端响应时间增长现在需要对此方法进行缓存优化，提高系统的性能。具体的实现思路如下:</p>
</blockquote>
<ol>
<li>导入<code>Spring Cache</code>和<code>Redis</code>相关<code>maven</code>坐标</li>
<li>在<code>application.yml</code>中配置缓存数据的过期时间</li>
<li>在启动类上加入<code>@EnableCaching</code>注解，开启缓存注解功能,在<code>SetmealController</code>的list方法上加入<code>@Cacheable</code>注解</li>
<li>在<code>SetmealController</code>的save和delete方法上加入<code>CacheEvict</code>注解</li>
</ol>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>使用更方便的注解方式进行操作</li>
</ul>
<ol>
<li>导入redis和cache的pom坐标，redis前期已经导入过了，所以只用导入cache的即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li>在yml文件中增加缓存有效期配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">1800000</span> <span class="comment">#缓存有效期,30分钟</span></span><br></pre></td></tr></table></figure></li>
<li>启动类开启缓存注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span>       <span class="comment">//扫描注解，创建过滤器</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>       <span class="comment">//事务支持</span></span><br><span class="line">+ <span class="meta">@EnableCaching</span>      <span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ReggieApplication.class,args);</span><br><span class="line">        log.info(<span class="string">&quot;启动成功&quot;</span>);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>SermealService的getByList方法添加<code>Cacheable</code>注解<br>该注解的功能是：在方法执行前，<code>Spring</code>先查看缓存中是否有数据；如果有数据，则直接返回缓存数据；若没有数据，调用方法并将方法返回值放到缓存中<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable</span> (value = <span class="string">&quot;setmealCache&quot;</span> ,key = <span class="string">&quot;#setmeal.id + &#x27;_&#x27; + setmeal.status&quot;</span> )</span><br><span class="line">    <span class="keyword">public</span> List&lt;Setmeal&gt; <span class="title function_">getByList</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//过滤，</span></span><br><span class="line">        queryWrapper.in(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId() );</span><br><span class="line">        queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, <span class="number">1</span>);</span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">        List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>测试的时候报错了，页面上的套餐数据报错了，错误码为<code>500</code>，原来是因为没有给 返回的 R类实现序列化接口</p>
</blockquote>
<ul>
<li><p>添加即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>再次测试，成功，只有第一次访问的时候会执行查询sql，其余都是从缓存中读取的数据</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">deleteIdsWithSetmeal</button></li><li class="tab"><button type="button" data-href="#tab1-2">save</button></li><li class="tab"><button type="button" data-href="#tab1-3">update</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>执行删除时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span>   <span class="comment">//删除这个value下的所有缓存数据</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>执行新增时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span>   <span class="comment">//删除这个value下的所有缓存数据</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>执行批量停售启售时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(value = &quot;setmealCache&quot;,allEntries = true)</span>   <span class="comment">//删除这个value下的所有缓存数据</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>修改完毕之后，重启服务器测试看看有没有效果，如果有效果的话，我们push一下代码，继续做别的优化</li>
</ul>
<h1 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h1><p>什么是mysql主从复制？</p>
<blockquote>
<p>MySOL主从复制是一个异步的复制过程，底层是基于Mysql数据库自带的二进制日志功能。就是一台或多台MySOL数据库(slave，即从库)从另一台MySOL数据库(master，即主库)进行日志的复制然后再解析日志并应用到自身，最终实现从库的数据和主库的数据保持一致。MySOL主从复制是MySOL数据库<code>自带功能</code>，无需借助第三方工具。</p>
</blockquote>
<ul>
<li>MySQL复制过程分成三步</li>
</ul>
<ol>
<li>master将改变记录到二进制日志 (binary log)</li>
<li>slave将master的binary log拷贝到它的中继日志 (relay log)</li>
<li>slave重做中继日志中的事件，将改变应用到自己的数据库中</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/6482b0e61ddac507cc5fe828.jpg"></p>
<h2 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h2><ul>
<li>前置条件<br>提前准备好两台服务器，分别安装mysqk并启动服务成功<ul>
<li>主库 Master</li>
<li>从库 Slave</li>
</ul>
</li>
</ul>
<blockquote>
<p>一台使用虚拟机，一台用本机即可，我使用的是windows  cmd界面输入： <code>mysql -u root -p</code>  回车即可</p>
</blockquote>
<ul>
<li>完成，当然现在他们还有没有任何关系<br><img src="https://pic.imgdb.cn/item/6482b38c1ddac507cc630ac2.jpg"></li>
</ul>
<h3 id="配置主库-master"><a href="#配置主库-master" class="headerlink" title="配置主库 master"></a>配置主库 master</h3><ol>
<li><p>修改Mysql数据库的配置文件，我这里使用虚拟机的数据库作为主库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin  #[必须]启动二进制日志</span><br><span class="line">server-id=100   # [必须]服务器唯一ID</span><br></pre></td></tr></table></figure></li>
<li><p><code>重启</code>mysql服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
</li>
<li><p>第三步: 登录<code>Mysql</code>数据库，执行下面SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;xiaoming&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> Root<span class="variable">@123456</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面SOL的作用是创建一个用户xiaoming,密码为Root@123456，并且给xiaoming用户授予REPLICATION SLAVE权限。常用于建立复制时所需要用到的用户权限，也就是slave必须被master授权具有该权限的用户，才能通过该用户复制。</p>
</blockquote>
</li>
</ol>
<ul>
<li>mysql版本<code>8</code> 或 <code>8以上</code>依次使用以下两条命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER 用户名 IDENTIFIED WITH &#x27;mysql_native_password&#x27; BY &#x27;密码&#x27;;</span><br><span class="line"> GRANT REPLICATION SLAVE ON *.* TO 用户名;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>记录值</li>
</ol>
<ul>
<li>登录mysql数据库，执行下面sql，记录下结果中 <code>file</code> 和 <code>position</code> 的值,<br>很重要！输入完这条命令后，不要再有任何操作！，一会从库就靠这两个值定位<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>
mysql-bin.000001 |     1200</li>
</ul>
<h3 id="配置从库Slave"><a href="#配置从库Slave" class="headerlink" title="配置从库Slave"></a>配置从库Slave</h3><ol>
<li>直接虚拟机克隆一下然后改下<code>ip</code>和mysql配置文件就可以了</li>
</ol>
<ul>
<li>右键单击虚拟机 -&gt; 管理 -&gt; 克隆</li>
</ul>
<ol start="2">
<li><p>修改mysql的uuid，找到以后进去随便改一个就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -iname &quot;auto.cnf&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在第二个服务器的mysql配置文件的 [mysqld]下 新增</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server-id=100 [保证id是唯一不重复即可，自定义]</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录mysql数据库,<code>mysql8以下</code>的执行下面的sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.10.102&#x27;,master_user=&quot;xiaoming&quot;,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;mysql-bin.000002&#x27;,master_log_pos=157;</span><br></pre></td></tr></table></figure>
<p><code>mysql8</code>版本执行以下sql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">change master to master_host=&#x27;192.168.10.102&#x27;,master_user=&quot;xiaoming&quot;,master_password=&#x27;Root@123456&#x27;,master_log_file=&#x27;mysql-bin.000003&#x27;,master_log_pos=157,get_master_public_key=1</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行后使用 <code>show slave status</code> 或 <code>show slave status\G</code> 查看</p>
</li>
</ol>
<ul>
<li><pre><code>      Slave_IO_Running: Yes
      Slave_SQL_Running: Yes
</code></pre>
</li>
</ul>
<p>确认这两个状态都为yes<br><img src="https://pic.imgdb.cn/item/6482de8e1ddac507ccaf4917.jpg"></p>
<ol start="5">
<li>使用navicat 验证， 连接上以后在主表创建数据库和表，刷新后子表也同样有了同样的库和表</li>
</ol>
<ul>
<li>配置完成</li>
</ul>
<h2 id="读写分离案例"><a href="#读写分离案例" class="headerlink" title="读写分离案例"></a>读写分离案例</h2><blockquote>
<p>背景：<br>面对日益增加的系统访问量，数据库的吞吐量面临着巨大瓶颈。对于同一时刻有大量并发读操作和较少写操作类型的应用系统来说，将数据库拆分为主库和从库，主库负责处理事务性的增删改操作，从库负责处理查询操作，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善<br><img src="https://pic.imgdb.cn/item/6482ea161ddac507ccc3c134.jpg"></p>
</blockquote>
<ul>
<li>使用Sharding-JDBC实现读写分离步骤</li>
</ul>
<ol>
<li><p>导入maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中配置读写分离规则</p>
</li>
<li><p>在配置文件中配置允许bean定义覆盖配置项</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.100:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.101:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>在配置文件中配置允许bean定义覆盖配置项</p>
</li>
</ol>
<ul>
<li>在 yml 文件中加入main配置项<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.100:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.101:3306/rw?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">main:</span></span><br><span class="line"><span class="string">+</span>    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行程序，使用postman联调，注意看控制台输出的日志，运行的是主库还是从库</p>
<h2 id="读写分离应用到项目"><a href="#读写分离应用到项目" class="headerlink" title="读写分离应用到项目"></a>读写分离应用到项目</h2><h3 id="数据库环境准备-主从复制"><a href="#数据库环境准备-主从复制" class="headerlink" title="数据库环境准备(主从复制)"></a>数据库环境准备(主从复制)</h3><ul>
<li>直接使用前面在虚拟机搭建的主从复制的数据库环境即可</li>
<li>在数据库创建瑞吉外卖项目的业务数据库并导入相关表结构和数据</li>
<li>只用在主库操作即可，从库会自动复制主库数据</li>
</ul>
<ol>
<li>主表创建<code>reggie</code>数据库<br><img src="https://pic.imgdb.cn/item/6482ff741ddac507cce58ccc.jpg"></li>
<li>运行之前数据库导出的<code>sql</code>文件,导出时选择结构和数据<br><img src="https://pic.imgdb.cn/item/6482ffe11ddac507cce67da8.jpg"></li>
</ol>
<h3 id="代码改造"><a href="#代码改造" class="headerlink" title="代码改造"></a>代码改造</h3><ul>
<li>在项目中加入 <code>Sharding-JDBC</code> 实现读写分离步骤：<br>首先新建一个分支，在新的分支上实现代码的优化，最后测试没有问题再合并到主分支上</li>
</ul>
<ol>
<li><p>导入maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--sharding-jdbc--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在配置文件配置读写分离规则,替换掉<code>datasourse</code>,记得要修改数据库名字</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.100:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.101:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure>

</li>
<li><p>在配置文件配置<code>允许bean定义覆盖</code>配置项</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span></span><br><span class="line">        <span class="string">master,slave</span></span><br><span class="line">      <span class="comment"># 主数据源</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.100:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment"># 从数据源</span></span><br><span class="line">      <span class="attr">slave:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.138.101:3306/reggie?characterEncoding=utf-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="comment"># 读写分离配置</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="comment"># 最终的数据源名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dataSource</span></span><br><span class="line">      <span class="comment"># 主库数据源名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span></span><br><span class="line">      <span class="comment"># 从库数据源名称列表，多个逗号分隔</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#开启SQL显示，默认false</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">main:</span></span><br><span class="line"><span class="string">+</span>    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#在映射实体或者属性时，将数据库中表名和字段名中的下划线去掉，按照驼峰命名法映射</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h3><ul>
<li>如果启动不报错，基本上就问题不大了</li>
<li>服务正常启动，测试读写分离</li>
</ul>
<blockquote>
<p>启动测试，前后端联调,没有问题ok！</p>
</blockquote>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger</title>
    <url>//2023/06/10/Swagger/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h1><p>使用Swagger你只需要按照它的规范去定义接口及接口相关的信息，再通过Swagger衍生出来的一系列项目和工具就可以做到生成各种格式的接口文档，以及在线接口调试页面等等。</p>
<blockquote>
<p>官网：<a href="https://swagger.io/">https://swagger.io/</a></p>
</blockquote>
<p>knife4j是为Java MVC框架<code>集成Swagger</code>生成Api文档的增强解决方案</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><ul>
<li>操作步骤<ol>
<li><p>导入knife4j的maven坐标</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>导入knife4j相关配置类,加上 <code>@EnableSwagger2</code>、 <code>@EnableKnife4j</code>注解</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 文档类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.yin.reggie.controller&quot;</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">            .title(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">            .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">            .description(<span class="string">&quot;hello接口文档&quot;</span>)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置静态资源，否则接口文档界面无法访问</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置静态资源映射</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在LoginCheckFilter中设置不需要处理的请求路径</p>
</li>
</ol>
</li>
</ul>
<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><table>
<thead>
<tr>
<th align="left">注解</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Api</td>
<td align="center">用在请求的类上，例如controller，表示对类的说明</td>
</tr>
<tr>
<td align="left">@Apimodel</td>
<td align="center">用在类上，通常是实体类，表示一个返回响应数据的信息</td>
</tr>
<tr>
<td align="left">@ApimodelProperty</td>
<td align="center">用在属性上，描述响应类的属性</td>
</tr>
<tr>
<td align="left">@ApiOperation</td>
<td align="center">用在请求的方法上，说明方法的用途，作用</td>
</tr>
<tr>
<td align="left">@ApilmplicitParams</td>
<td align="center">用在请求的方法上，表示一组参数说明</td>
</tr>
<tr>
<td align="left">@ApilmplicitParam</td>
<td align="center">用在@ApilmplicitParams注解中，指定一个请求参数的各个方面</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>YApi</title>
    <url>//2023/06/10/YApi/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h1><p>&amp;emsp;&amp;emsp;YApi 是高效、易用、功能强大的 api管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 APL，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。YApi让接口开发更简单高效，让接口的管理更具可读性、可维护性，让团队协作更合理<br><br></p>
<blockquote>
<p>源码地址: <a href="https://github.com/YMFE/yapi">https://github.com/YMFE/yapi</a></p>
</blockquote>
<br>
要使用API，需要自己进行部署
<br>
<br>

<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a><strong>使用方式</strong></h1><p>使用Yapi，可以执行下面的操作</p>
<ul>
<li>添加项目</li>
<li>添加分类</li>
<li>添加接口</li>
<li>编辑接口</li>
<li>查看接口</li>
</ul>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是前后端分离开发</title>
    <url>//2023/06/10/%E4%BB%80%E4%B9%88%E6%98%AF%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong><center>介绍</center></strong></h3><br>
 
<p><strong>前后端分离开发</strong>，就是在项目开发过程中，对于前端代码的开发由专门的<strong>前端开发人员</strong>负责，后端代码则由<strong>后端开发人员</strong>负责，这样可以做到分工明确、各司其职，提高开发效率，前后端代码并行开发，可以加快项目开发进度。目前，前后端分离开发方式已经被越来越多的公司所采用，成为当前项目开发的主流开发方式。</p>
<p>前后端分离开发后，从工程机构上也会发生变化，即前后端代码不再混合在同一个maven工程中，而是分为<strong>前端工程</strong>和<strong>后端工程</strong>。<br><img src="https://pic.imgdb.cn/item/6483d4491ddac507cc1343b5.jpg"></p>
<br>
<br>
<br>

<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a><strong><center>开发流程</center></strong></h3><p>&amp;emsp;&amp;emsp;前后端分离开发后，面临一个问题，就是前端开发人员和后端开发人员如何进行配合来共同开发一个项目？可以按照如下流程进行:<br><img src="https://pic.imgdb.cn/item/6483d5071ddac507cc13fc80.jpg"></p>
<ul>
<li><strong>接口(API接口)</strong> 就是一个http的请求地址，主要就是去定义:请求路径、请求方式、请求参数、响应数据等内容。</li>
</ul>
<p><strong><center>前端技术栈</center></strong><br><strong>开发工具</strong></p>
<ul>
<li>Visual Studio Code</li>
<li>hbuilder</li>
</ul>
<p><strong>技术框架</strong></p>
<ul>
<li>nodejs</li>
<li>VUE</li>
<li>ElementUI</li>
<li>mock</li>
<li>webpack</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>瑞吉外卖</title>
    <url>//2023/05/30/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p> 在此特别感谢黑马程序员提供的教程:</p>
<div class="bvideo"><a href="//www.bilibili.com/video/BV13a411q753" target="_blank">
        <div class="bvideo-box">
            <div class="bvideo-cover">
                <div class="cover-default"></div>
                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i0.hdslb.com/bfs/archive/66e8947b3c48d6710c93d572ebc91f27bf4db9fc.png)">
                    <i class="icon-video"></i>
                </div>
                <span class="duration">32:16:10</span>
            </div>
            <div class="bvideo-info">
                <p class="title">黑马程序员Java项目实战《瑞吉外卖》，轻松掌握springboot + mybatis plus开发核心技术的真java实战项目</p>
                <p class="card-status">
                    <span class="play-num">
                        <i class="fa fa-youtube-play"></i>
                        <span>247.2万</span></span>
                    <span>
                        <i class="fa fa-list-alt"></i>
                        <span>7.5万</span></span></p>
                <div class="partition">
                    <label class="card-label">视频</label>
                    <label class="up-label"></label>
                    <label class="up-name">黑马程序员</label>
                </div>
                <div class="actions hide"></div>
            </div>
        </div>
    </a></div>





<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p> 1.老师基本上把代码都写在 controller 层了，我都改在了 service 层,这样复用性更高,并且更规范</p>
<p> 2.老师的前端资料和数据库表有一些小问题，如果遇到了，可以自己试着改改</p>
<p> 3.如果你后面想做逻辑删除，要在模型类中加入isDelete字段，黑马给的资料的模型类里没有逻辑删除属性，但数据表里有</p>
</blockquote>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p> 建立相应数据库、创建 SpringBoot 工程，勾选  <code>Spring Web</code> 、<code>Mysql</code>、<code>Mybatis</code>,然后<code>pom.xml</code>文件中导入<code>druid</code>、<code>lombok</code>和<code>MybatisPlus</code>坐标</p>
<h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><ul>
<li>编译器：IDEA : 2023.1</li>
<li>JDK:17</li>
<li>数据库：Mysql : 8.0</li>
<li>SpringBoot : 2.4.5	(3.0以上后面貌似会报错)</li>
<li>Maven : 3.63</li>
</ul>
<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.yin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reggie_take_out<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatisPlus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--JSON--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--阿里云--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入前端资源，放在<code>resources</code>目录下，资源链接： <a href="https://www.aliyundrive.com/s/PKtpcSVu9rZ">https://www.aliyundrive.com/s/PKtpcSVu9rZ</a> （包含前端资源和数据库脚本）</p>
<h2 id="YML"><a href="#YML" class="headerlink" title="YML"></a>YML</h2><p>再配置一下yml的数据库信息：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">  <span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#应用的名称，可选</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">reggie_take_out</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>打开浏览器，访问 <a href="http://localhost/backend/page/login/login.html">http://localhost/backend/page/login/login.html</a> 可以看到登录页面，不过此时无法登录</p>
<h1 id="后台登陆系统分析"><a href="#后台登陆系统分析" class="headerlink" title="后台登陆系统分析"></a>后台登陆系统分析</h1><p>数据库和前端都有现成的，只用关心后端实现就可以了</p>
<h2 id="创建对应实体类"><a href="#创建对应实体类" class="headerlink" title="创建对应实体类"></a>创建对应实体类</h2><p>目前只用到一个<code>Employee</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建对应mapper和service"><a href="#创建对应mapper和service" class="headerlink" title="创建对应mapper和service"></a>创建对应<code>mapper</code>和<code>service</code></h2><p>EmployeeMapper<br>直接继承<code>BaseMapper</code>就行了，别忘了<code>@Mapper</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EmployeeService<br>继承 <code>Iserive</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EmployeeServiceImpl<br>继承<code>ServiceImpl</code>，实现<code>EmployeeService</code>接口，别忘了@Service注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper, Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="统一结果封装"><a href="#统一结果封装" class="headerlink" title="统一结果封装"></a>统一结果封装</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用返回结果，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h2><p><code>@RequestBody</code> 主要用于接收前端传递给后端的json字符串（请求体中的数据）</p>
<p><code>@HttpServletRequest</code>  如果登录成功，将员工对应的id存到session一份，这样想获取一份登录用户的信息就可以随时获取出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 员工登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.将页面提交的密码password进行md5加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  2.根据页面提交的用户名 username 查询数据库</span></span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  3.如果没有查到则返回登陆失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  4.密码比对，如果不一致则返回登陆失败结果</span></span><br><span class="line">        <span class="keyword">if</span> (!emp.getPassword().equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  5.查看员工状态，如果为已禁用状态，则返回员工已禁用结果</span></span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;员工已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  6.登陆成功，将员工id存入Session并返回登陆结果</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出登录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//清理session中保存的当前员工的id</span></span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="登陆测试"><a href="#登陆测试" class="headerlink" title="登陆测试"></a>登陆测试</h2><p>数据库中目前只有一条用户信息，username为<code>admin</code>，password为<code>123456</code>（已经经过MD5加密了）<br>现在我们访问 <a href="http://localhost/backend/page/login/login.html">http://localhost/backend/page/login/login.html</a><br>输入正确的用户名和密码，正常登录，并跳转至<code>http://localhost/backend/index.html</code><br>输入错误的用户名或密码，会显示登陆失败<br>对应的HTML代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">handleLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loginForm</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> (valid) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">loginApi</span>(<span class="variable language_">this</span>.<span class="property">loginForm</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;userInfo&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res.<span class="property">data</span>))</span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>= <span class="string">&#x27;/backend/index.html&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>对应的JS代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loginApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/employee/login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">logoutApi</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/employee/logout&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完善登录功能"><a href="#完善登录功能" class="headerlink" title="完善登录功能"></a>完善登录功能</h2><p>问题分析：</p>
<ul>
<li><p>之前的登录功能，我们不登录，直接访问 <a href="http://localhost/backend/index.html">http://localhost/backend/index.html</a> 也可以正常访问，这显然是不合理的</p>
</li>
<li><p>我们希望看到的效果是，只有登录成功才能看到页面，未登录状态则跳转到登录页面</p>
</li>
<li><p>那么具体改如何实现呢？使用过滤器或拦截器，在过滤器或拦截器中判断用户是否登录，然后在选择是否跳转到对应页面</p>
</li>
</ul>
<h3 id="测试Filter拦截路径"><a href="#测试Filter拦截路径" class="headerlink" title="测试Filter拦截路径"></a>测试Filter拦截路径</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">//将拦截到的URI输出到日志，&#123;&#125;是占位符，将自动填充request.getRequestURI()的内容</span></span><br><span class="line">        log.info(<span class="string">&quot;拦截到的URI：&#123;&#125;&quot;</span>, request.getRequestURI());</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并在启动类上加入注解<code>@ServletComponentScan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReggieApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(ReggieApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务器，访问index页面，查看日志，现在可以拦截到URI了</p>
<blockquote>
<p>2023-03-29 18:05:53.190 …… : 拦截到的URI：&#x2F;backend&#x2F;index.html<br>2023-03-29 18:06:01.174 …… : 拦截到的URI：&#x2F;employee&#x2F;page</p>
</blockquote>
<h3 id="编写Filter逻辑"><a href="#编写Filter逻辑" class="headerlink" title="编写Filter逻辑"></a>编写Filter逻辑</h3><ol>
<li><p>获取本次请求的URI</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取本次请求的URI</span></span><br><span class="line"><span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"><span class="comment">//定义不需要被拦截的请求</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断本次请求是否需要处理<br>使用Spring概念模型 : <code>PathMatcher</code> 路径匹配器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String uri)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, uri);</span><br><span class="line">        <span class="keyword">if</span> (match)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果不需要处理，直接放行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断登录状态，如果已登录，则直接放行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开始存的session是employee，所以这里就拿它判断</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果未登录则返回未登录结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.getWriter().write(JSON.toJSONString(Result.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br></pre></td></tr></table></figure></li>
</ol>
<p>注意这里需要导一下fastjson的坐标</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.62</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>完整代码<br>完整步骤就是上面的五步，在这里我们再使用日志来输出一些东西，方便我们来调试代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(filterName = &quot;loginCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//路径匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强转</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取本次请求的URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>,requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义不需要处理的请求</span></span><br><span class="line">        String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">                <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断本次请求是否需要处理</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.如果不需要处理，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (check) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;本次请求：&#123;&#125;，不需要处理&quot;</span>,requestURI);</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;用户已登录，id为&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.如果未登录则返回未登录结果,通过输出流方式向客户端页面响应数据</span></span><br><span class="line">        log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;用户id&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">        response.getWriter().write(JSON.toJSONString(Result.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String[] urls, String requestURI)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line">            <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                <span class="comment">//匹配</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不匹配</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="测试登录"><a href="#测试登录" class="headerlink" title="测试登录"></a>测试登录</h3><p>直接访问 <a href="http://localhost/backend/index.html">http://localhost/backend/index.html</a> 时，日志输出如下</p>
<blockquote>
<dl><dt>: 用户未登录</dt><dd>用户id为：null<br></dd></dl></blockquote>
<p>随后将自动跳转至登录页面</p>
<blockquote>
<dl><dt>: 拦截到请求：&#x2F;employee&#x2F;login</dt><dd>本次请求：&#x2F;employee&#x2F;login，不需要处理<br></dd></dl></blockquote>
<p>成功登陆后</p>
<blockquote>
<dl><dt>: 拦截到请求：&#x2F;employee&#x2F;page</dt><dd>用户已登录，id为1    <br></dd></dl></blockquote>
<p>那么至此，登录功能就已经做好了</p>
<h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>登出功能的后端操作很简单，只要删除session就好</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 退出登录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">       <span class="comment">//清理session中保存的当前员工的id</span></span><br><span class="line">       request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>那这里来简单分析一下前端代码<br>登出的功能是在index页面的，右上角有一个按钮，点击就能登出</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right-menu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里动态的显示登录的用户名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;avatar-wrapper&quot;</span>&gt;</span>&#123;&#123; userInfo.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里就是登出的按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/icons/btn_close@2x.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;outLogin&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;退出&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的函数如下，这里的logoutApi是用来发送post请求的<br>logout</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">logoutApi</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;userInfo&#x27;</span>)</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/backend/page/login/login.html&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>logoutApi</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logoutApi</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/employee/logout&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a>添加员工</h1><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>实现功能之前，我们先梳理一下整个执行流程</p>
<ol>
<li>页面发送ajax请求，将新增员工页面中输入的数据以json的形式提交到服务端</li>
<li>服务端Controller接收页面提交的数据并调用Service将数据进行保存</li>
<li>Service调用Mapper操作数据库，保存数据</li>
</ol>
<p>前端确实不怎么懂，简单了解一下就好</p>
<p>HTML<br>数据模型绑定的是<code>ruleForm</code><br>保存并添加的按钮绑定的函数是<code>submitForm(&#39;ruleForm&#39;, true)</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ref</span>=<span class="string">&quot;ruleForm&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:model</span>=<span class="string">&quot;ruleForm&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:inline</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label-width</span>=<span class="string">&quot;180px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;账号:&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;员工姓名:&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.name&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入员工姓名&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxlength</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;手机号:&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.phone&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxlength</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;性别:&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.sex&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;身份证号:&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;idNumber&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.idNumber&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入身份证号&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxlength</span>=<span class="string">&quot;20&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;subBox address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span>  @<span class="attr">click</span>=<span class="string">&quot;goBack()&quot;</span>&gt;</span></span><br><span class="line">        取消</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;, false)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        保存</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-if</span>=<span class="string">&quot;actionType == &#x27;add&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;continue&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;, true)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        保存并继续添加</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>数据模型<br>默认性别为男</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ruleForm : &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phone&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;idNumber&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>submitForm函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">submitForm (formName, st) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">actionType</span> === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> params = &#123;</span><br><span class="line">            ...<span class="variable language_">this</span>.<span class="property">ruleForm</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> === <span class="string">&#x27;女&#x27;</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">addEmployee</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;员工添加成功！&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">                    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;phone&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="comment">// &#x27;password&#x27;: &#x27;&#x27;,</span></span><br><span class="line">                    <span class="comment">// &#x27;rePassword&#x27;: &#x27;&#x27;,/</span></span><br><span class="line">                    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;idNumber&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> params = &#123;</span><br><span class="line">            ...<span class="variable language_">this</span>.<span class="property">ruleForm</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> === <span class="string">&#x27;女&#x27;</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">editEmployee</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;员工信息修改成功！&#x27;</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>addEmployee<br>不难看出，添加员工是使用的post请求，而且没有参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增---添加员工</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEmployee</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>那么前端代码我们就简单了解了一下<br>我们主要做第二步和第三步<br>先测试一下是否能成功接收到员工信息，用日志输出看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Employee employee)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;新增的员工信息：&#123;&#125;&quot;</span>,employee.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务器，测试添加员工功能<br><img src="https://pic.imgdb.cn/item/6476d661f024cca173787656.jpg"></p>
<p>但此时的表单中只有部分数据，id，password，status，createTime等都还没有指定。<br>逐一分析这几项该如何设置</p>
<ul>
<li>id 这个就用自动生成的就好了（雪花算法&#x2F;自动递增）</li>
<li>password 当你注册某些教育网站的时候，一般都会给你默认指定- 一个密码（身份证后六位，123456等），所以我们这里的解决策- 略就直接指定一个123456了，但是这个密码不能直接在数据库中- 设为默认值，因为数据库设置的默认值无法加密</li>
<li>status 设定员工的状态，1表示启用，0表示禁用，这个就可以直- 接用默认值了，不需要加密，默认给个1即可</li>
<li>createTime 创建时间，这个就指定当前时间就好了</li>
<li>updateTime 作用同上</li>
<li>createUser 这个是创建人的ID，我们首先需要一个管理员账号- 登录到后台管理界面，然后才能添加员工信息，所以我们也需要对- 这个员工信息的创建人，进行设置，避免出现莫名的员工账号，依- 靠这个可以溯源</li>
<li>updateUser 作用同上</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加员工</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">( <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;新增员工，员工信息：&#123;&#125;&quot;</span>, employee.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置初始密码123456，使用 MD5加密</span></span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">    employeeService.save(employee);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>那么至此添加员工的功能就开发完毕了，启动服务器，测试一下添加员工，添加完毕后，如果没有问题，会显示添加员工成功，之后去数据库查看，数据库中也有对应的数据，且密码也经过了加密，createTime和createUser等数据也都有</p>
<blockquote>
<p>值得注意的一点是，username不能重复，因为在建表的时候设定了unique，只能存在唯一的username，如果存入相同的username则会报错<br>控制台报错<code>java.sql.SQLIntegrityConstraintViolationException: Duplicate entry &#39;Kyle&#39; for key &#39;employee.idx_username&#39;</code></p>
</blockquote>
<h2 id="完善全局异常处理器"><a href="#完善全局异常处理器" class="headerlink" title="完善全局异常处理器"></a>完善全局异常处理器</h2><p>在<code>com.blog.common</code>包下创建一个全局异常处理类<code>GlobalExceptionHandler</code>，并添加<code>exceptionHandler</code>方法用来捕获异常，并返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException exception)</span> &#123;</span><br><span class="line">        log.error(exception.getMessage());</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先用日志输出一下看看能不能正常运行，这也是代码开发的一个好习惯<br>启动服务器，新增员工测试，输入数据库中已存在的<code>username</code>，这次会报错<code>未知错误</code><br>控制台日志输出的错误信息为<code>Duplicate entry &#39;Kyle&#39; for key &#39;employee.idx_username&#39;</code><br>然后我们再来开发具体的异常处理逻辑<br>我们希望给出的错误信息为该用户名已存在，所以我们就需要对错误信息来进行判断，如果错误信息中包含<code>Duplicate entry</code>，则说明有条目是重复的，在本案例中，只可能是username重复了，所以我们在用<code>split()</code>方法来对错误信息切片，取出重复的<code>username</code>，采用字符串拼接的方式，告知该用户已经存在了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException exception)</span> &#123;</span><br><span class="line">        log.error(exception.getMessage());</span><br><span class="line">        <span class="comment">//如果包含Duplicate entry，则说明有条目重复</span></span><br><span class="line">        <span class="keyword">if</span> (exception.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//对字符串切片</span></span><br><span class="line">            String[] split = exception.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//字符串格式是固定的，所以这个位置必然是username</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> split[<span class="number">2</span>];</span><br><span class="line">            <span class="comment">//拼串作为错误信息返回</span></span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;用户名&quot;</span> + username + <span class="string">&quot;已存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来重启服务器，测试添加功能，输入已经存在的username，输出的错误信息符合预期</p>
<p><img src="https://pic.imgdb.cn/item/6476d855f024cca1737aef76.jpg"></p>
<h1 id="员工信息分页查询"><a href="#员工信息分页查询" class="headerlink" title="员工信息分页查询"></a>员工信息分页查询</h1><p>在开发代码之前，需要梳理一下整个程序的执行过程:</p>
<ol>
<li>页面发送ajax请求，将分页查询参数(page、pageSize、name)提交到服务</li>
<li>服务端Controller接收页面提交的数据并调用Service查询数据</li>
<li>Service调用Mapper操作数据库，查询分页数据</li>
<li>Controller将查询到的分页数据响应给页面</li>
<li>页面接收到分页数据并通过ElementUI的Table组件展示到页面上</li>
</ol>
<p>但是我们现在可以用MyBatisPlus来简化分页查询的代码实现，对应的官方文档链接：<a href="https://baomidou.com/pages/97710a/#paginationinnerinterceptor">https://baomidou.com/pages/97710a/#paginationinnerinterceptor</a><br>关于插件的使用的官方文档链接：<a href="https://baomidou.com/pages/2976a3/#spring-boot">https://baomidou.com/pages/2976a3/#spring-boot</a> ，暂时只需要看在SpringBoot中是如何配置的，剩下的可以等遇到需求的时候再来看</p>
<h2 id="配置MyBatisPlus分页插件"><a href="#配置MyBatisPlus分页插件" class="headerlink" title="配置MyBatisPlus分页插件"></a>配置MyBatisPlus分页插件</h2><p>新建<code>com.blog.config</code>包，并在其中新建<code>MybatisPlusConfig</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置mybatis plus 分页插件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>   <span class="comment">//交由spring管理</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">mybatisPlusInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端代码分析"><a href="#前端代码分析" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><p>我们先来访问页面，打开开发者工具，点击员工管理，监测一下Network请求，会看到这么个东西</p>
<blockquote>
<p>请求网址: <a href="http://localhost/employee/page?page=1&pageSize=10">http://localhost/employee/page?page=1&amp;pageSize=10</a><br>请求方法: GET</p>
</blockquote>
<p>使用GET发送的请求，请求参数在URL中<br><img src="https://pic.imgdb.cn/item/6476da1df024cca1737cde91.jpg"></p>
<p>在搜索框中输入123，进行查询，发现name也出现在URL中了</p>
<blockquote>
<p>请求网址: <a href="http://localhost/employee/page?page=1&pageSize=10&name=123">http://localhost/employee/page?page=1&amp;pageSize=10&amp;name=123</a><br>请求方法: GET</p>
</blockquote>
<p>具体看一下前端的代码</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">getMemberList()</button></li><li class="tab"><button type="button" data-href="#tab1-2">getMemberList</button></li><li class="tab"><button type="button" data-href="#tab1-3">Request拦截器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>关于数据显示的功能，就是由这部分代码完成的<br>这个第9行和第10行的tableData和counts我们貌似没有提供，但是在之前的JavaWeb项目中，我们是自己写了一个PageBean来封装数据，但现在我们可以用MP给我们提供好的Page类来简化开发</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> init () &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">        <span class="attr">page</span>: <span class="variable language_">this</span>.<span class="property">page</span>,</span><br><span class="line">        <span class="attr">pageSize</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">input</span> ? <span class="variable language_">this</span>.<span class="property">input</span> : <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getMemberList</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">records</span> || []</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">counts</span> = res.<span class="property">data</span>.<span class="property">total</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>发送的是GET请求，请求路径为&#x2F;employee&#x2F;page</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMemberList</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee/page&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 是否需要设置 token</span></span><br><span class="line"><span class="comment">// const isToken = (config.headers || &#123;&#125;).isToken === false</span></span><br><span class="line"><span class="comment">// if (getToken() &amp;&amp; !isToken) &#123;</span></span><br><span class="line"><span class="comment">//   config.headers[&#x27;Authorization&#x27;] = &#x27;Bearer &#x27; + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// get请求映射params参数</span></span><br><span class="line"><span class="keyword">if</span> (config.<span class="property">method</span> === <span class="string">&#x27;get&#x27;</span> &amp;&amp; config.<span class="property">params</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = config.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> propName <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(config.<span class="property">params</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = config.<span class="property">params</span>[propName];</span><br><span class="line">    <span class="keyword">var</span> part = <span class="built_in">encodeURIComponent</span>(propName) + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (value !== <span class="literal">null</span> &amp;&amp; <span class="title function_">typeof</span>(value) !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(value)) &#123;</span><br><span class="line">            <span class="keyword">let</span> params = propName + <span class="string">&#x27;[&#x27;</span> + key + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">            <span class="keyword">var</span> subPart = <span class="built_in">encodeURIComponent</span>(params) + <span class="string">&quot;=&quot;</span>;</span><br><span class="line">            url += subPart + <span class="built_in">encodeURIComponent</span>(value[key]) + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url += part + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    url = url.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    config.<span class="property">params</span> = &#123;&#125;;</span><br><span class="line">    config.<span class="property">url</span> = url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>










<h2 id="具体业务逻辑"><a href="#具体业务逻辑" class="headerlink" title="具体业务逻辑"></a>具体业务逻辑</h2><p>先来用log输出一下，看看能不能正常接收到数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;page=&#123;&#125;,pageSize=&#123;&#125;,name=&#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新启动服务器，在搜索框输入字符并搜索，查看log输出<br>一切正常，继续完善业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 提交分页查询</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;page = &#123;&#125;,pageSize = &#123;&#125;,name = &#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 构造分页构造器</span></span><br><span class="line">       <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  构造条件构造器</span></span><br><span class="line">       LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//添加过滤条件</span></span><br><span class="line">       queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line">       <span class="comment">//添加排序条件</span></span><br><span class="line">       queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  执行查询</span></span><br><span class="line">       employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>重新启动服务器，测试员工信息分页查询功能，得到如下页面，当我们在搜索框输入<code>孙</code>来进行查询，只会查询到<code>孙七</code>这一条数据</p>
<p><img src="https://pic.imgdb.cn/item/6476db83f024cca1737e8f9a.jpg"></p>
<h1 id="启用禁用员工账号"><a href="#启用禁用员工账号" class="headerlink" title="启用禁用员工账号"></a>启用禁用员工账号</h1><ol>
<li>在员工管理列表页面，可以对某个员工账号进行启用或者禁用操作。账号禁用的员工不能登录系统，启用后的员工可以正常登录。</li>
<li>需要注意，只有管理员（admin用户）可以对其他普通用户进行启用、禁用操作，所以普通用户登录系统后启用、禁用按钮不显示。</li>
<li>管理员admin登录系统可以对所有员工账号进行启用、禁用操作。</li>
<li>如果某个员工账号状态为正常，则按钮显示为“禁用”，如果员工账号状态为已禁用，则按钮显示为“启用”</li>
</ol>
<h2 id="动态按钮显示分析"><a href="#动态按钮显示分析" class="headerlink" title="动态按钮显示分析"></a>动态按钮显示分析</h2><ul>
<li><p>当加载完页面的时候，获取一下当前登录账号的用户名，也就是username</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;userInfo&#x27;</span>)).<span class="property">username</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>随后判断一下这个用户名是不是admin，如果是的话就显示启用&#x2F;禁用，否则不显示<br>那么我们现在就来button里设置一下，使用v-if来判断</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;delBut non&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;statusHandle(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;user === &#x27;admin&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    &#123;&#123; scope.row.status == &#x27;1&#x27; ? &#x27;禁用&#x27; : &#x27;启用&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="AJAX发送请求"><a href="#AJAX发送请求" class="headerlink" title="AJAX发送请求"></a>AJAX发送请求</h2><ol>
<li>页面发送ajax请求，将参数(id、status)提交到服务端</li>
<li>服务端Controller接收页面提交的数据并调用Service更新数据</li>
<li>Service调用Mapper操作数据库</li>
</ol>
<ul>
<li><p>前端代码分析</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">button</button></li><li class="tab"><button type="button" data-href="#tab1-2">statusHandle</button></li><li class="tab"><button type="button" data-href="#tab1-3">enableOrDisableEmployee</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>从禁用&#x2F;启用的按钮中，可以看到是绑定了一个名为<code>statusHandle(scope.row)</code>函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;delBut non&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;statusHandle(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;user === &#x27;admin&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    &#123;&#123; scope.row.status == &#x27;1&#x27; ? &#x27;禁用&#x27; : &#x27;启用&#x27; &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>从代码中我们可以看到，此方法先获取了当前行的id值与status<br>随后弹出提示窗口，点击确定之后，会使用<code>enableOrDisableEmployee</code>调用PUT请求<br>对当前状态进行取反操作<br><code>&#39;status&#39;</code>: <code>!this.status ? 1 : 0</code><br>如果<code>this.status</code>为1，则<code>status</code>为0<br>如果<code>this.status</code>为0，则<code>status</code>为1<br>这样我们就能切换禁用&#x2F;启用状态了<br>最后根据返回的状态码来确定是否更改成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//状态修改</span></span><br><span class="line">statusHandle (row) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = row.<span class="property">id</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = row.<span class="property">status</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;确认调整该账号的状态?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;confirmButtonText&#x27;</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cancelButtonText&#x27;</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">enableOrDisableEmployee</span>(&#123; <span class="string">&#x27;id&#x27;</span>: <span class="variable language_">this</span>.<span class="property">id</span>, <span class="string">&#x27;status&#x27;</span>: !<span class="variable language_">this</span>.<span class="property">status</span> ? <span class="number">1</span> : <span class="number">0</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;enableOrDisableEmployee&#x27;</span>,res)</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;账号状态更改成功！&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>可以看出这个修改状态的接口是使用的PUT请求，路径为<code>/employee</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改---启用禁用接口</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">enableOrDisableEmployee</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>





</li>
<li><p>后端代码分析<br>启用、禁用员工账号，本质上就是一个更新操作，也就是对status状态字段进行操作在Controller中创建update方法，此方法是一个通用的修改员工信息的方法<br>只不过现在我们的update只需要修改status，而后面我们还有修改员工其他信息的业务，根据传进来的employee</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动一下服务器，看看是否能接收到employee对象数据</p>
</li>
<li><p>id和status均有值，符合我们的预期，那我们继续往下进行<br>完善update方法的代码逻辑</p>
</li>
<li><p>状态修改我们已经在前面完成了，这里来编写一下更新时间和更新用户</p>
</li>
<li><p>依旧是通过我们之前存的session来获取当前user的id</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改员工</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        log.info(employee.toString());</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        更新修改人</span></span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line"><span class="comment">//        更新修改时间</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>但是查看数据库，发现<code>status</code>并没有被修改<br>通过查看日志，发现更新操作并没有完成</p>
<ul>
<li>问题的原因：<ul>
<li>JS对Long型数据进行处理时丢失精度，导致提交的id和数据库中的id不一致。</li>
</ul>
</li>
<li>如何解决这个问题?<ul>
<li>我们可以在服务端给页面响应json数据时进行处理，将Long型数据统一转为String字符串</li>
</ul>
</li>
</ul>
<h2 id="配置状态转换器"><a href="#配置状态转换器" class="headerlink" title="配置状态转换器"></a>配置状态转换器</h2><p>配置对象映射器JacksonObjectMapper，继承ObjectMapper<br>直接Copy这份代码也行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yin.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>扩展Mvc框架的消息转换器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转化器，底层使用jackson将java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的消息转换器对象追加到mvc框架的转换器集合当中(index设置为0，表示设置在第一个位置，避免被其它转换器接收，从而达不到想要的功能)</span></span><br><span class="line">        converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h2><p>启动服务器，尝试禁用按钮<br>数据库中的status字段数据发生了改变，且页面上也显示已禁用，再次点击启用，也能正常操作</p>
<p><img src="https://pic.imgdb.cn/item/6476de78f024cca173834d79.jpg"></p>
<h1 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h1><h2 id="流程分析-1"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h2><p>在开发代码之前，先来梳理一下整个操作流程与对应程序的执行顺序</p>
<ol>
<li>点击编辑按钮时，页面将跳转到add.html，并在url中携带参数员工id</li>
<li>在add.html页面中获取url中的参数员工id</li>
<li>发送ajax请求，请求服务端，同时提交员工id参数</li>
<li>服务端接受请求，并根据员工id查询员工信息，并将员工信息以json形式响应给页面</li>
<li>页面接收服务端响应的json数据，并通过Vue的双向绑定进行员工信息回显</li>
<li>点击保存按钮，发送ajax请求，将页面中的员工信息以json形式提交给服务端</li>
<li>服务端接受员工信息，并进行处理，完成后给页面响应</li>
<li>页面接收到服务端响应信息后进行相应处理</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/6476dee2f024cca173841baa.jpg"></p>
<h2 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h2><ol>
<li>点击编辑按钮时，页面将跳转到add.html，并在url中携带参数员工id<br>编辑按钮绑定的点击事件为addMemberHandle(scope.row.id)</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;blueBug&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;addMemberHandle(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123;notAdmin:user !== &#x27;admin&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    编辑</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在add.html页面中获取url中的参数员工id<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addMemberHandle (st) &#123;</span><br><span class="line">    <span class="keyword">if</span> (st === <span class="string">&#x27;add&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/backend/page/member/add.html&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;添加员工&#x27;</span></span><br><span class="line">        &#125;,<span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/backend/page/member/add.html?id=&#x27;</span>+st,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;修改员工&#x27;</span></span><br><span class="line">        &#125;,<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>发送ajax请求，请求服务端，同时提交员工id参数</li>
</ol>
<p><code>add.html</code>加载完毕之后，调用钩子函数，主要看其中<code>requestUrlParam</code>函数</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">钩子函数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title function_">requestUrlParam</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">actionType</span> = <span class="variable language_">this</span>.<span class="property">id</span> ? <span class="string">&#x27;edit&#x27;</span> : <span class="string">&#x27;add&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ol start="4">
<li><p>服务端接受请求，并根据员工id查询员工信息，并将员工信息以json形式响应给页面</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tab1-1">getById</button></li><li class="tab active"><button type="button" data-href="#tab1-2">实现</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询员工信息..&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询员工信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123; <span class="comment">//路径注解</span></span><br><span class="line">        log.info(<span class="string">&quot;根据id查询员工信息&quot;</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未查到该员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


</li>
<li><p>页面接收服务端响应的<code>json</code>数据，并通过Vue的<code>双向绑定</code>进行员工信息回显<br>在<code>created</code>钩子函数中还调用了<code>init</code>函数<br>该函数接收到服务端响应的<code>json</code>数据之后，先判断一下状态码，如果是1，则说明是操作成功<br>随后将获取到的数据赋给表单，从而达到回显数据的效果</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> init () &#123;</span><br><span class="line">    <span class="title function_">queryEmployeeById</span>(<span class="variable language_">this</span>.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ruleForm</span> = res.<span class="property">data</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> = res.<span class="property">data</span>.<span class="property">sex</span> === <span class="string">&#x27;0&#x27;</span> ? <span class="string">&#x27;女&#x27;</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">        <span class="comment">// this.ruleForm.password = &#x27;&#x27;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>点击保存按钮，发送ajax请求，将页面中的员工信息以json形式提交给服务端</li>
</ol>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">保存按钮</button></li><li class="tab"><button type="button" data-href="#tab1-2">submitForm</button></li><li class="tab"><button type="button" data-href="#tab1-3">editEmployee</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;submitForm(&#x27;ruleForm&#x27;, false)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    保存</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>从代码中我们不难看出，添加和修改的保存按钮，都是用的同一个表单提交事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">submitForm (formName, st) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">actionType</span> === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> params = &#123;</span><br><span class="line">            ...<span class="variable language_">this</span>.<span class="property">ruleForm</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> === <span class="string">&#x27;女&#x27;</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">addEmployee</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;员工添加成功！&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">                    <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;phone&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="comment">// &#x27;password&#x27;: &#x27;&#x27;,</span></span><br><span class="line">                    <span class="comment">// &#x27;rePassword&#x27;: &#x27;&#x27;,/</span></span><br><span class="line">                    <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;idNumber&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> params = &#123;</span><br><span class="line">            ...<span class="variable language_">this</span>.<span class="property">ruleForm</span>,</span><br><span class="line">            <span class="attr">sex</span>: <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">sex</span> === <span class="string">&#x27;女&#x27;</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">editEmployee</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;员工信息修改成功！&#x27;</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error submit!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>其中修改员工信息使用的PUT请求，将数据以<code>json</code>形式提交给服务端</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改---添加员工</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">editEmployee</span> (params) &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/employee&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ol start="7">
<li>服务端接受员工信息，并进行处理，完成后给页面响应<br>由于修改员工信息也是发送的PUT请求，与之前启用&#x2F;禁用员工账号是一致的，而且前面我们已经写过了PUT请求的Controller层<br>所以当我们点击保存按钮时，调用<code>submitForm</code>函数，而在submitForm函数中我们又调用了<code>editEmployee</code>函数，发送<code>PUT</code>请求，实现修改功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改员工</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        log.info(employee.toString());</span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        更新修改人</span></span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line"><span class="comment">//        更新修改时间</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>页面接收到服务端响应信息后进行相应处理<br>员工信息修改成功之后，调用了<code>goBack</code>函数，跳转至员工管理页面<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">goBack</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/backend/page/member/list.html&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;员工管理&#x27;</span></span><br><span class="line">    &#125;,<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
编辑员工信息的功能就完成了</li>
</ol>
<h1 id="公共字段自动填充"><a href="#公共字段自动填充" class="headerlink" title="公共字段自动填充"></a>公共字段自动填充</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ul>
<li>前面已经完成了对员工数据的添加与修改，在添加&#x2F;修改员工数据的时候，都需要指定一下创建人、创建时间、修改人、修改时间等字段，而这些字段又属于公共字段，不仅员工表有这些字段，在菜品表、分类表等其他表中，也拥有这些字段。</li>
<li>有没有办法让这些字段在一个地方统一管理呢？这样可以简化开发<ul>
<li>答案就是使用MybatisPlus给我们提供的公共字段自动填充功能</li>
</ul>
</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>实现步骤</li>
</ul>
<ol>
<li><p>在实体类的属性上方加入@TableFiled注解，指定自动填充的策略</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">修改Employee实体类</button></li><li class="tab"><button type="button" data-href="#tab1-2">FieldFill</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yin.reggie.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>这是个枚举类<br><code>DEFAULT</code>为默认值，表示不填充<br><code>INSERT</code>表示插入时填充<br><code>UPDATE</code>表示修改时填充<br><code>INSERT_UPDATE</code>表示插入和修改时填充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">FieldFill</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认不处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入和更新时填充字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>按照框架要求编写元数据对象处理器，在此类中统一对公共字段赋值，此类需要实现<code>MetaObjectHandler</code>接口<br>实现接口之后，重写两个方法，一个是插入时填充，一个是修改时填充<br>关于字段填充方式，使用metaObject的<code>setValue</code>来实现<br>关于id的获取，我们之前是存到session里的，但在<code>MyMetaObjectHandler</code>类中不能获得HttpSession对象，所以我们需要用其他方式来获取登录用户Id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义元数据对象处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入操作，自动填充</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段自动填充[insert]&quot;</span>);</span><br><span class="line">        log.info(metaObject.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, id);</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, id);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="功能完善"><a href="#功能完善" class="headerlink" title="功能完善"></a>功能完善</h2><ul>
<li>现在存在一个问题，如何获取当前登录用户的id值<ul>
<li>我们可以使用ThreadLocal来解决这个问题</li>
</ul>
</li>
<li>在学习<code>ThreadLocal</code>之前，我们需要先确认一个事情，就是客户端发送的每次http请求，对应的在服务端都会分配一个新的线程来处理，在处理过程中涉及到下面类中的方法都属于相同的一个线程:</li>
</ul>
<ol>
<li><code>LocalCheekFilter</code>中的<code>doFilter</code>方法</li>
<li><code>EmployeeController</code>中的<code>update</code>方法</li>
<li><code>MyMetaObjectHandler</code>中的<code>updateFill</code>方法</li>
</ol>
<p>现在我们在这三个方法中添加日志输出测试</p>
<p><code>doFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//强转</span></span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取本次请求的URI</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">    log.info(<span class="string">&quot;拦截到请求：&#123;&#125;&quot;</span>, requestURI);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义不需要处理的请求</span></span><br><span class="line">    String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/front/**&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.判断本次请求是否需要处理</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> check(urls, requestURI);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.如果不需要处理，则直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (check) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;本次请求：&#123;&#125;，不需要处理&quot;</span>, requestURI);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.判断登录状态，如果已登录，则直接放行</span></span><br><span class="line">    <span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户已登录，id为&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">        <span class="comment">//在这里获取一下线程id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        log.info(<span class="string">&quot;doFilter的线程id为：&#123;&#125;&quot;</span>, id);</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.如果未登录则返回未登录结果,通过输出流方式向客户端页面响应数据</span></span><br><span class="line">    log.info(<span class="string">&quot;用户未登录&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;用户id&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">    response.getWriter().write(JSON.toJSONString(Result.error(<span class="string">&quot;NOTLOGIN&quot;</span>)));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>update</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Employee employee, HttpServletRequest request)</span> &#123;</span><br><span class="line">    log.info(employee.toString());</span><br><span class="line">    <span class="comment">//获取线程id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    log.info(<span class="string">&quot;update的线程id为：&#123;&#125;&quot;</span>, id);</span><br><span class="line">    employeeService.updateById(employee);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>updateFill</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;公共字段自动填充(update)...&quot;</span>);</span><br><span class="line">    log.info(metaObject.toString());</span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    log.info(<span class="string">&quot;updateFill的线程id为：&#123;&#125;&quot;</span>, id);</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">    metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>重新启动服务器，登录页面并编辑员工信息（什么都不需要动），随后点击保存，随后查看日志输出信息<br>发现这三者确实是在同一个线程中</p>
<p>那么什么是ThreadLocal?</p>
<ul>
<li>ThreadLocal并不是一个Thread，而是Thread的局部变量</li>
<li>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本</li>
<li>所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本</li>
<li>ThreadLocal为每个线程提供单独一份存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，线程外则不能访问。</li>
</ul>
<p>ThreadLocal常用方法:</p>
<ul>
<li><code>public void set(T value)</code> 设置当前线程的线程局部变量的值</li>
<li><code>public T get()</code> 返回当前线程所对应的线程局部变量的值</li>
</ul>
<p>那么我们如何用ThreadLocal来解决我们上述的问题呢？</p>
<p>我们可以在<code>LoginCheckFilter</code>的<code>doFilter</code>方法中获取当前登录用户id，并调用T<code>hreadLocal</code>的<code>set</code>方法来设置当前线程的线程局部变量的值（用户id)，然后在<code>MyMetaObjectHandler</code>的<code>updateFill</code>方法中调用<code>ThreadLocal</code>的<code>get</code>方法来获得当前线程所对应的线程局部变量的值（用户id)。</p>
<p>具体实现</p>
<ul>
<li><p>在com.yin.common包下新建BaseContext类</p>
</li>
<li><p>作用：基于ThreadLocal的封装工具类，用于保护和获取当前用户id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Long&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setCurrentId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        threadLocal.set(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>随后在LoginCheckFilter类中添加代码<br>使用<code>request.getSession</code>来获取当前登录用户的id值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.判断登录状态，如果已登录，则直接放行</span></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，id为&#123;&#125;&quot;</span>, request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>));</span><br><span class="line">    <span class="comment">//在这里获取一下线程id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    log.info(<span class="string">&quot;doFilter的线程id为：&#123;&#125;&quot;</span>, id);</span><br><span class="line">    <span class="comment">//根据session来获取之前存的id值</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="comment">//使用BaseContext封装id</span></span><br><span class="line">    BaseContext.setCurrentId(empId);</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在MyMetaObjectHandler类中，添加设置id的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段填充（create）...&quot;</span>);</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="comment">//设置创建人id</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;createUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;公共字段填充（insert）...&quot;</span>);</span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="comment">//设置更新人id</span></span><br><span class="line">        metaObject.setValue(<span class="string">&quot;updateUser&quot;</span>, BaseContext.getCurrentId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>重新启动服务器，并登录一个非管理员账户，然后进行添加用户操作，观察数据库中的<code>updateUser</code>是否符合预期<br>例如我这里登录的账号是<code>zhangsan</code>，添加了lisi，lisi的create_user的id是<code>zhangsan</code>的</p>
</li>
</ul>
<p>公共字段填充功能就完成了</p>
<h1 id="新增菜品分类"><a href="#新增菜品分类" class="headerlink" title="新增菜品分类"></a>新增菜品分类</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>后台系统中可以管理分类信息，分类包括两种类型，分别是菜品分类和套餐分类</li>
<li>当我们在后台系统中添加菜品时，需要选择一个菜品分类</li>
<li>当我们在后台系统中天啊及一个套餐时，需要选择一个套餐分类</li>
<li>在移动端也会按照菜品分类和套餐分类来战士对应的菜品和套餐<br>可以在后台系统的分类管理页面分别添加菜品分类和套餐分类，如下</li>
</ul>
<p>分类管理页面<br><img src="https://pic.imgdb.cn/item/6476ff18f024cca173bb7742.jpg"></p>
<p>新增菜品分类表单<br><img src="https://pic.imgdb.cn/item/6476ff3df024cca173bbb359.jpg"></p>
<p>新增套餐分类表单<br><img src="https://pic.imgdb.cn/item/6476ff56f024cca173bbdcda.jpg"></p>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><table>
<thead>
<tr>
<th align="center">Field</th>
<th align="center">Type</th>
<th align="center">Collation</th>
<th align="center">Null</th>
<th align="center">Key</th>
<th align="center">Default</th>
<th align="center">Comment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">bigint</td>
<td align="center">NULL</td>
<td align="center">NO</td>
<td align="center">PRI</td>
<td align="center">NULL</td>
<td align="center">主键</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">int</td>
<td align="center">NULL</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">类型 1菜品分类 2套餐分类</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">varchar(64)</td>
<td align="center">utf8_bin</td>
<td align="center">NO</td>
<td align="center">UNI</td>
<td align="center">NULL</td>
<td align="center">分类名称</td>
</tr>
<tr>
<td align="center">sort</td>
<td align="center">int</td>
<td align="center">NULL</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">0</td>
<td align="center">顺序</td>
</tr>
<tr>
<td align="center">create_time</td>
<td align="center">datetime</td>
<td align="center">NULL</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">NULL</td>
<td align="center">创建时间</td>
</tr>
<tr>
<td align="center">update_time</td>
<td align="center">datetime</td>
<td align="center">NULL</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">NULL</td>
<td align="center">更新时间</td>
</tr>
<tr>
<td align="center">create_user</td>
<td align="center">bigint</td>
<td align="center">NULL</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">NULL</td>
<td align="center">创建人</td>
</tr>
<tr>
<td align="center">update_user</td>
<td align="center">bigint</td>
<td align="center">NULL</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">NULL</td>
<td align="center">修改人</td>
</tr>
</tbody></table>
<p>id是主键，name分类名称是unique唯一的，type为1表示菜品分类，type为2表示套餐分类</p>
<h2 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开发业务之前，先将需要用到的类和接口的基本结构先创建好</p>
<ol>
<li><p>实体类Category，对应上表来创建<br>菜品分类也有<code>createUser</code>和<code>createTime</code>等字段，用上面的公共字段自动填充</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Category</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类型    1：菜品分类  2：菜品套餐</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Mapper接口CategoryMapper<br>跟之前的EmployeeMapper没有本质上的区别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Mapper接口CategoryMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务层实现类CatrgoryServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CategoryMapper, Category&gt; <span class="keyword">implements</span> <span class="title class_">CategoryService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层CategoryController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CategoryController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CategoryService categoryService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="流程分析-2"><a href="#流程分析-2" class="headerlink" title="流程分析"></a>流程分析</h2><p>在编写代码之前，先来分析一下整个流程</p>
<ol>
<li>页面发送ajax请求，将新增分类窗口输入的数据以json形式提交给服务端</li>
<li>服务端Controller接收页面提交的数据并调用Service将数据存储到数据库</li>
<li>Service调用Mapper操作数据库，保存数据</li>
</ol>
<p>先尝试监测一下前端提供的是什么请求，以及会提交什么数据，打开开发者工具，监测<code>NetWork</code>，点击新增菜品分类表单的确定按钮</p>
<ul>
<li><p>请求方式</p>
<blockquote>
<p>请求网址: <a href="http://localhost/category">http://localhost/category</a><br>请求方法: POST</p>
</blockquote>
</li>
<li><p>json数据</p>
<blockquote>
<p>{name: “川菜”, type: “1”, sort: “10”}</p>
</blockquote>
</li>
</ul>
<p>点击<code>新增套餐</code>分类表单的确定按钮</p>
<ul>
<li><p>请求方式</p>
<blockquote>
<p>请求网址: <a href="http://localhost/category">http://localhost/category</a><br>请求方法: POST</p>
</blockquote>
</li>
<li><p>json数据</p>
<blockquote>
<p>{name: “豪华晚宴”, type: “2”, sort: “10”}</p>
</blockquote>
</li>
</ul>
<p>新增菜品分类和新增套餐分类请求的<code>服务端地址</code>和提交的<code>json</code>数据结构<code>相同</code>，所以服务端只需要提供一个方法统一处理即可</p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>服务端只需要将接收到的json数据添加到数据库中，并响应一个成功的提示信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;category:&#123;&#125;&quot;</span>, category);</span><br><span class="line">        categoryService.save(category);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增分类成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="分类信息分页查询"><a href="#分类信息分页查询" class="headerlink" title="分类信息分页查询"></a>分类信息分页查询</h1><p>与之前的员工信息分页查询类似</p>
<h2 id="流程分析-3"><a href="#流程分析-3" class="headerlink" title="流程分析"></a>流程分析</h2><p>按照惯例，我们还是先来分析一下流程</p>
<ol>
<li>页面发送Ajax请求，将分页查询的参数（page、pageSize）提交到服务端</li>
<li>服务端Controller接受到页面提交的数据之后，调用Service进行查询</li>
<li>Service调用Mapper操作数据库，查询分页数据</li>
<li>Controller将查询到的分页数据响应给页面</li>
<li>页面接收分页数据，并通过ElementUI的Table组件展示到页面上</li>
</ol>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><p>在CategorYController类中编写page方法</p>
<p>在service中编写page方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Page <span class="title function_">pageWithCategory</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//构造分页构造器</span></span><br><span class="line">       <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//构造条件构造器</span></span><br><span class="line">       LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//添加排序条件</span></span><br><span class="line">       queryWrapper.orderByDesc(Category::getSort);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> categoryService.page(pageInfo, queryWrapper);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>重新启动服务器，查看一下效果<br><img src="https://pic.imgdb.cn/item/64770764f024cca173c78a15.jpg"></p>
<h2 id="前端代码分析-1"><a href="#前端代码分析-1" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><p>跟之前大差不差，来分析一遍</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">created</button></li><li class="tab"><button type="button" data-href="#tab1-2">init函数</button></li><li class="tab"><button type="button" data-href="#tab1-3">getCategoryPage</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>页面加载完毕之后调用created钩子函数<br>钩子函数内又调用的是init进行初始化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> init () &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getCategoryPage</span>(&#123;<span class="string">&#x27;page&#x27;</span>: <span class="variable language_">this</span>.<span class="property">page</span>, <span class="string">&#x27;pageSize&#x27;</span>: <span class="variable language_">this</span>.<span class="property">pageSize</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">String</span>(res.<span class="property">code</span>) === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">//将服务端查询到的数据赋给tableData，然后就能看到了</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">records</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">counts</span> = <span class="title class_">Number</span>(res.<span class="property">data</span>.<span class="property">total</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>发送的请求是<code>get</code>请求，请求参数值为<code>this.page</code>和<code>this.pageSize</code>，默认值分别为1和10</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询列表接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCategoryPage</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category/page&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h1 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h1><h2 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>在分类管理列表页面，可以对某个分类进行删除操作</li>
<li>需要注意的是：当分类关联了菜品或者套餐时，此分类将不允许被删除</li>
</ul>
<h2 id="流程分析-4"><a href="#流程分析-4" class="headerlink" title="流程分析"></a>流程分析</h2><ol>
<li>页面发送ajax请求，将参数(id)提交给服务端</li>
<li>服务端Controller接收页面提交的数据，并调用Service删除数据</li>
<li>Service调用Mapper操作数据库</li>
</ol>
<h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><p>在CategoryController类上添加delete方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除分类</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@DeleteMapping</span></span><br><span class="line">  <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      log.info(<span class="string">&quot;id:&#123;&#125;&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">      categoryService.remove(id);</span><br><span class="line">      <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="前端代码分析-2"><a href="#前端代码分析-2" class="headerlink" title="前端代码分析"></a>前端代码分析</h2><div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">删除按钮前端代码</button></li><li class="tab"><button type="button" data-href="#tab1-2">deleteHandle函数</button></li><li class="tab"><button type="button" data-href="#tab1-3">deleCategory函数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>删除按钮绑定了<code>deleteHandle</code>函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;delBut non&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;deleteHandle(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    删除</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>先给一个提示信息防止误操作<br>然后使用<code>deleCategory</code>函数发送delete请求<br>若服务端返回的状态为success，则状态码为1，删除成功<br>否则删除失败</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">deleteHandle</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除该文件, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;confirmButtonText&#x27;</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;cancelButtonText&#x27;</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">deleCategory</span>(id).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;删除成功！&#x27;</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>黑马给的前端资料中这里其实是<code>ids</code>，我们需要将它改为<code>id</code>，或者将后端接收参数名字改为与前端相同，然后清除浏览器缓存在进一步测试功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除当前列的接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">deleCategory</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;id&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>现在我们重启服务器，删除一条分类信息试试</p>
<p><img src="https://pic.imgdb.cn/item/64770985f024cca173cba3be.jpg"></p>
<h2 id="功能完善-1"><a href="#功能完善-1" class="headerlink" title="功能完善"></a>功能完善</h2><p>当菜品分类或套餐分类关联了其他菜品或套餐时，该分类将不允许被删除</p>
<ul>
<li>其实也很简单，我们只需要在删除的时候，拿着当前分类的id值，去对应的菜品&#x2F;套餐表中进行查询，如果能查询到数据，则说明该分类关联了菜品，不允许被删除，否则则可以删除</li>
</ul>
<p>当菜品分类或套餐分类关联了其他菜品或套餐时，该分类将不允许被删除</p>
<p>那么我们如何实现这个功能呢？</p>
<ul>
<li><p>其实也很简单，在删除的时候，拿当前分类的id值，去对应的菜品&#x2F;套餐表中进行查询，如果能查询到数据，则说明该分类关联了菜品，不允许被删除，否则则可以删除</p>
<br>
</li>
<li><p>首先我们需要根据数据表创建菜品和套餐对应的模型类</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Dish</button></li><li class="tab"><button type="button" data-href="#tab1-2">Setmeal</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="comment">//菜品 id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品状态  0：停售    1：在售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人id</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人id</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDeleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品 id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品分类id</span></span><br><span class="line">    <span class="keyword">private</span> Long categoryId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品价格</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//商品码</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品状态  0：停售    1：在售</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人id</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人id</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


<ul>
<li><p>随后编写对应的Mapper接口</p>
<div class="tabs" id="dishmapper"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#dishmapper-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#dishmapper-2">SetmealMapper</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="dishmapper-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="dishmapper-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>编写对应的Service接口及Impl实现类</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">DishService</button></li><li class="tab"><button type="button" data-href="#tab1-2">SetmealService</button></li><li class="tab"><button type="button" data-href="#tab1-3">DishServiceImpl</button></li><li class="tab"><button type="button" data-href="#tab1-4">SetmealServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Setmeal&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealMapper, Setmeal&gt; <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishMapper, Dish&gt; <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>在common包下新增<code>CustomException</code>类<br>该类用于封装我们的自定义异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在我们的全局异常处理器类中，使用<code>exceptionHandler</code>处理<code>CustomerException</code>异常</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(CustomException.class)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">exceptionHandler</span><span class="params">(CustomException exception)</span> &#123;</span><br><span class="line">    log.error(exception.getMessage());</span><br><span class="line">    <span class="keyword">return</span> Result.error(exception.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在CategoryService接口中自己写一个<code>remove</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CategoryService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Category&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>在CategoryServiceImpl中来写具体业务逻辑<br>我们需要在删除数据之前，根据<code>id</code>值，去<code>Dish</code>表和<code>Setmeal</code>表中查询是否关联了数据<br>如果存在关联数据，则不能删除，并抛一个异常<br>如果不存在关联数据（也就是查询到的数据条数为0），正常删除即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id删除分类，删除之前需要判断</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;Dish&gt; dishLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//根据分类id进行查询</span></span><br><span class="line">       dishLambdaQueryWrapper.eq(Dish::getCategoryId, id);</span><br><span class="line">       <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> dishService.count(dishLambdaQueryWrapper);</span><br><span class="line">       <span class="comment">//查询当前分类是否关联了菜品，如果已关联，抛出业务异常</span></span><br><span class="line">       <span class="keyword">if</span> (count1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//已经关联菜品，抛出业务异常</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;已关联菜品，删除失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       LambdaQueryWrapper&lt;Setmeal&gt; setmealLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       setmealLambdaQueryWrapper.eq(Setmeal::getCategoryId, id);</span><br><span class="line">       <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> setmealService.count(setmealLambdaQueryWrapper);</span><br><span class="line">       <span class="comment">//查询当前分类是否关联了菜品，如果已关联，抛出业务异常</span></span><br><span class="line">       <span class="keyword">if</span> (count2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//已经关联套餐，抛出业务异常</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;已关联套餐，删除失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//正常删除分类</span></span><br><span class="line">       <span class="built_in">super</span>.removeById(id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>最后在controller中调用新写的remove方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除分类</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@DeleteMapping</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;id:&#123;&#125;&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">       categoryService.remove(id);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;分类信息删除成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>最终效果如图，当我要删除主食的时候，会有提示信息<br><img src="https://pic.imgdb.cn/item/64770c52f024cca173cf2ffd.jpg"></p>
</li>
</ul>
<h1 id="修改分类"><a href="#修改分类" class="headerlink" title="修改分类"></a>修改分类</h1><h2 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h2><p>在分类管理列表页面点击修改按钮，弹出修改窗口，在修改窗口回显分类信息并进行修改，最后点击确定按钮完成修改操作<br><img src="https://pic.imgdb.cn/item/64770ccaf024cca173d002c1.jpg"></p>
<ul>
<li>回显效果<br>这个回显效果完全就是由前端来完成的了，直接看代码</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">修改按钮</button></li><li class="tab"><button type="button" data-href="#tab1-2">editHandle</button></li><li class="tab"><button type="button" data-href="#tab1-3">classDate</button></li><li class="tab"><button type="button" data-href="#tab1-4">表单</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>修改按钮绑定了一个<code>editHandle</code>函数，并传入了当前行数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;blueBug&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;editHandle(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    修改</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>那我们再来看看这个<code>editHandle</code>函数做了什么<br>将当前行的数据赋给了<code>classData</code>下的name和sort属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">editHandle</span>(<span class="params">dat</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">title</span> = <span class="string">&#x27;修改分类&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">action</span> = <span class="string">&#x27;edit&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">name</span> = dat.<span class="property">name</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">sort</span> = dat.<span class="property">sort</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">id</span> = dat.<span class="property">id</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">dialogVisible</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">classData</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;添加菜品分类&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dialogVisible&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;categoryId&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">sort</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><p>表单中又使用v-model实现双向绑定，这样就实现了数据回显</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-form</span><br><span class="line">    <span class="keyword">class</span>=<span class="string">&quot;demo-form-inline&quot;</span></span><br><span class="line">    label-width=<span class="string">&quot;100px&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;分类名称：&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-model</span>=<span class="string">&quot;classData.name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;请输入分类名称&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">maxlength</span>=<span class="string">&quot;14&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;排序：&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;classData.sort&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入排序&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><ul>
<li>数据提交是采用的一个通用的<code>submitForm</code>函数，由于我们是修改操作，所以直接从<code>else</code>开始往后看就行了</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">submitForm</button></li><li class="tab"><button type="button" data-href="#tab1-2">editCategory</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据提交</span></span><br><span class="line"><span class="title function_">submitForm</span>(<span class="params">st</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> classData = <span class="variable language_">this</span>.<span class="property">classData</span></span><br><span class="line">    <span class="keyword">const</span> valid = (classData.<span class="property">name</span> === <span class="number">0</span> ||classData.<span class="property">name</span>)  &amp;&amp; (classData.<span class="property">sort</span> === <span class="number">0</span> || classData.<span class="property">sort</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">action</span> === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">const</span> reg = <span class="regexp">/^\d+$/</span></span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(classData.<span class="property">sort</span>)) &#123;</span><br><span class="line">        <span class="title function_">addCategory</span>(&#123;<span class="string">&#x27;name&#x27;</span>: classData.<span class="property">name</span>,<span class="string">&#x27;type&#x27;</span>:<span class="variable language_">this</span>.<span class="property">type</span>, <span class="attr">sort</span>: classData.<span class="property">sort</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;分类添加成功！&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">dialogVisible</span> = <span class="literal">false</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">name</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">sort</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">        &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;排序只能输入数字类型&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请输入分类名称或排序&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^\d+$/</span></span><br><span class="line">    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">sort</span>)) &#123;</span><br><span class="line">    <span class="title function_">editCategory</span>(&#123;<span class="string">&#x27;id&#x27;</span>:<span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">id</span>,<span class="string">&#x27;name&#x27;</span>: <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">name</span>, <span class="attr">sort</span>: <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">sort</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;分类修改成功！&#x27;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">classData</span>.<span class="property">dialogVisible</span> = <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">handleQuery</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;排序只能输入数字类型&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请输入分类名称或排序&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">editCategory</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<br>

<ul>
<li>后端代码开发<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改分类信息为：&#123;&#125;&quot;</span>, category);</span><br><span class="line">    categoryService.updateById(category);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;修改分类信息成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="文件上传与下载"><a href="#文件上传与下载" class="headerlink" title="文件上传与下载"></a>文件上传与下载</h1><h2 id="文件上传简介"><a href="#文件上传简介" class="headerlink" title="文件上传简介"></a>文件上传简介</h2><ul>
<li>文件上传，也叫upload，是指将本地图片、视频、音频等文件上传到服务器中，可以供其他用户浏览或下载的过程</li>
<li>文件上传时，对页面的form表单有如下要求：</li>
</ul>
<ol>
<li>method&#x3D;”post”，采用post方式提交数据</li>
<li>enctype&#x3D;”multipart&#x2F;form-data”，采用multipart格式上传文件</li>
<li>type&#x3D;”file”，使用input的file控件上传</li>
</ol>
<ul>
<li>举例</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">头像：</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>头像:<br><input type="file">  <br></p>
<ul>
<li>目前一些前端组件库也提供了相应的上传组件，但是底层原理还是基于form表单的文件上传，就用提供好的组件就行<br>我们把这段代码放在backend&#x2F;demo目录下，命名为upload.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../plugins/element-ui/index.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../styles/common.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../../styles/page.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;addBrand-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;food-add-app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../plugins/vue/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../plugins/element-ui/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入axios --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../plugins/axios/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#food-add-app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">imageUrl</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          handleAvatarSuccess (response, file, fileList) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">`/common/download?name=<span class="subst">$&#123;response.data&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          beforeUpload (file) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(file)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> suffix = file.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> size = file.<span class="property">size</span> / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span>([<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>].<span class="title function_">indexOf</span>(suffix) &lt; <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传图片只支持 png、jpeg、jpg 格式！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">upload</span>.<span class="title function_">clearFiles</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span>(!size)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;上传文件大小不能超过 2MB!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">return</span> file</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件:</p>
<ul>
<li>commons-fileupload</li>
<li>commons-io</li>
</ul>
</li>
<li><p>Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，我们只需要在Controller的方法中声明一个MultipartFile类型的参数即可接收上传的文件，例如</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;获取文件：&#123;&#125;&quot;</span>, file.toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>启动服务器，登陆之后访问 <a href="http://localhost/backend/page/demo/upload.html">http://localhost/backend/page/demo/upload.html</a> ，看看日志信息会不会输出获取文件：……</li>
</ul>
<h2 id="文件下载简介"><a href="#文件下载简介" class="headerlink" title="文件下载简介"></a>文件下载简介</h2><ul>
<li>文件下载，也成为了download，是指将文件从服务器传输到本地计算机的过程</li>
<li>通过浏览器进行文件下载，通常有两种表现形式<ol>
<li>以附件形式下载，弹出保存对话框，将文件保存到指定磁盘目录</li>
<li>直接在浏览器中打开</li>
</ol>
</li>
<li>通过浏览器进行文件下载，本质上就是服务端将文件以流的形式写回浏览器的过程</li>
</ul>
<h2 id="文件上传代码实现"><a href="#文件上传代码实现" class="headerlink" title="文件上传代码实现"></a>文件上传代码实现</h2><ul>
<li><p>在编写代码之前，先设置一下拦截路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义不需要处理的请求</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>随后将我们上传的临时文件转存到指定位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/common&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="comment">//file是个临时文件，我们在断点调试的时候可以看到，但是执行完整个方法之后就消失了</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;获取文件：&#123;&#125;&quot;</span>, file.toString());</span><br><span class="line">        <span class="comment">//方法会抛异常，我们这里用try/catch处理一下</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//我们将其转存为E盘下的test.jpg</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\test.jpg&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>试试上传一张图片，然后到E盘看看有没有，如果没有，说明代码有问题</p>
</li>
<li><p>文件转存的位置改为动态可配置的，通过配置文件的方式指定，在application.yml文件中加入以下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reggie:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">D:\image\</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 @Value(“${reggie.path}”)读取到配置文件中的动态转存位置</p>
</li>
<li><p>使用uuid方式重新生成文件名，避免文件名重复造成文件覆盖</p>
</li>
<li><p>通过获取原文件名来截取文件后缀</p>
</li>
<li><p>注意事项：我们需要先判断一下文件目录是否存在，如果不存在则先创建</p>
</li>
<li><p>最后的返回值是将我们生成的新文件名返回给前端</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文件下载</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String name , HttpServletResponse response)</span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//输入流，通过输入流读取文件内容</span></span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(basePath + name));</span><br><span class="line"></span><br><span class="line">           <span class="comment">//输出流，通过输出流将文件写回浏览器，在浏览器展示图片</span></span><br><span class="line">           <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">           response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">           <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">while</span> ( (len = fileInputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">               outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">               outputStream.flush();</span><br><span class="line">           &#125;</span><br><span class="line">           outputStream.close();</span><br><span class="line">           fileInputStream.close();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务器，随便上传一张图片，然后去对应的目录下看看是否有上传的图片</li>
<li>如果一切顺利的话，目录不存在则会自动创建，而且上传的图片也在文件夹内，如果没有这种效果请先检查前面代码是否有误</li>
</ul>
<h2 id="文件下载代码实现"><a href="#文件下载代码实现" class="headerlink" title="文件下载代码实现"></a>文件下载代码实现</h2><h3 id="前端处理"><a href="#前端处理" class="headerlink" title="前端处理"></a>前端处理</h3><ul>
<li>前端页面的ElementUI的upload组件会在上传完图片后，触发img组件发送请求，服务端以流的方式（输出流）将文件写回给浏览器，在浏览器中展示图片</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> <span class="attr">class</span>=<span class="string">&quot;avatar-uploader&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">action</span>=<span class="string">&quot;/common/upload&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:show-file-list</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:on-success</span>=<span class="string">&quot;handleAvatarSuccess&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:before-upload</span>=<span class="string">&quot;beforeUpload&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-if</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>定义前端发送回显图片请求的地址<br>通过这个url我们可以看出，请求路径为&#x2F;common&#x2F;download，且发送的是GET请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleAvatarSuccess (response, file, fileList) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">`/common/download?name=<span class="subst">$&#123;response.data&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h3><p>在CommonController类中添加download方法</p>
<ol>
<li>通过输入流读取文件内容</li>
<li>通过输出流将文件写回浏览器，在浏览器展示图片</li>
<li>关闭输入输出流，释放资源</li>
</ol>
<h1 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h1><h2 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h2><ol>
<li>后台系统中可以管理菜品信息，通过新增功能来添加一个新的菜品</li>
<li>在添加菜品时需要选择当前菜品所属的菜品分类，并且需要上传当前的菜品图片</li>
<li>在移动端会按照菜品分类来展示对应的菜品信息（前端的活儿，跟咱没啥太大关系）</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/647712e2f024cca173d6e1fc.jpg"></p>
<h2 id="代码开发-1"><a href="#代码开发-1" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>我们先来创建对应的实体类，Mapper接口，Service接口及其对应的实现类</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">DishFlavor实体类</button></li><li class="tab"><button type="button" data-href="#tab1-2">DishFlavorMapper</button></li><li class="tab"><button type="button" data-href="#tab1-3">DishFlavorService</button></li><li class="tab"><button type="button" data-href="#tab1-4">DishFlavorServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜品口味</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavor</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味数据list</span></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //逻辑删除</span></span><br><span class="line"><span class="comment">//    @TableLogic</span></span><br><span class="line"><span class="comment">//    private Integer Deleted;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;DishFlavor&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishFlavorServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;DishFlavorMapper, DishFlavor&gt; <span class="keyword">implements</span> <span class="title class_">DishFlavorService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

</li>
<li><p>编写Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorService dishFlavorService;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="梳理交互过程"><a href="#梳理交互过程" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h3><p>按照惯例，在开发代码之前，先来梳理一下整个流程</p>
<ul>
<li>页面（backend&#x2F;page&#x2F;food&#x2F;add.html）发送ajax请求，请求服务端获取菜品分类数据并展示到下拉框中</li>
<li>页面发送请求进行图片上传，请求服务端将图片保存到服务器</li>
<li>页面发送请求进行图片下载，并回显上传的图片</li>
<li>点击保存按钮，发送ajax请求，将菜品相关数据以json形式提交到服务端</li>
<li>所以开发新增菜品功能，其实就是在服务端编写代码去处理前端发送的这4次请求即可</li>
</ul>
<h3 id="查询分类数据"><a href="#查询分类数据" class="headerlink" title="查询分类数据"></a>查询分类数据</h3><ul>
<li><p>前端分析</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">钩子函数</button></li><li class="tab"><button type="button" data-href="#tab1-2">getDishList</button></li><li class="tab"><button type="button" data-href="#tab1-3">getCategoryList</button></li><li class="tab"><button type="button" data-href="#tab1-4">下拉框</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>当页面加载完成后，调用以下几个方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getDishList</span>()</span><br><span class="line">    <span class="comment">// 口味临时数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getFlavorListHand</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = <span class="title function_">requestUrlParam</span>(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">actionType</span> = <span class="variable language_">this</span>.<span class="property">id</span> ? <span class="string">&#x27;edit&#x27;</span> : <span class="string">&#x27;add&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>根据响应状态码来判断操作是否成功，成功则将返回的数据赋给dishList，将获取到的菜品分类数据展示到下拉框中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getDishList () &#123;</span><br><span class="line">    <span class="title function_">getCategoryList</span>(&#123; <span class="string">&#x27;type&#x27;</span>: <span class="number">1</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dishList</span> = res.<span class="property">data</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>发送get请求，路径为&#96;&#x2F;category&#x2F;list</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取菜品分类列表</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCategoryList</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/category/list&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><p>使用<code>v-for</code>遍历获取到的dishList</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;ruleForm.categoryId&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请选择菜品分类&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in dishList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>在<code>CategoryController</code>类中，添加list方法<br>只需要发送get请求，将数据返回给前端即可，操作很简单</p>
</li>
<li><p>serviceImpl实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 菜品分类</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">listWithCategory</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">      <span class="comment">//构造分类构造器</span></span><br><span class="line">      LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//构造分类条件</span></span><br><span class="line">      queryWrapper.eq(category.getType() != <span class="literal">null</span>, Category::getType, category.getType());</span><br><span class="line">      <span class="comment">//构造排序条件</span></span><br><span class="line">      queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">      List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="接收与回显图片"><a href="#接收与回显图片" class="headerlink" title="接收与回显图片"></a>接收与回显图片</h3><p>这个功能再刚刚已经实现了，现在可以直接用</p>
<h3 id="提交数据到服务端"><a href="#提交数据到服务端" class="headerlink" title="提交数据到服务端"></a>提交数据到服务端</h3><blockquote>
<p>价格在前端已被处理，在点击提交按钮后，先执行前端的submitForm方法，并将price做相应的处理（在页面中单位为元，在数据库中存储的单位为分，处理的时候将原有价格乘上了100），再通过ajax请求向后端提供相应的json数据。</p>
</blockquote>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">submitForm</span>(<span class="params">formName, st</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>[formName].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="keyword">let</span> params = &#123;...<span class="variable language_">this</span>.<span class="property">ruleForm</span>&#125;</span><br><span class="line">        <span class="comment">// params.flavors = this.dishFlavors</span></span><br><span class="line">        params.<span class="property">status</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">        params.<span class="property">price</span> *= <span class="number">100</span></span><br><span class="line">        params.<span class="property">categoryId</span> = <span class="variable language_">this</span>.<span class="property">ruleForm</span>.<span class="property">categoryId</span></span><br><span class="line">        params.<span class="property">flavors</span> = <span class="variable language_">this</span>.<span class="property">dishFlavors</span>.<span class="title function_">map</span>(<span class="function"><span class="params">obj</span> =&gt;</span> (&#123; ...obj, <span class="attr">value</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj.<span class="property">value</span>) &#125;))</span><br><span class="line">        <span class="keyword">delete</span> params.<span class="property">dishFlavors</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">imageUrl</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请上传菜品图片&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">actionType</span> == <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> params.<span class="property">id</span></span><br><span class="line">            <span class="title function_">addDish</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;菜品添加成功！&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> (!st) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">dishFlavors</span> = []</span><br><span class="line">                <span class="comment">// this.dishFlavorsData = []</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">imageUrl</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">ruleForm</span> = &#123;</span><br><span class="line">                    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;code&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;image&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;dishFlavors&#x27;</span>: [],</span><br><span class="line">                    <span class="string">&#x27;status&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">categoryId</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">delete</span> params.<span class="property">updateTime</span></span><br><span class="line">            <span class="title function_">editDish</span>(params).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;菜品修改成功！&#x27;</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">goBack</span>()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">msg</span> || <span class="string">&#x27;操作失败&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求出错了：&#x27;</span> + err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>因为Dish实体类不满足接收flavor参数，即需要导入DishDto，用于封装页面提交的数据</li>
<li>DTO，全称为Data Transfer Object，即数据传输对象，一般用于展示层与服务层之间的数据传输</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后面这两条属性暂时没用，这里只需要用第一条属性</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>DishController</code>类中添加save方法，重启服务器，断点调试一下看看是否封装好了数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到的数据为：&#123;&#125;&quot;</span>,dishDto);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>我们需要做的有以下几点</p>
<ul>
<li>将菜品数据保存到dish表</li>
<li>将菜品口味数据保存到dish_flavor表</li>
<li>但是dish_flavor表中需要一个dishId字段值，这个字段值需要从dishDto中获取</li>
<li>获取方式为：取出dishDto的dishId，对每一组flavor的dishId赋值</li>
<li>梳理完毕之后，就在DishFlavorService中编写一个saveWithFlavor方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Dish&gt; &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dishDto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>同时在DishFlavorServiceImpl中重写方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 新增菜品同时，保存对应口味</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDto dto)</span> &#123;</span><br><span class="line">      <span class="comment">//保存菜品的基本信息到菜品表dish</span></span><br><span class="line">      <span class="built_in">this</span>.save(dto);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//从 dish 中获取id</span></span><br><span class="line">      <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dto.getId();  <span class="comment">//保存菜品id</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//菜品口味</span></span><br><span class="line">      List&lt;DishFlavor&gt; flavors = dto.getFlavors();</span><br><span class="line">      flavors.stream().map((item) -&gt; &#123;</span><br><span class="line">          item.setDishId(dishId);</span><br><span class="line">          <span class="keyword">return</span> item;</span><br><span class="line">      &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//保存菜品口味数据到菜品口味表 dish——flavor</span></span><br><span class="line">      dishFlavorService.saveBatch(flavors);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="功能测试-1"><a href="#功能测试-1" class="headerlink" title="功能测试"></a>功能测试</h2><p>重启服务器，登录，测试新增菜品功能</p>
<h1 id="菜品信息分页查询"><a href="#菜品信息分页查询" class="headerlink" title="菜品信息分页查询"></a>菜品信息分页查询</h1><h2 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>系统中的菜品数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看</li>
<li>所以一般的系统中都会以分页的方式来展示列表数据。</li>
<li>其中图片列和菜品分类列比较特殊<ul>
<li>图片列：会用到文件的下载功能</li>
<li>菜品分类列：由于我们的菜品表只保存了category_id，所以我们需要查询category_id对应的菜品分类名称，从而回显数据</li>
</ul>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6477174af024cca173dd4a18.jpg"></p>
<h2 id="梳理交互过程-1"><a href="#梳理交互过程-1" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol>
<li>页面(backend&#x2F;page&#x2F;food&#x2F;list.html)发送ajax请求，将分页查询参数(<code>page</code>、<code>pageSize</code>、<code>name</code>)，提交到服务端，获取分页数据</li>
<li>页面发送请求，请求服务端进行图片下载，用于页面图片展示<br>那么开发菜品信息分页查询功能，其实就是在服务端编写代码去处理前端页面发送的这2次请求即可</li>
</ol>
<h2 id="代码开发-2"><a href="#代码开发-2" class="headerlink" title="代码开发"></a>代码开发</h2><p>在<code>DishController</code>下添加<code>page</code>方法，进行分页查询<br>service实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name)</span> &#123;</span><br><span class="line">         <span class="comment">//构造分页构造器对象</span></span><br><span class="line">    Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">    <span class="type">Page</span> <span class="variable">pageS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>;</span><br><span class="line">    <span class="comment">//条件构造器</span></span><br><span class="line">    LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//添加条件</span></span><br><span class="line">    queryWrapper.like(name != <span class="literal">null</span>, Dish::getName, name);</span><br><span class="line">    queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line">    <span class="comment">//执行分页查询</span></span><br><span class="line">    pages =  dishService.page(pageInfo, queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>重启服务器，但是现在没有菜品分类数据，部分图片也没有加载</p>
<ul>
<li>只需要把资料中提供好的图片复制到我们存放图片的目录下即可</li>
</ul>
</li>
<li><p>那么为什么没有菜品分类数据呢？</p>
<ul>
<li>传递的是一个Dish对象，dish对象没有菜品分类名称属性，但是有菜品分类id</li>
<li>那就可以根据这个菜品分类id，去菜品分类表中查询对应的菜品分类名称</li>
</ul>
</li>
<li><p>所以之前的DishDto类中的另外一个属性就派上用场了，返回一个DishDto对象就有菜品分类名称数据了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishDto</span> <span class="keyword">extends</span> <span class="title class_">Dish</span> &#123;</span><br><span class="line">    <span class="comment">//菜品口味</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;DishFlavor&gt; flavors = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//菜品分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>那么现在就可以把DishDto看做是Dish类的基础上，增加了一个categoryName属性，到时候返回DishDto<br>具体实现思路就是，将查询出来的dish数据，赋给dishDto，然后在根据dish数据中的category_id，去菜品分类表中查询到category_name，将其赋给dishDto</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 分页</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Page <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name)</span> &#123;</span><br><span class="line">      <span class="comment">//构造构造器对象</span></span><br><span class="line">      Page&lt;Dish&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">      Page&lt;DishDto&gt; dtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//构造分页对象</span></span><br><span class="line">      LambdaQueryWrapper&lt;Dish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//过滤条件</span></span><br><span class="line">      queryWrapper.like(name != <span class="literal">null</span>, Dish::getName, name);</span><br><span class="line">      <span class="comment">//排序条件</span></span><br><span class="line">      queryWrapper.orderByDesc(Dish::getUpdateTime);</span><br><span class="line">      <span class="comment">//执行分页</span></span><br><span class="line">      <span class="built_in">this</span>.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//对象拷贝， 除了records</span></span><br><span class="line">      BeanUtils.copyProperties(pageInfo, dtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">      <span class="comment">//获取分页中的数据</span></span><br><span class="line">      List&lt;Dish&gt; records = pageInfo.getRecords();</span><br><span class="line">      <span class="comment">//通过stream流修改 records 数据，再拷贝给 dtoPage</span></span><br><span class="line">      List&lt;DishDto&gt; list = records.stream().map(item -&gt; &#123;</span><br><span class="line">          <span class="type">DishDto</span> <span class="variable">dishDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line"></span><br><span class="line">          <span class="comment">//将pageInfo 中的分页数据 拷贝到 dishDto中</span></span><br><span class="line">          BeanUtils.copyProperties(item, dishDto);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//获取 pageInfo 分页中保存的 菜品名称</span></span><br><span class="line">          <span class="type">Long</span> <span class="variable">categoryId</span> <span class="operator">=</span> item.getCategoryId();</span><br><span class="line">          <span class="comment">//使用categoryService 进行查询id，获取对象</span></span><br><span class="line">          <span class="type">Category</span> <span class="variable">category</span> <span class="operator">=</span> categoryService.getById(categoryId);</span><br><span class="line">          <span class="comment">//通过对象再获取到菜品名字</span></span><br><span class="line">          <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> category.getName();</span><br><span class="line">          <span class="comment">//将菜品名 放入dto中</span></span><br><span class="line">          dishDto.setCategoryName(categoryName);</span><br><span class="line">          <span class="keyword">return</span> dishDto;</span><br><span class="line">      &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//再将records 的值 放入 dtoPage中</span></span><br><span class="line">      dtoPage.setRecords(list);</span><br><span class="line">      <span class="keyword">return</span> dtoPage;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://pic.imgdb.cn/item/647718aaf024cca173df5713.jpg"></p>
<h1 id="修改菜品"><a href="#修改菜品" class="headerlink" title="修改菜品"></a>修改菜品</h1><h2 id="梳理交互过程-2"><a href="#梳理交互过程-2" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><p>先来梳理一下整个流程</p>
<ol>
<li>页面发送ajax请求，请求服务器获取分类数据，用于菜品分类下拉框的数据回显（之前我们已经实现过了）</li>
<li>页面发送ajax请求，请求服务端，根据id查询当前菜品信息，用于菜品信息回显</li>
<li>页面发送请求，请求服务端进行图片下载，用于页面图片回显（之前我们已经实现过了）</li>
<li>点击保存按钮，页面发送ajax请求，将修改后的菜品相关数据以json形式提交到服务端</li>
</ol>
<p>开发修改菜品功能，其实就是在服务端写代码去处理以上四次请求</p>
<h2 id="查询菜品信息"><a href="#查询菜品信息" class="headerlink" title="查询菜品信息"></a>查询菜品信息</h2><ul>
<li>菜品信息回显功能，需要我们先根据id来查询到对应的菜品信息才能回显</li>
<li>但修改表单中有一个菜品口味属性，普通的Dish类没有这个属性，所以还是要用到DishDto</li>
<li>那我们这里先编写一个<code>getByIdWithFlavor</code>方法</li>
<li>菜品口味需要根据<code>dish_id</code>去<code>dish_flavor</code>表中查询，将查询到的菜品口味数据赋给我们的<code>DishDto</code>对象即可</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据id查询菜品信息和口味信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> DishDto <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="comment">//根据id获取菜品信息，查询 dish表</span></span><br><span class="line">      <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">      <span class="type">DishDto</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">      <span class="comment">//对象拷贝</span></span><br><span class="line">      BeanUtils.copyProperties(dish, dto);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//根据id获取口味信息，查询 dish_flavor表</span></span><br><span class="line">      LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//通过dish 获取的id对比 dish_flavor表中的数据</span></span><br><span class="line">      queryWrapper.eq(dish.getId() != <span class="literal">null</span>, DishFlavor::getDishId, dish.getId());</span><br><span class="line">      <span class="comment">//通过 service 获取到 口味信息list集合</span></span><br><span class="line">      List&lt;DishFlavor&gt; list = dishFlavorService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">      dto.setFlavors(list);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> dto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在DishController中添加get方法，实现添加在DishServicelmpl中的逻辑代码，返回查询到的数据信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id获取菜品信息和口味信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;DishDto&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;ID:&#123;&#125;&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">        <span class="type">DishDto</span> <span class="variable">dto</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">        <span class="keyword">return</span> R.success(dto);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>去访问一下修改菜品页面，看看是否有效果，如果没效果，打个断点或者看看日志<br><img src="https://pic.imgdb.cn/item/6477198af024cca173e03fbf.jpg"></p>
</li>
</ul>
<h2 id="修改菜品信息"><a href="#修改菜品信息" class="headerlink" title="修改菜品信息"></a>修改菜品信息</h2><p>由于Dish表中没有Flavor这个属性，所以修改的时候，也是需要修改两张表</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">修改按钮</button></li><li class="tab"><button type="button" data-href="#tab1-2">addFoodtype</button></li><li class="tab"><button type="button" data-href="#tab1-3">editDish</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>修改按钮绑定过的是addFoodtype方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">size</span>=<span class="string">&quot;small&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;blueBug&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;addFoodtype(scope.row.id)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">    修改</span><br><span class="line"><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加</span></span><br><span class="line">addFoodtype (st) &#123;</span><br><span class="line"><span class="keyword">if</span> (st === <span class="string">&#x27;add&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/backend/page/food/add.html&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;添加菜品&#x27;</span></span><br><span class="line">    &#125;,<span class="literal">true</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">menuHandle</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/backend/page/food/add.html?id=&#x27;</span>+st,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;修改菜品&#x27;</span></span><br><span class="line">    &#125;,<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>从这我们能看出请求路径与方式，所以后端代码我们需要提交PUT请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改接口</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">editDish</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/dish&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; ...params &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li><p>开始编写后端逻辑</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">修改菜品后端代码分析1</button></li><li class="tab"><button type="button" data-href="#tab1-2">updateWithFlavor</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>主要框架就这点东西，重点是编写<code>updateWithFlavor</code>方法<br>首先去DishService中创建<code>updateWithFlavor</code>方法，然后在<code>DishServiceImpl</code>中重写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDto dishDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;接收到的数据为：&#123;&#125;&quot;</span>, dishDto);</span><br><span class="line">    dishService.updateWithFlavor(dishDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;修改菜品成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><ul>
<li>根据id修改菜品的基本信息</li>
<li>通过dish_id,删除菜品的flavor</li>
<li>获取前端提交的flavor数据</li>
<li>为条flavor的dishId属性赋值</li>
<li>将数据批量保存到dish_flavor数据库<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改菜品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">//修改 dish 表中数据</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(dto);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先删除 dishFlavor 中的口味数据 ，执行 delete操作</span></span><br><span class="line">        LambdaQueryWrapper&lt;DishFlavor&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//通过对比得到和修改菜品id 相对应的 口味数据</span></span><br><span class="line">        queryWrapper.eq(DishFlavor::getDishId, dto.getId());</span><br><span class="line">        <span class="comment">//执行删除操作</span></span><br><span class="line">        dishFlavorService.remove(queryWrapper);</span><br><span class="line">        <span class="comment">//再将新的口味数据添加进 dish-flavor ，执行 insert 操作</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dto.getFlavors();</span><br><span class="line">        <span class="comment">//将前端传回的口味数据封装到 集合中</span></span><br><span class="line">        List&lt;DishFlavor&gt; list = flavors.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="comment">//将前端传回的菜品id封装到 flavors 中</span></span><br><span class="line">            item.setDishId(dto.getId());</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//执行添加操作</span></span><br><span class="line">        dishFlavorService.saveBatch(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>修改菜品功能就完成了，重启服务器，测试一下</p>
</li>
</ul>
<blockquote>
<p>注意要在DishServiceImpl上添加@Transactional注解，同时也要在主启动类上加上@EnableTransactionManagement注解</p>
</blockquote>
<h1 id="新增套餐"><a href="#新增套餐" class="headerlink" title="新增套餐"></a>新增套餐</h1><h2 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li><p>套餐就是菜品的集合</p>
</li>
<li><p>后台系统中可以管理套餐信息，通过新增套餐来添加一个新的套餐</p>
</li>
<li><p>在添加套餐时需要选择当前套餐所属的套餐分类和包含的菜品，并且需要上传套餐对应的图片</p>
</li>
<li><p>新增套餐，其实就是将新增页面录入的套餐信息插入到setmeal表中，而且还要向setmeal_dish表中插入套餐和菜品关联数据</p>
</li>
<li><p>所以在新增套餐时，需要对两张表进行操作</p>
<ol>
<li>setmeal表 —&gt; 套餐表</li>
<li>setmeal_dish表 —&gt; 套餐菜品关系表</li>
</ol>
</li>
</ul>
<h2 id="准备工作-3"><a href="#准备工作-3" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开发业务功能前，先将需要用到的类和接口基本结构创建好:</p>
<ol>
<li><p>实体类SetmealDish</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐菜品关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDish</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品名称 （冗余字段）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品原价</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//份数</span></span><br><span class="line">    <span class="keyword">private</span> Integer copies;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否删除</span></span><br><span class="line">    <span class="keyword">private</span> Integer Deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DTO SetmealDto<br> 普通的SetmealDish类肯定是不够我们用的，这里还需要加上套餐内的具体菜品和套餐分类名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDto</span> <span class="keyword">extends</span> <span class="title class_">Setmeal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SetmealDish&gt; setmealDishes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper接口SetmealDishMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>业务层接口SetmealDishService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;SetmealDish&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>业务层实现类SetmealDishservicelmpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealDishServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SetmealDishMapper, SetmealDish&gt; <span class="keyword">implements</span> <span class="title class_">SetmealDishService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>控制层SetmealController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishService setmealDishService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="梳理交互过程-3"><a href="#梳理交互过程-3" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><p>先来梳理一下新增套餐时前端页面与服务端的交互过程</p>
<ol>
<li>页面发送ajax请求，请求服务端，获取套餐分类数据并展示到下拉框中（这个之前做过）</li>
<li>页面发送ajax请求，请求服务端，获取菜品分类数据并展示到添加菜品窗口中</li>
<li>页面发送ajax请求，请求服务端，根据菜品分类查询对应的菜品数据并展示到添加菜品窗口中</li>
<li>页面发送请求进行图片上传，请求服务端将图片保存到服务器（已完成）</li>
<li>页面发送请求进行图片下载，将上传的图片进行回显（已完成）</li>
<li>点击保存按钮，发送ajax请求，将套餐相关数据以json形式提交到服务端<br>开发新增套餐功能，其实就是在服务端编写代码去处理前端页面发送的这6次请求</li>
</ol>
<h2 id="代码开发-3"><a href="#代码开发-3" class="headerlink" title="代码开发"></a>代码开发</h2><p>新增套餐页面，现在的套餐分类下拉框中已经能显示套餐分类了，这个功能在之前我们已经实现过了</p>
<ul>
<li><p>添加菜品页面，这个页面是发送的GET请求，且路径为dish&#x2F;list?categoryId&#x3D;xxx</p>
</li>
<li><p>所以先去DishController中编写对应的get方法来正确显示菜品数据</p>
</li>
<li><p>编写save方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;套餐信息：&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;套餐添加成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>需要注意的是setmealId为null，具体的代码中，要从setmealDao中获取并赋值</p>
</li>
<li><p>具体业务逻辑如下</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Setmealcontroller</button></li><li class="tab"><button type="button" data-href="#tab1-2">Setmealservice</button></li><li class="tab"><button type="button" data-href="#tab1-3">SetmealServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>这里依旧是需要我们自己在SetmealService中编写一个setWithDish方法，并在SetmealServiceImpl中实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增套餐</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">&quot;setmeal:&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line"></span><br><span class="line">       setmealService.saveWithSetmeal(setmealDto);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithSetmeal</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithSetmeal</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.save(setmealDto);</span><br><span class="line">        <span class="comment">//获取 setmeal id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealDtoId</span> <span class="operator">=</span> setmealDto.getId();</span><br><span class="line">        <span class="comment">//获取到 setmealDish 的菜品数据集合</span></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">        <span class="comment">//通过 stream流 将 套餐id传入</span></span><br><span class="line">        List&lt;SetmealDish&gt; collect = setmealDishes.stream().map(item -&gt; &#123;</span><br><span class="line">            item.setSetmealId(setmealDtoId);</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        setmealDishService.saveBatch(collect);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>那么至此，新增套餐的功能就实现了，重启服务器测试一下，不过现在看不到页面效果，因为还没做分页查询，所以只能暂时去数据库查看</p>
</li>
</ul>
<h1 id="套餐信息分页查询"><a href="#套餐信息分页查询" class="headerlink" title="套餐信息分页查询"></a>套餐信息分页查询</h1><h2 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>系统中的套餐数据很多的时候，如果在一个页面中全部展示出来会显得比较乱，不便于查看</li>
<li>一般的系统中都会以分页的方式来展示列表数据</li>
</ul>
<h2 id="梳理交互过程-4"><a href="#梳理交互过程-4" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol>
<li>页面发送ajax请求，将分页查询参数（page，pageSize，name）提交到服务端，获取分页数据</li>
<li>页面发送请求，请求服务端进行图片下载，用于页面图片展示（已完成）</li>
</ol>
<ul>
<li>前端分析<br>点击套餐管理，在搜索框输入1，获取请求url与请求方式<ul>
<li>请求网址: <a href="http://localhost/setmeal/page?page=1&pageSize=10&name=1">http://localhost/setmeal/page?page=1&amp;pageSize=10&amp;name=1</a></li>
<li>请求方法: GET</li>
</ul>
</li>
</ul>
<h2 id="代码开发-4"><a href="#代码开发-4" class="headerlink" title="代码开发"></a>代码开发</h2><p>SetmealController类中，添加list方法<br>其实跟前面的菜品信息分页查询代码几乎一模一样</p>
<ul>
<li>serviceImpl实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line">     * 分页</span><br><span class="line">     *</span><br><span class="line">     * <span class="meta">@param</span> page</span><br><span class="line">     * <span class="meta">@param</span> pageSize</span><br><span class="line">     * <span class="meta">@param</span> name</span><br><span class="line">     * <span class="meta">@return</span></span><br><span class="line">     */</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, String name)</span> &#123;</span><br><span class="line">        <span class="comment">//构造构造器对象</span></span><br><span class="line">        Page&lt;Setmeal&gt; setmealPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        Page&lt;SetmealDto&gt; setmealDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//构造分页器对象</span></span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//过滤条件</span></span><br><span class="line">        queryWrapper.like(name != <span class="literal">null</span>, Setmeal::getName, name);</span><br><span class="line">        <span class="comment">//排序条件</span></span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getSort).orderByAsc(Setmeal::getUpdateTime);</span><br><span class="line">        <span class="comment">//执行分页</span></span><br><span class="line">        <span class="built_in">this</span>.page(setmealPage, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象拷贝,不拷贝其中records</span></span><br><span class="line">        BeanUtils.copyProperties(setmealPage, setmealDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">        <span class="comment">//获取setmaelPage 中 records ，records：装载分页数据</span></span><br><span class="line">        List&lt;Setmeal&gt; records = setmealPage.getRecords();</span><br><span class="line">        <span class="comment">//通过 stream 流，处理 records 内容并将其存入 套餐的菜品信息集合 中</span></span><br><span class="line">        List&lt;SetmealDto&gt; collect = records.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="type">SetmealDto</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">            <span class="comment">//对象拷贝</span></span><br><span class="line">            BeanUtils.copyProperties(item, dto);</span><br><span class="line">            <span class="comment">//获取套餐id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">itemId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">            <span class="comment">//通过id 获取到对象</span></span><br><span class="line">            <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(itemId);</span><br><span class="line">            <span class="comment">//通过对象获取到 菜品名称</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">categoryName</span> <span class="operator">=</span> setmeal.getName();</span><br><span class="line">            <span class="comment">//将分类名称存入 对象中</span></span><br><span class="line">            dto.setCategoryName(categoryName);</span><br><span class="line">            <span class="keyword">return</span> dto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        setmealDtoPage.setRecords(collect);</span><br><span class="line">        <span class="keyword">return</span> setmealDtoPage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="删除套餐"><a href="#删除套餐" class="headerlink" title="删除套餐"></a>删除套餐</h1><h2 id="需求分析-7"><a href="#需求分析-7" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>在套餐管理列表页面点击删除按钮，可以删除对应的套餐信息</li>
<li>也可以通过复选框选择多个套餐，选择批量删除一次性删除多个套餐<blockquote>
<p>注意：对于在售中的套餐不能删除，需要先停售，然后才能删除</p>
</blockquote>
</li>
</ul>
<h2 id="梳理交互过程-5"><a href="#梳理交互过程-5" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol>
<li>删除单个套餐时，页面发送ajax请求，根据套餐id删除对应套餐</li>
<li>删除多个套餐时，页面发送ajax请求，根据提交的多个套餐id删除对应套餐开发删除套餐功能<ul>
<li>请求网址: <a href="http://localhost/setmeal?ids=1579044544635232258,1415580119015145474">http://localhost/setmeal?ids=1579044544635232258,1415580119015145474</a></li>
<li>请求方法: DELETE</li>
</ul>
</li>
</ol>
<ul>
<li>删除单个套餐和批量删除这两种请求的地址和请求方式都是相同的</li>
<li>不同的则是传递的id个数，所以在服务端可以提供一个方法来统一处理。</li>
</ul>
<h2 id="代码开发-5"><a href="#代码开发-5" class="headerlink" title="代码开发"></a>代码开发</h2><ul>
<li><p>在SetmealController中添加delete方法</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">SetmealController</button></li><li class="tab"><button type="button" data-href="#tab1-2">SetmealService</button></li><li class="tab"><button type="button" data-href="#tab1-3">SetmealDishService</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>我选择的是开启事务同时操作两张表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">deleteByIds</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;id:&#123;&#125;&quot;</span>, ids);</span><br><span class="line">        setmealService.deleteIdsWithSetmeal(ids);</span><br><span class="line">        setmealDishService.deleteIdsWithSetmealDish(ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量、单个删除套餐</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteIdsWithSetmeal</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//批量、单个删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteIdsWithSetmealDish</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>重启服务器，并测试</p>
</li>
</ul>
<h1 id="手机验证"><a href="#手机验证" class="headerlink" title="手机验证"></a>手机验证</h1><ul>
<li>太麻烦了，看视频吧0.0 </li>
<li><a href="https://www.bilibili.com/video/BV13a411q753?p=81&vd_source=671943108fb26b0c46d9d535c1742472">https://www.bilibili.com/video/BV13a411q753?p=81&amp;vd_source=671943108fb26b0c46d9d535c1742472</a></li>
</ul>
<p>注意版本问题</p>
<h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-dysmsapi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小程序登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码发送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(user.getPhone())) &#123;</span><br><span class="line">            userService.sendMsg(user, session);</span><br><span class="line">            <span class="keyword">return</span> R.success(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;发送失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;User&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.login(map, session);</span><br><span class="line">        log.info(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SMSUtlis"><a href="#SMSUtlis" class="headerlink" title="SMSUtlis"></a>SMSUtlis</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信发送工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SMSUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送短信</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> signName 签名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> templateCode 模板</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> phoneNumbers 手机号</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String signName, String templateCode,String phoneNumbers,String param)</span>&#123;</span><br><span class="line">		<span class="type">DefaultProfile</span> <span class="variable">profile</span> <span class="operator">=</span> DefaultProfile.getProfile(<span class="string">&quot;cn-hangzhou&quot;</span>, <span class="string">&quot;自己的阿里云AccessKey&quot;</span>, <span class="string">&quot;xxxxxxxxxxxxxx&quot;</span>);</span><br><span class="line">		<span class="type">IAcsClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAcsClient</span>(profile);</span><br><span class="line"></span><br><span class="line">		<span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();</span><br><span class="line">		request.setSysRegionId(<span class="string">&quot;cn-hangzhou&quot;</span>);</span><br><span class="line">		request.setPhoneNumbers(phoneNumbers);</span><br><span class="line">		request.setSignName(signName);</span><br><span class="line">		request.setTemplateCode(templateCode);</span><br><span class="line">		request.setTemplateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+param+<span class="string">&quot;\&quot;&#125;&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">SendSmsResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">			System.out.println(<span class="string">&quot;短信发送成功&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我是验证成功了，免费的就一百条，我就干脆用控制台输出了哈哈</p>
</blockquote>
<h2 id="修改拦截器"><a href="#修改拦截器" class="headerlink" title="修改拦截器"></a>修改拦截器</h2><ul>
<li>对用户登录操作放行<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义不需要处理的请求</span></span><br><span class="line">String[] urls = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">        <span class="string">&quot;/employee/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/employee/logout&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/backend/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/front/**&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/common/**&quot;</span>,</span><br><span class="line">        <span class="comment">//对用户登陆操作放行</span></span><br><span class="line">        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">        <span class="string">&quot;/user/sendMsg&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>判断用户是否登录<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断用户是否登录</span></span><br><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">    log.info(<span class="string">&quot;用户已登录，用户id为：&#123;&#125;&quot;</span>,request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> (Long)request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    BaseContext.setCurrentId(userId);</span><br><span class="line">    filterChain.doFilter(request,response);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h2><p><img src="https://pic.imgdb.cn/item/647721f6f024cca173e91664.jpg"><br><img src="https://pic.imgdb.cn/item/6477221cf024cca173e946a8.jpg"></p>
<ul>
<li>发送验证码的请求方式是POST，路径为&#x2F;user&#x2F;sendMsg</li>
<li>那么我们在UserController控制层中，添加sendMsg方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码发送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(User user, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//获取手机号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> user.getPhone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成 4位数 验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> ValidateCodeUtils.generateValidateCode(<span class="number">4</span>).toString();</span><br><span class="line">        <span class="comment">//调用阿里云，发送手机验证码</span></span><br><span class="line"><span class="comment">//            SMSUtils.sendMessage(&quot;阿里云短信测试&quot;, &quot;SMS_154950909&quot;,phone,code);</span></span><br><span class="line">        <span class="comment">//生成的验证码 保存到 session</span></span><br><span class="line">        session.setAttribute(phone, code);</span><br><span class="line">        log.info(<span class="string">&quot;code:&#123;&#125;&quot;</span>, code);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>输入验证码，点击登录</p>
<ul>
<li>请求路径为:&#x2F;user&#x2F;login，数据以json格式返回给服务端<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> Map map,HttpSession session)</span>&#123;</span><br><span class="line">    log.info(map.toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>继续完善<code>login</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 登录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(Map map, HttpSession session)</span> &#123;</span><br><span class="line">       <span class="comment">//获取手机号</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> map.get(<span class="string">&quot;phone&quot;</span>).toString();</span><br><span class="line">       <span class="comment">//获取验证码</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> map.get(<span class="string">&quot;code&quot;</span>).toString();</span><br><span class="line">       <span class="comment">//获取session中的验证码,根据 key 获取 value</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">codeInSession</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line">       <span class="comment">//对比验证码</span></span><br><span class="line">       <span class="keyword">if</span> (!(codeInSession != <span class="literal">null</span> &amp;&amp; codeInSession.equals(code))) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//如果正确，登录</span></span><br><span class="line">       <span class="comment">//判断是否为新用户，如果不是，自动注册为新用户</span></span><br><span class="line">       LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">       <span class="comment">//查询数据库，如果查出不等于空，直接返回对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">       <span class="comment">//如果等于空，注册</span></span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//是新用户</span></span><br><span class="line">           user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">           user.setPhone(phone);</span><br><span class="line">           user.setStatus(<span class="number">1</span>);</span><br><span class="line">           userService.save(user);</span><br><span class="line">       &#125;</span><br><span class="line">       session.setAttribute(<span class="string">&quot;user&quot;</span>, user.getId());</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>获取验证码，点击提交，正常登录<br><img src="https://pic.imgdb.cn/item/64772c43f024cca173f4ca5a.jpg"></p>
<h1 id="地址簿"><a href="#地址簿" class="headerlink" title="地址簿"></a>地址簿</h1><h2 id="需求分析-8"><a href="#需求分析-8" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>地址簿，指的是移动端消费者用户的地址信息（外卖快递的收货地址）</li>
<li>用户登录成功后可以维护自己的地址信息（自己修改删除新增等）</li>
<li>同一个用户可以有多个地址信息，但是只能有一个默认地址。（有默认地址的话会很方便）</li>
</ul>
<h2 id="准备工作-4"><a href="#准备工作-4" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>创建对应的实体类AddressBook</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址簿</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBook</span> &#123;</span><br><span class="line">    <span class="comment">//地址id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String provinceCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省级名称</span></span><br><span class="line">    <span class="keyword">private</span> String provinceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//市级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String cityCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//市级名称</span></span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//区级区划编号</span></span><br><span class="line">    <span class="keyword">private</span> String districtCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//区级名称</span></span><br><span class="line">    <span class="keyword">private</span> String districtName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//详细地址</span></span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//标签</span></span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否为默认地址，  0：否 1：是</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDefault;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改时间</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建人id</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Long createUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改人</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Long updateUser;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除  0:未删除   1:已删除</span></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper接口AddressBookMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressBookMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>业务层接口AddressBookService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddreddBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;AddressBook&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>业务层实现类AddressBookServicelmpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;AddressBookMapper, AddressBook&gt; <span class="keyword">implements</span> <span class="title class_">AddressBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>控制层AddressBookController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addreddBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressBookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressBookService addressBookService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="完善地址管理页面"><a href="#完善地址管理页面" class="headerlink" title="完善地址管理页面"></a>完善地址管理页面</h2><ul>
<li>点击地址管理，查看请求方式与地址<br><img src="https://pic.imgdb.cn/item/64772d68f024cca173f5b2f5.jpg"></li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/addressBook/list">http://localhost/addressBook/list</a><br>请求方法: GET</p>
</blockquote>
<ul>
<li><p>请求路径为<code>/addressBook/list</code>，请求方式为<code>GET</code>，现在来AddressBookController中编写对应的方法</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">AddressBookController</button></li><li class="tab"><button type="button" data-href="#tab1-2">AddressBookService</button></li><li class="tab"><button type="button" data-href="#tab1-3">AddressBookServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询指定用户全部地址信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;List&lt;AddressBook&gt;&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">       List&lt;AddressBook&gt; list = addressBookService.getByIds();</span><br><span class="line">       <span class="keyword">return</span> R.success(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询地址信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;AddressBook&gt; <span class="title function_">getByIds</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询用户地址信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;AddressBook&gt; <span class="title function_">getByIds</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//获取当前登录用户id</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//通过id比对查找 匹配id的地址信息</span></span><br><span class="line">       LambdaQueryWrapper&lt;AddressBook&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//找出包含该id的地址信息</span></span><br><span class="line">       queryWrapper.in(AddressBook::getUserId, id);</span><br><span class="line">       <span class="comment">//排序条件</span></span><br><span class="line">       queryWrapper.orderByDesc(AddressBook::getIsDefault);</span><br><span class="line"></span><br><span class="line">       List&lt;AddressBook&gt; list = addressBookService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>不过写完了暂时还是不能看到效果的，数据库中并没有添加对应账号的数据，继续来做新增收货地址功能</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/64772e85f024cca173f70b22.jpg"></p>
<blockquote>
<p>请求网址: <a href="http://localhost/addressBook">http://localhost/addressBook</a><br>请求方法: POST</p>
</blockquote>
<ul>
<li><p>请求路径Wie&#x2F;<code>addressBook</code>，请求方式为<code>POST</code>，那么我们在<code>AddressBookController</code>中编写对应的方法</p>
</li>
<li><p>直接controller解决掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增收货地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> addressBook</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">        <span class="comment">//前端没有返回 用户id，通过配置类获取并添加</span></span><br><span class="line">        addressBook.setUserId(BaseContext.getCurrentId());</span><br><span class="line">        addressBookService.save(addressBook);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务器，测试新增地址<br><img src="https://pic.imgdb.cn/item/64772f80f024cca173f89c97.jpg"></p>
</li>
<li><p>添加之后的效果<br><img src="https://pic.imgdb.cn/item/64772f98f024cca173f8bd58.jpg"></p>
</li>
</ul>
<h2 id="设置默认地址"><a href="#设置默认地址" class="headerlink" title="设置默认地址"></a>设置默认地址</h2><ul>
<li><p>怎么设置默认地址</p>
<ul>
<li>默认地址，按理说数据库中，有且仅有一条数据为默认地址，也就是is_default字段为1</li>
<li>如何保证整个表中的is_default字段只有一条为1<ul>
<li>每次设置默认地址的时候，将当前用户所有地址的is_default字段设为0，随后将当前地址的is_default字段设为1</li>
</ul>
</li>
</ul>
</li>
<li><p>当我们点击上图的设为默认按钮的时候，会发送请求</p>
<blockquote>
<p>当我们点击上图的设为默认按钮的时候，会发送请求</p>
</blockquote>
</li>
<li><p>请求路径为<code>/addressBook/default</code>，请求方式为<code>PUT</code>，那么现在就在<code>AddressBookController</code>中编写对应的方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">AddressBookController</button></li><li class="tab"><button type="button" data-href="#tab1-2">AddressBookService</button></li><li class="tab"><button type="button" data-href="#tab1-3">AddressBookServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改默认地址</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> addressBook</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PutMapping(&quot;/default&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, addressBook);</span><br><span class="line"></span><br><span class="line">       addressBookService.updateStatus(addressBook);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改默认地址</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> addressBook</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   AddressBook <span class="title function_">updateStatus</span><span class="params">(AddressBook addressBook)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改默认地址</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> addressBook</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> AddressBook <span class="title function_">updateStatus</span><span class="params">(AddressBook addressBook)</span> &#123;</span><br><span class="line">       <span class="comment">//先获取到这个用户所有的地址信息</span></span><br><span class="line">       LambdaUpdateWrapper&lt;AddressBook&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//将数据库中的userid 与 本次登录的id进行对比</span></span><br><span class="line">       updateWrapper.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">       <span class="comment">//将匹配上id 的地址信息的默认状态改为0</span></span><br><span class="line">       updateWrapper.set(AddressBook::getIsDefault, <span class="number">0</span>);</span><br><span class="line">       <span class="comment">//执行修改</span></span><br><span class="line">       addressBookService.update(updateWrapper);</span><br><span class="line">       <span class="comment">//再将要修改的那一条数据改为1</span></span><br><span class="line">       addressBook.setIsDefault(<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//执行修改</span></span><br><span class="line">       addressBookService.updateById(addressBook);</span><br><span class="line">       <span class="keyword">return</span> addressBook;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<blockquote>
<p>注意这里的条件构造器是<code>LambdaUpdateWrapper</code>，而不是前面经常用的<code>LambdaQueryWrapper</code></p>
</blockquote>
<h1 id="菜品展示"><a href="#菜品展示" class="headerlink" title="菜品展示"></a>菜品展示</h1><h2 id="需求分析-9"><a href="#需求分析-9" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>用户登陆成功之后，跳转到菜品页面，根据菜品分类来展示菜品和套餐</li>
<li>如果菜品设置了口味信息，则需要展示选择规格按钮，否则只展示+按钮（这部分是前端实现的）</li>
</ul>
<h2 id="梳理交互过程-6"><a href="#梳理交互过程-6" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ol>
<li>页面(front&#x2F;index.html)发送ajax请求，获取分类数据（菜品分类和套餐分类）</li>
<li>页面发送ajax请求，根据具体的菜品&#x2F;套餐分类，展示对应分类中的具体菜品</li>
</ol>
<h2 id="前端分析"><a href="#前端分析" class="headerlink" title="前端分析"></a>前端分析</h2><ul>
<li><p>启动服务器，登录账号，监测Network选项卡，发现登录到首页会发送两个请求</p>
</li>
<li><p>分类</p>
<blockquote>
<p>请求网址: <a href="http://localhost/category/list">http://localhost/category/list</a><br>请求方法: GET</p>
</blockquote>
</li>
<li><p>购物车</p>
<blockquote>
<p>请求网址: <a href="http://localhost/shoppingCart/list">http://localhost/shoppingCart/list</a><br>请求方法: GET</p>
</blockquote>
</li>
<li><p>其中分类请求我们之前写过了，但是当访问页面的时候，并没有加载出来，原因来看看前端代码</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">index.html</button></li><li class="tab"><button type="button" data-href="#tab1-2">categroyListApi</button></li><li class="tab"><button type="button" data-href="#tab1-3">category/list</button></li><li class="tab"><button type="button" data-href="#tab1-4">cartListApi</button></li><li class="tab"><button type="button" data-href="#tab1-5">cartData.json</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p><code>Promise.all</code>在处理多个异步请求时，需要等待绑定的每个ajax请求返回数据以后才能正常显示<br>虽然<code>categoryListApi</code>可以正常返回数据，但是<code>cartListApi</code>不能，看一下代码的请求路径就知道，我们还没开始写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="title function_">initData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">categoryListApi</span>(),<span class="title function_">cartListApi</span>(&#123;&#125;)]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//获取分类数据</span></span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">0</span>].<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">categoryList</span> = res[<span class="number">0</span>].<span class="property">data</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(res[<span class="number">0</span>].<span class="property">data</span>) &amp;&amp; res[<span class="number">0</span>].<span class="property">data</span>.<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">categoryId</span> = res[<span class="number">0</span>].<span class="property">data</span>[<span class="number">0</span>].<span class="property">id</span></span><br><span class="line">        <span class="keyword">if</span>(res[<span class="number">0</span>].<span class="property">data</span>[<span class="number">0</span>].<span class="property">type</span> === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getDishList</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getSetmealData</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res[<span class="number">0</span>].<span class="property">msg</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取菜品数据</span></span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>].<span class="property">code</span> === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cartData</span> = res[<span class="number">1</span>].<span class="property">data</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.$notify(&#123; <span class="attr">type</span>:<span class="string">&#x27;warning&#x27;</span>, <span class="attr">message</span>:res[<span class="number">1</span>].<span class="property">msg</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>这个请求路径我们写过了，而且可以正常返回数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取所有的菜品分类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">categoryListApi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/category/list&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 菜品分类</span></span><br><span class="line"><span class="comment">    * 写在业务层</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Category&gt; <span class="title function_">listWithCategory</span><span class="params">(Category category)</span> &#123;</span><br><span class="line">       <span class="comment">//构造分类构造器</span></span><br><span class="line">       LambdaQueryWrapper&lt;Category&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//构造分类条件</span></span><br><span class="line">       queryWrapper.eq(category.getType() != <span class="literal">null</span>, Category::getType, category.getType());</span><br><span class="line">       <span class="comment">//构造排序条件</span></span><br><span class="line">       queryWrapper.orderByAsc(Category::getSort).orderByDesc(Category::getUpdateTime);</span><br><span class="line"></span><br><span class="line">       List&lt;Category&gt; list = categoryService.list(queryWrapper);</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><p>购物车相关功能还没写，所以这里我们用一个写死了的json数据骗骗它<br>将url换成我们注释掉的那个就好了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取购物车内商品的集合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cartListApi</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/shoppingCart/list&#x27;</span>,</span><br><span class="line">        <span class="comment">//&#x27;url&#x27;: &#x27;/front/cartData.json&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-5"><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;map&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li><p>再次重启服务器，看看首页是否能显示分类数据<br><img src="https://pic.imgdb.cn/item/6477321bf024cca173fddb03.jpg"></p>
</li>
<li><p>但是现在还存在一个问题，我们的菜品是有口味数据的，那么这里的按钮不该是一个<code>+</code>，而应该是<code>选择规格</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;divTypes&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;detailsDialog.item.flavors &amp;&amp; detailsDialog.item.flavors.length &gt; 0 &amp;&amp; !detailsDialog.item.number &quot;</span> </span></span><br><span class="line"><span class="tag">@<span class="attr">click</span> =<span class="string">&quot;chooseFlavorClick(detailsDialog.item)&quot;</span>&gt;</span>选择规格<span class="tag">&lt;/<span class="name">div</span>&gt;</span>               </span><br></pre></td></tr></table></figure>
<p>通过代码我们可以看出，选择规格按钮，是根据服务端返回数据中是否有flavors字段来决定的，但我们返回的是一个<code>List&lt;Dish&gt;</code>，其中并没有<code>flavors</code>属性，所以我们需要修改前面的方法返回值为<code>DishDto</code>，<code>DishDto</code>继承了<code>Dish</code>，且新增了<code>flavors</code>属性</p>
<h2 id="选择规格"><a href="#选择规格" class="headerlink" title="选择规格"></a>选择规格</h2><ul>
<li>前面我们已经分析了该怎么做，那么现在我们直接来修改原本的list方法<br>具体代码如下，其实跟前面的部分代码也是类似的，如果还是不清楚具体的代码执行流程，可以打个断点自己看看</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">DishController</button></li><li class="tab"><button type="button" data-href="#tab1-2">DishService</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询菜品</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; dishServiceByList = dishService.getByList(dish);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(dishServiceByList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;DishDto&gt; <span class="title function_">getByList</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>菜品展示功能就做好了<br><img src="https://pic.imgdb.cn/item/64773485f024cca17301ffdb.jpg"></li>
</ul>
<h1 id="套餐展示"><a href="#套餐展示" class="headerlink" title="套餐展示"></a>套餐展示</h1><ul>
<li>关于菜品的展示我们就完成了，但是套餐和菜品用的并不是同一个controller，所以我们还需要来完善套餐展示</li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/setmeal/list?categoryId=1413342269393674242&status=1">http://localhost/setmeal/list?categoryId=1413342269393674242&amp;status=1</a><br>请求方法: GET</p>
</blockquote>
<ul>
<li>那么我们现在就在<code>SetmealController</code>中编写对应的方法<br>由于套餐没有口味数据，所以开发起来还是比较简单的</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">SetmealController</button></li><li class="tab"><button type="button" data-href="#tab1-2">SetmealService</button></li><li class="tab"><button type="button" data-href="#tab1-3">SetmealServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据条件查询套餐数据</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;List&lt;Setmeal&gt;&gt; <span class="title function_">list</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, setmeal);</span><br><span class="line"></span><br><span class="line">       List&lt;Setmeal&gt; byList = setmealService.getByList(setmeal);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.success(byList);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据条件查询套餐</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  List&lt;Setmeal&gt; <span class="title function_">getByList</span><span class="params">(Setmeal setmeal)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Setmeal&gt; <span class="title function_">getByList</span><span class="params">(Setmeal setmeal)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Setmeal&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//过滤，</span></span><br><span class="line">        queryWrapper.in(setmeal.getCategoryId() != <span class="literal">null</span>, Setmeal::getCategoryId, setmeal.getCategoryId() );</span><br><span class="line">        queryWrapper.eq(setmeal.getStatus() != <span class="literal">null</span>, Setmeal::getStatus, <span class="number">1</span>);</span><br><span class="line">        queryWrapper.orderByDesc(Setmeal::getUpdateTime);</span><br><span class="line">        List&lt;Setmeal&gt; list = setmealService.list(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p><img src="https://pic.imgdb.cn/item/6477353cf024cca173037e4d.jpg"></p>
<h1 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h1><h2 id="需求分析-10"><a href="#需求分析-10" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li><p>移动端用户可以将菜品&#x2F;套餐添加到购物车</p>
</li>
<li><p>对于菜品来说，如果设置了口味信息，则需要选择规格后才能加入购物车（前端实现）</p>
</li>
<li><p>对于套餐来说，可以直接点击当前套餐加入购物车</p>
</li>
<li><p>在购物车中可以修改菜品&#x2F;套餐的数量，也可以清空购物车</p>
</li>
<li><p>梳理交互过程</p>
</li>
</ul>
<ol>
<li>点击加入购物车按钮，页面发送ajax请求，请求服务端，将菜品&#x2F;套餐添加到购物车</li>
<li>点击购物车图标，页面发送ajax请求，请求服务端，查询购物车中的菜品和套餐</li>
<li>点击清空购物车按钮，页面发送ajax请求，请求服务端来执行清空购物车操作</li>
</ol>
<h2 id="准备工作-5"><a href="#准备工作-5" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开发业务功能之前，先将需要用到的类和接口的基本结构都创建好</p>
<ol>
<li>实体类ShoppingCart<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long DishId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">     <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Mapper接口ShoppingCartMapper<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务层接口ShoppingCartService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShoppingCart&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务层实现类ShoppingCartServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ShoppingCartMapper, ShoppingCart&gt; <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>控制层ShoppingCartController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/shoppingCart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="代码开发-6"><a href="#代码开发-6" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h3><p><img src="https://pic.imgdb.cn/item/64773606f024cca17304716a.jpg"></p>
<ul>
<li><p>点击<code>加入购物车</code>，页面发送请求，请求路径<code>/shoppingCart/add</code>，请求方式<code>POST</code></p>
<blockquote>
<p>请求网址: <a href="http://localhost/shoppingCart/add">http://localhost/shoppingCart/add</a><br>请求方法: POST</p>
</blockquote>
</li>
<li><p>页面将数据以json也是发送给服务端</p>
</li>
<li><p>那么我们在ShoppingCartController添加对应的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;ShoppingCart&gt; <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;购物车添加信息：&#123;&#125;&quot;</span>,shoppingCart);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完善逻辑</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">ShoppingCartController</button></li><li class="tab"><button type="button" data-href="#tab1-2">ShoppingCartService</button></li><li class="tab"><button type="button" data-href="#tab1-3">shoppingCartServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增购物车</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,shoppingCart);</span><br><span class="line">       <span class="type">ShoppingCart</span> <span class="variable">add</span> <span class="operator">=</span> shoppingCartService.add(shoppingCart);</span><br><span class="line">       <span class="keyword">return</span> R.success(add);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加购物车</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   ShoppingCart <span class="title function_">add</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 购物车新增</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ShoppingCart <span class="title function_">add</span><span class="params">(ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">       <span class="comment">//获取当前用户id</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">       <span class="comment">//装进去</span></span><br><span class="line">       shoppingCart.setUserId(currentId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line">       <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">       <span class="comment">//判断放进购物车的是套餐还是菜品</span></span><br><span class="line">       <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//菜品</span></span><br><span class="line">           queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//套餐</span></span><br><span class="line">           queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询套餐或菜品是否已经在购物车</span></span><br><span class="line">       <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (cartServiceOne != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//已经存在</span></span><br><span class="line">           <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">           cartServiceOne.setNumber(number + <span class="number">1</span>);</span><br><span class="line">           shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//不存在,添加</span></span><br><span class="line">           shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">           shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">           shoppingCartService.save(shoppingCart);</span><br><span class="line">           cartServiceOne = shoppingCart;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> cartServiceOne;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>功能测试<br>重启服务器，尝试添加购物车，随后去数据库中查询是否有对应数据</li>
</ul>
<h3 id="查看购物车"><a href="#查看购物车" class="headerlink" title="查看购物车"></a>查看购物车</h3><ul>
<li>之前为了不报错，我们将查看购物车的地址换成了一个死数据<br>那现在我们要做的就是换成真数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取购物车内商品的集合</span></span><br><span class="line">function <span class="title function_">cartListApi</span><span class="params">(data)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $axios(&#123;</span><br><span class="line">        <span class="comment">// &#x27;url&#x27;: &#x27;/shoppingCart/list&#x27;,</span></span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: <span class="string">&#x27;/front/cartData.json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;method&#x27;</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        params: &#123;...data&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求路径为<code>/shoppingCart/list</code>，请求方式为<code>GET</code><br>直接来<code>ShoppingCartController</code>中添加对应的方法</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">ShoppingCartController</button></li><li class="tab"><button type="button" data-href="#tab1-2">ShoppingCartService</button></li><li class="tab"><button type="button" data-href="#tab1-3">ShoppingCartServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查看购物车</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> R&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">      List&lt;ShoppingCart&gt; byList = shoppingCartService.getByList();</span><br><span class="line">      <span class="keyword">return</span> R.success(byList);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查看购物车</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   List&lt;ShoppingCart&gt; <span class="title function_">getByList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看购物车</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ShoppingCart&gt; <span class="title function_">getByList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//根据用户id查询购物车</span></span><br><span class="line">        queryWrapper.eq(ShoppingCart::getUserId, BaseContext.getCurrentId());</span><br><span class="line">        queryWrapper.orderByAsc(ShoppingCart::getCreateTime);</span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartService.list(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li><p>现在就可以看到数据了</p>
</li>
<li><p>但是，也不能只可以加不可以减,原理和<code>add</code>差不多，可以自己试试</p>
<blockquote>
<p>请求网址: <a href="http://localhost/shoppingCart/sub">http://localhost/shoppingCart/sub</a><br>请求方法: POST</p>
</blockquote>
</li>
<li><p>代码实现</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">ShoppingCartController</button></li><li class="tab"><button type="button" data-href="#tab1-2">ShoppingCartService</button></li><li class="tab"><button type="button" data-href="#tab1-3">ShoppingCartServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 购物车删除单个</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/sub&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;ShoppingCart&gt; <span class="title function_">sub</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCart shoppingCart)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">ShoppingCart</span> <span class="variable">subShoppingCart</span> <span class="operator">=</span> shoppingCartService.subShoppingCart(shoppingCart);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>  R.success(subShoppingCart);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物车删除单个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ShoppingCart <span class="title function_">subShoppingCart</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除单个购物车</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shoppingCart</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ShoppingCart <span class="title function_">subShoppingCart</span><span class="params">(ShoppingCart shoppingCart)</span> &#123;</span><br><span class="line">       <span class="comment">//获取当前用户id</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"></span><br><span class="line">       LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(ShoppingCart::getUserId, currentId);</span><br><span class="line"></span><br><span class="line">       <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">       <span class="comment">//判断要删除的是菜品还是套餐</span></span><br><span class="line">       <span class="keyword">if</span> (dishId != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//菜品</span></span><br><span class="line">           queryWrapper.eq(ShoppingCart::getDishId, dishId);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//套餐</span></span><br><span class="line">           queryWrapper.eq(ShoppingCart::getSetmealId, shoppingCart.getSetmealId());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">ShoppingCart</span> <span class="variable">cartServiceOne</span> <span class="operator">=</span> shoppingCartService.getOne(queryWrapper);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询是否存在购物车中且数量不等于0</span></span><br><span class="line">       <span class="keyword">if</span> (cartServiceOne != <span class="literal">null</span> &amp;&amp; cartServiceOne.getNumber() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//存在    number - 1</span></span><br><span class="line">           <span class="type">Integer</span> <span class="variable">number</span> <span class="operator">=</span> cartServiceOne.getNumber();</span><br><span class="line">           cartServiceOne.setNumber(number - <span class="number">1</span>);</span><br><span class="line">           shoppingCartService.updateById(cartServiceOne);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//直接删除改条记录</span></span><br><span class="line">           shoppingCartService.remove(queryWrapper);</span><br><span class="line">           cartServiceOne = shoppingCart;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> cartServiceOne;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li>
</ul>
<h3 id="清空购物车"><a href="#清空购物车" class="headerlink" title="清空购物车"></a>清空购物车</h3><ul>
<li>我们点击上图中的清空按钮，请求路径为&#x2F;shoppingCart&#x2F;clean，请求方式为<code>DELETE</code></li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/shoppingCart/clean">http://localhost/shoppingCart/clean</a><br>请求方法: DELETE</p>
</blockquote>
<ul>
<li><p>清空购物车的逻辑倒是比较简单，获取用户<code>id</code>，然后去<code>shopping__cart</code>表中删除对应id的数据即可<br>那么我们现在就来ShoppingCartController中编写对应的方法</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">ShoppingCartController</button></li><li class="tab"><button type="button" data-href="#tab1-2">ShoppingCartService</button></li><li class="tab"><button type="button" data-href="#tab1-3">ShoppingCartServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空购物车</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        shoppingCartService.delete();</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;清空成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 清空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 清空购物车</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">      LambdaQueryWrapper&lt;ShoppingCart&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">      queryWrapper.eq(ShoppingCart::getUserId, BaseContext.getCurrentId());</span><br><span class="line">      shoppingCartService.remove(queryWrapper);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>测试功能，点击清空按钮，购物车数据会消失</p>
</li>
</ul>
<h1 id="用户下单"><a href="#用户下单" class="headerlink" title="用户下单"></a>用户下单</h1><h2 id="需求分析-11"><a href="#需求分析-11" class="headerlink" title="需求分析"></a>需求分析</h2><ul>
<li>移动端用户将菜品或者套餐加入购物车后，可以点击购物车中的去结算按钮，页面跳转到订单确认页面，点击去支付按钮，完成下单操作</li>
</ul>
<h2 id="梳理交互过程-7"><a href="#梳理交互过程-7" class="headerlink" title="梳理交互过程"></a>梳理交互过程</h2><ul>
<li>在购物车中点击去结算按钮，页面跳转到订单确认页面</li>
<li>在订单确认页面中，发送ajax请求，请求服务端，获取当前登录用户的默认地址</li>
<li>在订单确认页面，发送ajax请求，请求服务端，获取当前登录用户的购物车数据</li>
<li>在订单确认页面点击去支付按钮，发送ajax请求，请求服务端，完成下单操作</li>
</ul>
<h2 id="准备工作-6"><a href="#准备工作-6" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li><p>实体类<code>Orders</code>和<code>OrderDetail</code></p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Orders</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrderDetaill</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单号</span></span><br><span class="line">    <span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单状态 1待付款，2待派送，3已派送，4已完成，5已取消</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址id</span></span><br><span class="line">    <span class="keyword">private</span> Long addressBookId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下单时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime orderTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//结账时间</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime checkoutTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//支付方式 1微信，2支付宝</span></span><br><span class="line">    <span class="keyword">private</span> Integer payMethod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实收金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备注</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收货人</span></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单明细</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetail</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单id</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜品id</span></span><br><span class="line">    <span class="keyword">private</span> Long dishId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="keyword">private</span> Long setmealId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//口味</span></span><br><span class="line">    <span class="keyword">private</span> String dishFlavor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//金额</span></span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>Mapper接口<code>OrderMapper</code>、<code>OrderDetailMapper</code></p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrdersMapper</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrderDetaillMapper</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMpper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDetailMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;OrderDetail&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>业务层接口<code>OrderService</code>、<code>OrderDetailService</code></p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrderService</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrderDetailService</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Orders&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderDetailMapper, OrderDetail&gt; <span class="keyword">implements</span> <span class="title class_">OrderDetailService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>控制层<code>OrderController</code>、<code>OrderDetailController</code></p>
</li>
</ol>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrderController</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrderDetailController</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orderDetail&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDetailController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderDetailService orderDetailService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="前端分析-1"><a href="#前端分析-1" class="headerlink" title="前端分析"></a>前端分析</h2><ul>
<li>我们点击去结算按钮，然后查看发送的请求url和方式</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/64773bf0f024cca1730ab3dc.jpg"></p>
<blockquote>
<p>请求网址: <a href="http://localhost/addressBook/default">http://localhost/addressBook/default</a><br>请求方法: GET</p>
</blockquote>
<ul>
<li>页面跳转到确认订单页面，发送ajax请求，用于获取用户的默认地址，但是请求失败，服务端没有对应的映射</li>
<li>根据请求路径<code>/addressBook/default</code>，请求方式<code>GET</code>自己来编写方法，进入到<code>AddressBookController</code>编写</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">AddressBookController</button></li><li class="tab"><button type="button" data-href="#tab1-2">AddressBookService</button></li><li class="tab"><button type="button" data-href="#tab1-3">AddressBookServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 订单界面显示默认地址</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@GetMapping(&quot;/default&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">dafalutAddressBook</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="type">AddressBook</span> <span class="variable">defalut</span> <span class="operator">=</span> addressBookService.defalut();</span><br><span class="line">     <span class="keyword">return</span> R.success(defalut);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付界面显示默认地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AddressBook <span class="title function_">defalut</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 支付界面显示默认地址</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> AddressBook <span class="title function_">defalut</span><span class="params">()</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;AddressBook&gt; queryWrappe = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrappe.eq(AddressBook::getUserId, BaseContext.getCurrentId());</span><br><span class="line">       queryWrappe.eq(AddressBook::getIsDefault, <span class="number">1</span>);</span><br><span class="line">       <span class="comment">//根据id在地址界面找到该id且 is_default 为 1 的地址</span></span><br><span class="line">       <span class="type">AddressBook</span> <span class="variable">addressBookServiceOne</span> <span class="operator">=</span> addressBookService.getOne(queryWrappe);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == addressBookServiceOne) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;没有找到地址&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> addressBookServiceOne;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


<ul>
<li>重启服务器，再次点击去结算按钮，这下就能看到地址了<br><img src="https://pic.imgdb.cn/item/64773cfdf024cca1730bad9f.jpg"></li>
</ul>
<h2 id="结算"><a href="#结算" class="headerlink" title="结算"></a>结算</h2><ul>
<li>点击上图中的去结算按钮，查看发送的请求url与请求方式<blockquote>
<p>请求网址: <a href="http://localhost/order/submit">http://localhost/order/submit</a><br>请求方法: POST</p>
</blockquote>
</li>
<li>提交给服务端的数据格式为JSON</li>
<li>请求路径<code>/order/submit</code>，请求方式<code>POST</code>，那么我们现在就去<code>OrderController</code>中开发对应的功能<br>具体的submit方法我们放在OrderService写，OrderController调用写好的<code>submit</code>方法就好了</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrderController</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrderService</button></li><li class="tab"><button type="button" data-href="#tab1-3">OrderServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">    * 支付</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">submit</span><span class="params">(<span class="meta">@RequestBody</span> Orders orders)</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;订单数据：&#123;&#125;&quot;</span>,orders);</span><br><span class="line">       ordersService.submit(orders);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orders</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(Orders orders)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;ShoppingCart&gt; shoppingCartLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//根据当前用户id查询其购物车数据</span></span><br><span class="line">        shoppingCartLambdaQueryWrapper.eq(userId != <span class="literal">null</span>, ShoppingCart::getUserId, userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCarts = shoppingCartService.list(shoppingCartLambdaQueryWrapper);</span><br><span class="line">        <span class="comment">//判断一下购物车是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (shoppingCarts == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;购物车数据为空，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断一下地址是否有误</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">addressBookId</span> <span class="operator">=</span> orders.getAddressBookId();</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(addressBookId);</span><br><span class="line">        <span class="keyword">if</span> (addressBookId == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息有误，不能下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取用户信息，为了后面赋值</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getById(userId);</span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> IdWorker.getId();</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//向订单细节表设置属性</span></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetailList= shoppingCarts.stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">            orderDetail.setOrderId(orderId);</span><br><span class="line">            orderDetail.setName(item.getName());</span><br><span class="line">            orderDetail.setImage(item.getImage());</span><br><span class="line">            orderDetail.setDishId(item.getDishId());</span><br><span class="line">            orderDetail.setSetmealId(item.getSetmealId());</span><br><span class="line">            orderDetail.setDishFlavor(item.getDishFlavor());</span><br><span class="line">            orderDetail.setNumber(item.getNumber());</span><br><span class="line">            orderDetail.setAmount(item.getAmount());</span><br><span class="line">            amount.addAndGet(item.getAmount().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(item.getNumber())).intValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> orderDetail;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向订单表设置属性</span></span><br><span class="line">        orders.setId(orderId);</span><br><span class="line">        orders.setNumber(String.valueOf(orderId));</span><br><span class="line">        orders.setStatus(<span class="number">2</span>);</span><br><span class="line">        orders.setUserId(userId);</span><br><span class="line">        orders.setAddressBookId(addressBookId);</span><br><span class="line">        orders.setOrderTime(LocalDateTime.now());</span><br><span class="line">        orders.setCheckoutTime(LocalDateTime.now());</span><br><span class="line">        orders.setAmount(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(amount.get()));</span><br><span class="line">        orders.setPhone(addressBook.getPhone());</span><br><span class="line">        orders.setUserName(user.getName());</span><br><span class="line">        orders.setConsignee(addressBook.getConsignee());</span><br><span class="line">        orders.setAddress(</span><br><span class="line">                (addressBook.getProvinceName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getProvinceName())+</span><br><span class="line">                        (addressBook.getCityName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getCityName())+</span><br><span class="line">                        (addressBook.getDistrictName() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getDistrictName())+</span><br><span class="line">                        (addressBook.getDetail() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span>:addressBook.getDetail())</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据查询到的购物车数据，对订单表插入数据（1条）</span></span><br><span class="line">        <span class="built_in">super</span>.save(orders);</span><br><span class="line">        <span class="comment">//根据查询到的购物车数据，对订单明细表插入数据（多条）</span></span><br><span class="line">        orderDetailService.saveBatch(orderDetailList);</span><br><span class="line">        <span class="comment">//清空购物车数据</span></span><br><span class="line">        shoppingCartService.remove(shoppingCartLambdaQueryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li><p>虽然代码量很多，但是大部分都是赋值操作，由于购物车数据与订单数据和订单详情的重复字段不是很多，所以这里就没采用<code>BeanUtils.copyProperties()</code>来复制属性了，而是自己一个一个set的</p>
</li>
<li><p>重启服务器，测试结算按钮，看到如下页面就说明大功告成</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/64773e2ff024cca1730d0798.jpg"></p>
<h1 id="移动端补充功能"><a href="#移动端补充功能" class="headerlink" title="移动端补充功能"></a>移动端补充功能</h1><h2 id="历史订单功能"><a href="#历史订单功能" class="headerlink" title="历史订单功能"></a>历史订单功能</h2><ul>
<li><p>当我们访问个人中心&#x2F;历史订单的时候，都会发送请求</p>
<blockquote>
<p>请求网址: <a href="http://localhost/order/userPage?page=1&pageSize=1">http://localhost/order/userPage?page=1&amp;pageSize=1</a><br>请求方法: GET</p>
</blockquote>
</li>
<li><p>是个分页的请求，我们之前把订单数据存进了order表中，那么该功能，大概率就是从表中查出数据然后返回给前端</p>
</li>
<li><p>直接来OrderController中编写对应的方法</p>
<ul>
<li>在此之前，还是需要一个OrderDto<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrdersDto</span> <span class="keyword">extends</span> <span class="title class_">Orders</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String consignee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderDetail&gt; orderDetails;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Controller</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrderController</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrdersService</button></li><li class="tab"><button type="button" data-href="#tab1-3">OrdersServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userPage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(Integer page,Integer pageSize)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,page,pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> ordersService.pageInfo(page, pageSize);</span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 订单分页</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Page <span class="title function_">pageInfo</span><span class="params">(Integer page, Integer pageSize)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">pageInfo</span><span class="params">(Integer page, Integer pageSize)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询当前用户id订单数据</span></span><br><span class="line">        queryWrapper.eq(userId != <span class="literal">null</span>, Orders::getUserId, userId);</span><br><span class="line">        <span class="comment">//按时间降序排序</span></span><br><span class="line">        queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line">        ordersService.page(pageInfo, queryWrapper);</span><br><span class="line">        List&lt;OrdersDto&gt; list = pageInfo.getRecords().stream().map((item) -&gt; &#123;</span><br><span class="line">            <span class="type">OrdersDto</span> <span class="variable">ordersDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">            <span class="comment">//获取orderId,然后根据这个id，去orderDetail表中查数据</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> item.getId();</span><br><span class="line">            LambdaQueryWrapper&lt;OrderDetail&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            wrapper.eq(OrderDetail::getOrderId, orderId);</span><br><span class="line">            List&lt;OrderDetail&gt; details = orderDetailService.list(wrapper);</span><br><span class="line">            BeanUtils.copyProperties(item, ordersDto);</span><br><span class="line">            <span class="comment">//之后set一下属性</span></span><br><span class="line">            ordersDto.setOrderDetails(details);</span><br><span class="line">            <span class="keyword">return</span> ordersDto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        BeanUtils.copyProperties(pageInfo, ordersDtoPage, <span class="string">&quot;records&quot;</span>);</span><br><span class="line">        ordersDtoPage.setRecords(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ordersDtoPage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>效果</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/647754a0f024cca1732b3ad3.jpg"></p>
<h2 id="登出功能"><a href="#登出功能" class="headerlink" title="登出功能"></a>登出功能</h2><ul>
<li>这个应该算简单的了吧，点击退出登录，请求如下</li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/user/loginout">http://localhost/user/loginout</a><br>请求方法: POST</p>
</blockquote>
<ul>
<li>请求路径<code>/user/loginout</code>，请求方式<code>POST</code><br>所以我们应该去UserController中编写对应的方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/loginout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Result.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="修改删除地址"><a href="#修改删除地址" class="headerlink" title="修改删除地址"></a>修改删除地址</h2><ul>
<li><p><code>数据回显</code></p>
</li>
<li><p>点击地址选项卡的<code>铅笔图案</code>，跳转到修改地址页面，发送请求</p>
</li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/addressBook/1579828298672885762">http://localhost/addressBook/1579828298672885762</a><br>请求方法: GET</p>
</blockquote>
<ul>
<li>请求方式是<code>GET</code>，而且此次操作是<code>数据回显</code></li>
<li>直接来<code>AddressBookController</code>中编写对应的方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询地址信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;AddressBook&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">            R.error(<span class="string">&quot;请重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookService.getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(addressBook);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6477455af024cca1731789f3.jpg"></p>
<ul>
<li><p>修改地址</p>
</li>
<li><p>点击上图中的<code>保存地址</code>按钮，查看发送的请求</p>
</li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/addressBook">http://localhost/addressBook</a><br>请求方法: PUT</p>
</blockquote>
<ul>
<li>请求方式<code>PUT</code>，我们直接来<code>AddressBookController</code>中编写对应的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> addressBook</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updateAddressBook</span><span class="params">(<span class="meta">@RequestBody</span> AddressBook addressBook)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (addressBook == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CustomException</span>(<span class="string">&quot;地址信息不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            addressBookService.updateById(addressBook);</span><br><span class="line">            <span class="keyword">return</span> R.success(<span class="string">&quot;地址修改成功&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>删除地址</p>
</li>
<li><p>点击上图中的<code>删除地址</code>按钮，查看发送的请求</p>
</li>
</ul>
<p>请求网址: <a href="http://localhost/addressBook?ids=1579828298672885762">http://localhost/addressBook?ids=1579828298672885762</a><br>请求方法: DELETE</p>
<ul>
<li>我们直接来<code>AddressBookController</code>中编写对应的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">deleteById</span><span class="params">(<span class="meta">@RequestParam</span> Long ids)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;ids:&#123;&#125;&quot;</span>, ids);</span><br><span class="line">        <span class="keyword">if</span> (ids == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;删除失败，请重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addressBookService.removeById(ids);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>至此，地址修改的相关功能我们就完成了</li>
</ul>
<h2 id="再来一单"><a href="#再来一单" class="headerlink" title="再来一单"></a>再来一单</h2><ul>
<li><p>这个功能其实比较隐晦，因为当订单状态为已完成时才会出现这个按钮（修改orders表中的status字段为4）</p>
</li>
<li><p>下图是我改完了之后的效果<br><img src="https://pic.imgdb.cn/item/6477567af024cca1732d08ba.jpg"></p>
</li>
<li><p>点击<code>再来一单</code>，查看发送的请求</p>
<blockquote>
<p>请求网址: <a href="http://localhost/order/again">http://localhost/order/again</a><br>请求方法: POST</p>
</blockquote>
</li>
<li><p>请求路径为<code>/order/again</code>，请求方式为<code>POST</code>，数据只携带了一个json格式的<code>id</code>数据，根据常识，这个id只能是orders表中的订单id，即<code>order_id</code></p>
</li>
<li><p>手里现在能用的数据只有一个order_id，要根据它去查询对应的下单信息</p>
</li>
<li><p>接下来我们分析一下这个再来一单具体都会做什么操作</p>
</li>
<li><p>看前端代码就是跳转至index页面（下单结算页面）</p>
</li>
<li><p>在外卖APP中点再来一单，会直接将当前订单的数据添加到购物车，并跳转到类似如下的页面<br><img src="https://pic.imgdb.cn/item/647756fff024cca1732d9155.jpg"></p>
</li>
<li><p>具体实现思路（参考一下当初我们怎么添加购物车的）</p>
<ul>
<li>之前是我们手动选择数据（菜品&#x2F;套餐）添加到购物车，现在相当于我们手里有个发票，想办法看看上一单都买了啥，然后复刻一遍</li>
</ul>
</li>
<li><p>分析完毕之后，我们来<code>OrderController</code>编写对应的方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrderController</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrderService</button></li><li class="tab"><button type="button" data-href="#tab1-3">OrderServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 再来一单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/again&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">again</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line">        ordersService.again(map);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;一单不够炫！那就再来一单！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 再来一单</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">again</span><span class="params">(Map&lt;String,String&gt; map)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 再来一单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">again</span><span class="params">(Map&lt;String,String&gt; map)</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        LambdaQueryWrapper&lt;OrderDetail&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> Long.valueOf(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="comment">//查询订单的口味细节数据</span></span><br><span class="line">        queryWrapper.eq(OrderDetail::getOrderId, id);</span><br><span class="line">        List&lt;OrderDetail&gt; list = orderDetailService.list(queryWrapper);</span><br><span class="line">        List&lt;ShoppingCart&gt; collect = list.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">            <span class="comment">//Copy对应属性值</span></span><br><span class="line">            BeanUtils.copyProperties(item, shoppingCart);</span><br><span class="line">            <span class="comment">//设置一下userId</span></span><br><span class="line">            shoppingCart.setUserId(currentId);</span><br><span class="line">            <span class="comment">//设置创建时间为当前时间</span></span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            <span class="keyword">return</span> shoppingCart;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//加入购物车</span></span><br><span class="line">        shoppingCartService.saveBatch(collect);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<p>– 完成</p>
<h2 id="点击图片查看套餐详情"><a href="#点击图片查看套餐详情" class="headerlink" title="点击图片查看套餐详情"></a>点击图片查看套餐详情</h2><blockquote>
<p>请求网址: <a href="http://localhost/setmeal/dish/1579044544635232258">http://localhost/setmeal/dish/1579044544635232258</a><br>请求方法: GET</p>
</blockquote>
<ul>
<li><p>请求路径为<code>/setmeal/dish/&#123;id&#125;</code>，请求方式为<code>GET</code></p>
</li>
<li><p>来<code>SetmealController</code>中编写对应的方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">SetmealController</button></li><li class="tab"><button type="button" data-href="#tab1-2">SetmealService</button></li><li class="tab"><button type="button" data-href="#tab1-3">SetmealServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查看具体信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/dish/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;DishDto&gt;&gt; <span class="title function_">showSetmealDish</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;DishDto&gt; show = setmealService.show(id);</span><br><span class="line">        <span class="keyword">return</span> R.success(show);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查看具体信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   List&lt;DishDto&gt; <span class="title function_">show</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点击显示具体信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;DishDto&gt; <span class="title function_">show</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper =<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//手里的数据只有setmealId</span></span><br><span class="line">       queryWrapper.eq(SetmealDish::getSetmealId,id);</span><br><span class="line">        <span class="comment">//查询数据</span></span><br><span class="line">        List&lt;SetmealDish&gt; records = setmealDishService.list(queryWrapper);</span><br><span class="line">        List&lt;DishDto&gt; list = records.stream().map(item -&gt; &#123;</span><br><span class="line">            <span class="type">DishDto</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishDto</span>();</span><br><span class="line">            <span class="comment">//查询数据</span></span><br><span class="line">            BeanUtils.copyProperties(item, dto);</span><br><span class="line">            <span class="comment">//获取菜品id</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> item.getDishId();</span><br><span class="line">            <span class="comment">//根据菜品id获取具体菜品数据，这里要自动装配 dishService</span></span><br><span class="line">            <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishService.getById(dishId);</span><br><span class="line"></span><br><span class="line">            BeanUtils.copyProperties(dish, dto);</span><br><span class="line">            <span class="keyword">return</span> dto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<p><img src="https://pic.imgdb.cn/item/64776044f024cca173371960.jpg"></p>
<blockquote>
<p>到此为止，移动端的功能应该都实现了</p>
</blockquote>
<h1 id="后台系统补充功能"><a href="#后台系统补充功能" class="headerlink" title="后台系统补充功能"></a>后台系统补充功能</h1><h2 id="菜品启售-x2F-停售"><a href="#菜品启售-x2F-停售" class="headerlink" title="菜品启售&#x2F;停售"></a>菜品启售&#x2F;停售</h2><ul>
<li>点击<code>停售</code>按钮，查看发送的请求</li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/dish/status/0?ids=1578942037036703745">http://localhost/dish/status/0?ids=1578942037036703745</a><br>请求方法: POST</p>
</blockquote>
<ul>
<li><p>当前商品为启售状态，其status为1，但点击停售按钮时，发送的status为0，前端是直接对这个status取反了，我们直接用发送的这个status来更新我们的商品状态就好了，不用在后端再次进行判断</p>
</li>
<li><p>来DishController中编写对应的方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">DishController</button></li><li class="tab"><button type="button" data-href="#tab1-2">DishService</button></li><li class="tab"><button type="button" data-href="#tab1-3">DishServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量启售，停售</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updateStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;ids:&#123;&#125;,status:&#123;&#125;&quot;</span>, ids, status);</span><br><span class="line">       dishService.updateStatus(status, ids);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;修改完成&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改状态</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(Integer status, List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量停售，启售</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(Integer status, List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">       LambdaUpdateWrapper&lt;Dish&gt; updateWrapper = <span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">       updateWrapper.in(ids != <span class="literal">null</span>, Dish::getId, ids);</span><br><span class="line">       updateWrapper.set(Dish::getStatus, status);</span><br><span class="line">       dishService.update(updateWrapper);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="菜品批量删除"><a href="#菜品批量删除" class="headerlink" title="菜品批量删除"></a>菜品批量删除</h2><ul>
<li>这个其实就是传进来了一个<code>ids</code>的数组，在上面的方法上稍作修改就好了</li>
<li>和前面删除套餐同理</li>
</ul>
<blockquote>
<p>那么至此，关于菜品的操作功能，就都完善了</p>
</blockquote>
<h2 id="套餐批量启售-x2F-停售"><a href="#套餐批量启售-x2F-停售" class="headerlink" title="套餐批量启售&#x2F;停售"></a>套餐批量启售&#x2F;停售</h2><ul>
<li>点击批量启售，查看发送的请求</li>
</ul>
<blockquote>
<p>请求网址: <a href="http://localhost/setmeal/status/1?ids=1580361600576114689">http://localhost/setmeal/status/1?ids=1580361600576114689</a><br>请求方法: POST</p>
</blockquote>
<ul>
<li>跟之前的菜品批量启售&#x2F;停售没有太大区别</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">SetmealController</button></li><li class="tab"><button type="button" data-href="#tab1-2">SetmealService</button></li><li class="tab"><button type="button" data-href="#tab1-3">SetmealServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量停售，起售</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updateStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status, <span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">       setmealService.updateStatus(status, ids);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;修改状态成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 批量停售,起售</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(Integer status, List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 批量停售、启售</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(Integer status, List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">       List&lt;Setmeal&gt; setmeals = setmealService.listByIds(ids);</span><br><span class="line">       List&lt;Setmeal&gt; list = setmeals.stream().map(item -&gt; &#123;</span><br><span class="line">           item.setStatus(status);</span><br><span class="line">           <span class="keyword">return</span> item;</span><br><span class="line">       &#125;).collect(Collectors.toList());</span><br><span class="line">       setmealService.updateBatchById(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="套餐修改"><a href="#套餐修改" class="headerlink" title="套餐修改"></a>套餐修改</h2><ul>
<li><p><code>数据回显</code></p>
</li>
<li><p>点击修改按钮，查看发送的请求</p>
<blockquote>
<p>请求网址: <a href="http://localhost/setmeal/1580361496716759041">http://localhost/setmeal/1580361496716759041</a><br>请求方法: GET</p>
</blockquote>
</li>
<li><p>这个请求大概率是用于处理数据回显的，请求路径&#x2F;setmeal&#x2F;{setmealId}，请求方式GET</p>
</li>
<li><p>普通的Setmeal实体类肯定是不够用的，还是要用到SetmealDto</p>
</li>
<li><p>直接来SetmealController中编写对应的方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">SetmealController</button></li><li class="tab"><button type="button" data-href="#tab1-2">SetmealService</button></li><li class="tab"><button type="button" data-href="#tab1-3">SetmealServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;SetmealDto&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">       <span class="type">SetmealDto</span> <span class="variable">byIdWithDish</span> <span class="operator">=</span> setmealService.getByIdWithDish(id);</span><br><span class="line">       <span class="keyword">return</span> R.success(byIdWithDish);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据id查询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> SetmealDto <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> SetmealDto <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">       <span class="comment">//先查到 套餐信息</span></span><br><span class="line">       <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(id);</span><br><span class="line"></span><br><span class="line">       <span class="type">SetmealDto</span> <span class="variable">setmealDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealDto</span>();</span><br><span class="line">       <span class="comment">//对象copy</span></span><br><span class="line">       BeanUtils.copyProperties(setmeal, setmealDto);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//通过套餐信息查找 套餐中的菜品表</span></span><br><span class="line">       LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(id != <span class="literal">null</span>, SetmealDish::getSetmealId, id);</span><br><span class="line">       <span class="comment">//将菜品存入集合</span></span><br><span class="line">       List&lt;SetmealDish&gt; list = setmealDishService.list(queryWrapper);</span><br><span class="line">       <span class="comment">//集合存入 dto对象</span></span><br><span class="line">       setmealDto.setSetmealDishes(list);</span><br><span class="line">       <span class="keyword">return</span> setmealDto;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li><p>效果<br><img src="https://pic.imgdb.cn/item/64776531f024cca1733c8fd6.jpg"></p>
</li>
<li><p>套餐修改</p>
<ul>
<li>点击<code>保存</code>按钮，查看发送的请求<blockquote>
<p>请求网址: <a href="http://localhost/setmeal">http://localhost/setmeal</a><br>请求方法: PUT</p>
</blockquote>
</li>
</ul>
</li>
<li><p>请求路径&#x2F;setmeal，请求方式PUT</p>
</li>
<li><p>那么我们直接来SetmealController中编写对应的方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">SetmealController</button></li><li class="tab"><button type="button" data-href="#tab1-2">SetmealService</button></li><li class="tab"><button type="button" data-href="#tab1-3">SetmealServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">updateWithDish</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDto setmealDto)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;s:&#123;&#125;&quot;</span>, setmealDto);</span><br><span class="line">        setmealService.updateWithDish(setmealDto);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;修改套餐成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDto setmealDto)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> setmealDto</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithDish</span><span class="params">(SetmealDto setmealDto)</span> &#123;</span><br><span class="line">       <span class="comment">//先修改 套餐表中的信息</span></span><br><span class="line">       <span class="built_in">this</span>.updateById(setmealDto);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将 setmealDish 表的数据删除，对 setmealDish表 delete操作</span></span><br><span class="line">       <span class="comment">//创建构造器对象</span></span><br><span class="line">       LambdaQueryWrapper&lt;SetmealDish&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//过滤</span></span><br><span class="line">       queryWrapper.eq(setmealDto.getId() != <span class="literal">null</span>, SetmealDish::getSetmealId, setmealDto.getId());</span><br><span class="line">       <span class="comment">//执行删除操作</span></span><br><span class="line">       setmealDishService.remove(queryWrapper);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//再将 新的数据 传入 setmealDish 表  inert 操作</span></span><br><span class="line">       <span class="comment">//获取前端传回的套餐菜品数据</span></span><br><span class="line">       List&lt;SetmealDish&gt; setmealDishes = setmealDto.getSetmealDishes();</span><br><span class="line">       List&lt;SetmealDish&gt; list = setmealDishes.stream().map(item -&gt; &#123;</span><br><span class="line">           <span class="comment">//将 dto中的套餐id ，传入 setmealDish 中的 套餐id</span></span><br><span class="line">           item.setSetmealId(setmealDto.getId());</span><br><span class="line">           <span class="keyword">return</span> item;</span><br><span class="line">       &#125;).collect(Collectors.toList());</span><br><span class="line">       <span class="comment">//执行添加操作</span></span><br><span class="line">       setmealDishService.saveBatch(list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="订单明细"><a href="#订单明细" class="headerlink" title="订单明细"></a>订单明细</h2><ul>
<li><p>点击订单明细，输入查询条件，查看发送的请求</p>
<blockquote>
<p>请求网址: <a href="http://localhost/order/page?page=1&pageSize=10&number=1580166484741677057&beginTime=2022-10-19%2000:00:00&endTime=2022-11-16%2023:59:59">http://localhost/order/page?page=1&amp;pageSize=10&amp;number=1580166484741677057&amp;beginTime=2022-10-19%2000%3A00%3A00&amp;endTime=2022-11-16%2023%3A59%3A59</a><br>请求方法: GET</p>
</blockquote>
</li>
<li><p>在前面，写过一个移动端的历史订单功能，其实跟这个差不多，直接把代码搬过来，然后改改就好了</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrderController</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrdersService</button></li><li class="tab"><button type="button" data-href="#tab1-3">OrdersServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>后台这里，查询所有的用户数据就行，也就不用指定userId<br>但是需要判断输入的<code>订单号</code>和<code>时间段</code>，这个要写动态SQL，不过我们可以用<code>MP</code>来帮我们完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订单分页</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> beginTime</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> R&lt;Page&lt;OrdersDto&gt;&gt; <span class="title function_">page</span><span class="params">(Integer page,Integer pageSize,Long number,String beginTime,String endTime)</span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,page,pageSize,number,beginTime,endTime);</span><br><span class="line">      Page&lt;OrdersDto&gt; dtoPage = ordersService.page(page, pageSize, number, beginTime, endTime);</span><br><span class="line">      <span class="keyword">return</span> R.success(dtoPage);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订单明细</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> beginTime</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Page&lt;OrdersDto&gt; <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, Long number, String beginTime, String endTime)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订单明细</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> number</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> beginTime</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Page&lt;OrdersDto&gt; <span class="title function_">page</span><span class="params">(Integer page, Integer pageSize, Long number, String beginTime, String endTime)</span> &#123;</span><br><span class="line"></span><br><span class="line">      Page&lt;Orders&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line">      Page&lt;OrdersDto&gt; ordersDtoPage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(page, pageSize);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//构建条件构造器</span></span><br><span class="line">      LambdaQueryWrapper&lt;Orders&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">      <span class="comment">//过滤</span></span><br><span class="line">      queryWrapper.eq(number != <span class="literal">null</span>, Orders::getId, number);</span><br><span class="line">      <span class="comment">//排序</span></span><br><span class="line">      queryWrapper.orderByDesc(Orders::getOrderTime);</span><br><span class="line">      <span class="comment">//时间段，大于开始，小于结束</span></span><br><span class="line">      queryWrapper.gt(!StringUtils.isEmpty(beginTime), Orders::getOrderTime, beginTime)</span><br><span class="line">              .lt(!StringUtils.isEmpty(endTime), Orders::getOrderTime, endTime);</span><br><span class="line">      ordersService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">      List&lt;Orders&gt; records = pageInfo.getRecords();</span><br><span class="line"></span><br><span class="line">      BeanUtils.copyProperties(pageInfo,ordersDtoPage,<span class="string">&quot;records&quot;</span>);</span><br><span class="line"></span><br><span class="line">      List&lt;OrdersDto&gt; collect = records.stream().map(item -&gt; &#123;</span><br><span class="line">          <span class="type">OrdersDto</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrdersDto</span>();</span><br><span class="line">          BeanUtils.copyProperties(item, dto);</span><br><span class="line">          <span class="comment">//获取orderId,然后根据这个id，去orderDetail表中查数</span></span><br><span class="line">          <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> item.getId();</span><br><span class="line">          LambdaQueryWrapper&lt;OrderDetail&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">          wrapper.eq(OrderDetail::getOrderId, id);</span><br><span class="line">          List&lt;OrderDetail&gt; details = orderDetailService.list(wrapper);</span><br><span class="line">          <span class="comment">//set属性</span></span><br><span class="line">          dto.setOrderDetails(details);</span><br><span class="line">          <span class="keyword">return</span> dto;</span><br><span class="line">      &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">      ordersDtoPage.setRecords(collect);</span><br><span class="line">      <span class="keyword">return</span> ordersDtoPage;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


<ul>
<li><p>最终效果如下，输入时间段&#x2F;订单号也能正常查询<br><img src="https://pic.imgdb.cn/item/6477f01bf024cca173baad7a.jpg"></p>
</li>
<li><p>关于用户名字段为null，修改前端代码&#x2F;backend&#x2F;order&#x2F;list.html，找到用户，将userName改成consignee就好了，如果还不显示，清除浏览器缓存再刷新重试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;el-table-column prop=&quot;userName&quot; label=&quot;用户&quot;&gt;&lt;/el-table-column&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;consignee&quot;</span> <span class="attr">label</span>=<span class="string">&quot;用户&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="修改订单状态"><a href="#修改订单状态" class="headerlink" title="修改订单状态"></a>修改订单状态</h2><ul>
<li><p>点击上图中的<code>派送</code>按钮，查看发送的请求</p>
<blockquote>
<p>请求网址: <a href="http://localhost/order">http://localhost/order</a><br>请求方法: PUT</p>
</blockquote>
</li>
<li><p>携带的json数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>   </span><br><span class="line">    status<span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span> </span><br><span class="line">    id<span class="punctuation">:</span> <span class="string">&quot;1580166484741677057&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>直接来OrderController中编写对应的方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">OrderController</button></li><li class="tab"><button type="button" data-href="#tab1-2">OrdersService</button></li><li class="tab"><button type="button" data-href="#tab1-3">OrdersServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更改状态</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PutMapping</span></span><br><span class="line">   <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">start</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">       log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,map);</span><br><span class="line">       ordersService.start(map);</span><br><span class="line">       <span class="keyword">return</span> R.success(<span class="string">&quot;订单状态修改成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改状态</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Map&lt;String, String&gt; map)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更改订单状态</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> Integer.valueOf(map.get(<span class="string">&quot;status&quot;</span>));</span><br><span class="line">       <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> Long.valueOf(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">       LambdaUpdateWrapper&lt;Orders&gt; updateWrapper =<span class="keyword">new</span> <span class="title class_">LambdaUpdateWrapper</span>&lt;&gt;();</span><br><span class="line">       updateWrapper.eq(Orders::getId,id);</span><br><span class="line">       updateWrapper.set(Orders ::getStatus,status);</span><br><span class="line">       ordersService.update(updateWrapper);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<blockquote>
<p>至此，应该是把页面里的所有功能都实现了</p>
</blockquote>
<h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1>]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>初学redis</title>
    <url>//2023/06/04/%E5%88%9D%E5%AD%A6redis/</url>
    <content><![CDATA[<ul>
<li>redis 之 数据类型<blockquote>
<p>redis存储的是<code>key-value</code>结构的数据，其中key是字符串类型，value有5种常用的数据类型</p>
</blockquote>
</li>
</ul>
<ol>
<li>字符串 String</li>
<li>哈希 hash</li>
<li>列表 list</li>
<li>集合 set</li>
<li>有序集合 sorted set<br><img src="https://pic.imgdb.cn/item/647c4772f024cca173b46d38.jpg"></li>
</ol>
<h1 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a>redis常用命令</h1><blockquote>
<p>redis针对每种数据类型有不同的操作命令</p>
</blockquote>
<ol>
<li>String 字符串 操作命令</li>
<li>哈希 hash 操作命令</li>
<li>列表 list 操作命令</li>
<li>集合 set 操作命令</li>
<li>有序集合 sorted set 操作命令</li>
<li>通用命令</li>
</ol>
<h2 id="String常用命令"><a href="#String常用命令" class="headerlink" title="String常用命令"></a>String常用命令</h2><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>SET</strong> key value</td>
<td align="center">设置指定key的值</td>
</tr>
<tr>
<td align="center"><strong>GET</strong> key</td>
<td align="center">获取指定key的值</td>
</tr>
<tr>
<td align="center"><strong>SETEX</strong> key seconds value</td>
<td align="center">设置指定key的值，并将key的过期时间设为seconds秒</td>
</tr>
<tr>
<td align="center"><strong>SETNX</strong> key value</td>
<td align="center">只有在key不存在时设置key的值</td>
</tr>
</tbody></table>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set name zhangsan</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回ok</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get name</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回 <code>&quot;zhangsan&quot;</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get age</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回 <code>nil</code>(等于 null)</p>
</blockquote>
<ul>
<li>一个小实验,说明值<code>key</code>是唯一的<br><img src="https://pic.imgdb.cn/item/647c4d93f024cca173c0e7d0.jpg"></li>
</ul>
<h3 id="SETEX"><a href="#SETEX" class="headerlink" title="SETEX"></a>SETEX</h3><ul>
<li>十秒钟后就为nil了<br><img src="https://pic.imgdb.cn/item/647c4e32f024cca173c1bd39.jpg"></li>
</ul>
<h3 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a>SETNX</h3><ul>
<li>只设置上了第一次的值，只有key为<code>空</code>时，才能设置上值<br><img src="https://pic.imgdb.cn/item/647c4f0ef024cca173c45343.jpg"></li>
</ul>
<h3 id="更多命令"><a href="#更多命令" class="headerlink" title="更多命令"></a>更多命令</h3><p>更多命令参考Redis中文网:<a href="https://www.redis.net.cn/">https://www.redis.net.cn</a></p>
<h2 id="list常用命令"><a href="#list常用命令" class="headerlink" title="list常用命令"></a>list常用命令</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>LPUSH</strong> key value1 [value2]</td>
<td align="center">将一个或多个值插入到头部列表</td>
</tr>
<tr>
<td align="center"><strong>LRANGE</strong> key start stop</td>
<td align="center">获取列表指定范围内的元素</td>
</tr>
<tr>
<td align="center"><strong>RPOP</strong> key</td>
<td align="center">移除并获取列表最后一个元素</td>
</tr>
<tr>
<td align="center"><strong>LLEN</strong> key</td>
<td align="center">获取列表长度</td>
</tr>
<tr>
<td align="center"><strong>BRPOP</strong> key1 [key2] timeout</td>
<td align="center">移出并获取列表最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素</td>
</tr>
</tbody></table>
<p><img src="https://pic.imgdb.cn/item/647c5126f024cca173cb64e5.jpg"></p>
<ol>
<li>先进后出</li>
<li>可以有重复<br><img src="https://pic.imgdb.cn/item/647c534af024cca173d02391.jpg"></li>
</ol>
<blockquote>
<p>移除单个<br><img src="https://pic.imgdb.cn/item/647c53f3f024cca173d1970c.jpg"></p>
</blockquote>
<blockquote>
<p>超时，列表中没有元素时，就会一直阻塞，直到超时<br><img src="https://pic.imgdb.cn/item/647c5459f024cca173d26497.jpg"></p>
</blockquote>
<h2 id="set-集合常用命令"><a href="#set-集合常用命令" class="headerlink" title="set 集合常用命令"></a>set 集合常用命令</h2><p>Redis set 是string 类型的无序集合，集合成员是唯一的，意味着集合种<code>不能出现重复</code>的数据。</p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>SADD</strong> key member1[member2]</td>
<td align="center">向集合添加一个或多个成员</td>
</tr>
<tr>
<td align="center"><strong>SMEMBERS</strong> key</td>
<td align="center">返回集合中的所有成员</td>
</tr>
<tr>
<td align="center"><strong>SCARD</strong> key</td>
<td align="center">获取集合的成员数</td>
</tr>
<tr>
<td align="center"><strong>SINTER</strong> key1[key2]</td>
<td align="center">返回给定的所有集合的交集</td>
</tr>
<tr>
<td align="center"><strong>SUNION</strong> key1[key2]</td>
<td align="center">返回给定的所有集合的并集</td>
</tr>
<tr>
<td align="center"><strong>SDIFF</strong> key1[key2]</td>
<td align="center">返回给定的所有集合的差集</td>
</tr>
<tr>
<td align="center"><strong>SREM</strong> key member1[member2]</td>
<td align="center">移除集合中一个或多个成员</td>
</tr>
</tbody></table>
<blockquote>
<p>按照插入顺序进行排序<br><img src="https://pic.imgdb.cn/item/647c5626f024cca173d623be.jpg"></p>
</blockquote>
<p><img src="https://pic.imgdb.cn/item/647c9e441ddac507cc52ffe7.jpg"></p>
<ul>
<li><p>SDIFF <code>差集</code><br><img src="https://pic.imgdb.cn/item/647d37fb1ddac507cc1fc339.jpg"></p>
</li>
<li><p>而如果相同<br><img src="https://pic.imgdb.cn/item/647d385f1ddac507cc2021ce.jpg"></p>
<blockquote>
<p>相当于是 myset2 <code>减去</code> myset </p>
</blockquote>
</li>
<li><p>SREM 移除元素，可以移除多个<br><img src="https://pic.imgdb.cn/item/647d38e51ddac507cc20a455.jpg"></p>
</li>
</ul>
<h2 id="有序集合-sorted-set-操作命令"><a href="#有序集合-sorted-set-操作命令" class="headerlink" title="有序集合 sorted set 操作命令"></a>有序集合 sorted set 操作命令</h2><blockquote>
<p>Redis sorted set有序集合是 string 类型元素的集合，且不允许重复的成员。每个元素都会关联一个double类型的分数(score)。redis正是通过分数来为集合中的成员进行从小到大排序。有序集合的成员是唯一的，但分数却可以重复。</p>
</blockquote>
<ul>
<li>常用命令</li>
</ul>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>ZADD</strong> key score1 member1 [score2 member2]</td>
<td align="center">向有序集合添加一个或多个成员，或更新已存在成员的分数</td>
</tr>
<tr>
<td align="center"><strong>ZRANGE</strong> key start stop [WITHSCORES]</td>
<td align="center">通过索引区间返回有序集合中指定区间内的成员</td>
</tr>
<tr>
<td align="center"><strong>ZINCRBY</strong> key increment member</td>
<td align="center">有序集合中对指定成员的分数加上增量 increment</td>
</tr>
<tr>
<td align="center"><strong>ZREM</strong> key member [member…]</td>
<td align="center">移除有序集合中的一个或多个成员</td>
</tr>
</tbody></table>
<p><img src="https://pic.imgdb.cn/item/647d3f4b1ddac507cc28f3da.jpg"></p>
<ul>
<li><p>zadd添加元素，前面两次错误是因为集合已经存在了<br><img src="https://pic.imgdb.cn/item/647d40811ddac507cc2a11c8.jpg"></p>
</li>
<li><p>zrange 查看元素  <code>0 -1</code> ：查看所有元素</p>
<blockquote>
<p>按照分数的从小到大排序<br><img src="https://pic.imgdb.cn/item/647d40cf1ddac507cc2a57eb.jpg"></p>
</blockquote>
</li>
<li><p>验证<br><img src="https://pic.imgdb.cn/item/647d41321ddac507cc2ab2bd.jpg"></p>
</li>
<li><p>返回元素连同分值一同返回<br><img src="https://pic.imgdb.cn/item/647d41c91ddac507cc2b7eb2.jpg"></p>
</li>
<li><p>增量，增加以后，排序也会随着改变<br><img src="https://pic.imgdb.cn/item/647d48dc1ddac507cc321258.jpg"></p>
</li>
<li><p>移除<br><img src="https://pic.imgdb.cn/item/647d49321ddac507cc329a5a.jpg"></p>
</li>
</ul>
<h1 id="Redis通用命令"><a href="#Redis通用命令" class="headerlink" title="Redis通用命令"></a>Redis通用命令</h1><table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>KEYS</strong> pattern</td>
<td align="center">查找所有符合给定模式(pattern)的key</td>
</tr>
<tr>
<td align="center"><strong>EXISTS</strong> key</td>
<td align="center">检查给定key是否存在</td>
</tr>
<tr>
<td align="center"><strong>TYPE</strong> key</td>
<td align="center">检查key所储存的值的类型</td>
</tr>
<tr>
<td align="center"><strong>TTL</strong> key</td>
<td align="center">返回给定key的剩余生存时间(TTL,time to live),以秒为单位</td>
</tr>
<tr>
<td align="center"><strong>DEL</strong> key</td>
<td align="center">用于在key存在是删除key</td>
</tr>
</tbody></table>
<ul>
<li><p>keys *<br><img src="https://pic.imgdb.cn/item/647d4a391ddac507cc34251d.jpg"></p>
</li>
<li><p>返回给定的key是否存在，存在返回<code>1</code>，不存在返回<code>0</code><br><img src="https://pic.imgdb.cn/item/647d4a711ddac507cc345e0b.jpg"></p>
</li>
<li><p>返回key的类型<br><img src="https://pic.imgdb.cn/item/647d4aad1ddac507cc34b121.jpg"></p>
</li>
<li><p>查看key的存活时间 -1是永久<br><img src="https://pic.imgdb.cn/item/647d4b021ddac507cc35774c.jpg"><br><img src="https://pic.imgdb.cn/item/647d4b651ddac507cc36267e.jpg"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>//2023/06/11/redis/</url>
    <content><![CDATA[<p> 在此特别感谢黑马程序员提供的教程:</p>
<div class="bvideo"><a href="//www.bilibili.com/video/BV1cr4y1671t" target="_blank">
        <div class="bvideo-box">
            <div class="bvideo-cover">
                <div class="cover-default"></div>
                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i2.hdslb.com/bfs/archive/0165ebc12ef7e5c0922c4a9d25dd86b3bf643ac2.jpg)">
                    <i class="icon-video"></i>
                </div>
                <span class="duration">42:46:09</span>
            </div>
            <div class="bvideo-info">
                <p class="title">黑马程序员Redis入门到实战教程，深度透析redis底层原理+redis分布式锁+企业解决方案+黑马点评实战项目</p>
                <p class="card-status">
                    <span class="play-num">
                        <i class="fa fa-youtube-play"></i>
                        <span>170.9万</span></span>
                    <span>
                        <i class="fa fa-list-alt"></i>
                        <span>6.4万</span></span></p>
                <div class="partition">
                    <label class="card-label">视频</label>
                    <label class="up-label"></label>
                    <label class="up-name">黑马程序员</label>
                </div>
                <div class="actions hide"></div>
            </div>
        </div>
    </a></div>




<h1 id="Redis简单介绍"><a href="#Redis简单介绍" class="headerlink" title="Redis简单介绍"></a>Redis简单介绍</h1><blockquote>
<p>REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 key-value 存储系统，是跨平台的非关系型数据库。<br>Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。<br>Redis 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。</p>
</blockquote>
<p>Redis是一种键值型的NoSql数据库，这里有两个关键字：</p>
<ul>
<li>键值型</li>
<li>NoSql<br>其中<strong>键值型</strong>，是指Redis中存储的数据都是以key.value对的形式存储，而value的形式多种多样，可以是字符串.数值.甚至json：<br><img src="https://pic.imgdb.cn/item/6486d57a1ddac507cca4986b.jpg"></li>
</ul>
<p>而NoSql则是相对于传统关系型数据库而言，有很大差异的一种数据库。</p>
<p>对于存储的数据，没有类似Mysql那么严格的约束，比如唯一性，是否可以为null等等，所以我们把这种松散结构的数据库，称之为NoSQL数据库。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><table>
<thead>
<tr>
<th align="center">软件</th>
<th align="center">版本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Redis</td>
<td align="center">6.2.6</td>
</tr>
<tr>
<td align="center">IDEA</td>
<td align="center">2023.1</td>
</tr>
<tr>
<td align="center">JDK</td>
<td align="center">17</td>
</tr>
<tr>
<td align="center">VMware</td>
<td align="center">17pro</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">centos7</td>
</tr>
<tr>
<td align="center">RDM(redis图形化工具)</td>
<td align="center">2022.1</td>
</tr>
</tbody></table>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>具体怎么安装不过多赘述，网上资料很多</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="Redis数据结构介绍"><a href="#Redis数据结构介绍" class="headerlink" title="Redis数据结构介绍"></a>Redis数据结构介绍</h2><blockquote>
<p>总共分为八种数据类型，分别是</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String</td>
<td align="center">hello world</td>
</tr>
<tr>
<td align="center">Hash</td>
<td align="center">{name:”zhangsan”,age:18}</td>
</tr>
<tr>
<td align="center">List</td>
<td align="center">[A -&gt; B -&gt; C -&gt; D]</td>
</tr>
<tr>
<td align="center">Set</td>
<td align="center">{A,B,C}</td>
</tr>
<tr>
<td align="center">SortedSet</td>
<td align="center">{A:1,B:2,C:3}</td>
</tr>
<tr>
<td align="center">GEO</td>
<td align="center">{A:(120.3, 30.5)}</td>
</tr>
<tr>
<td align="center">BitMap</td>
<td align="center">0110110101110101011</td>
</tr>
<tr>
<td align="center">HyperLog</td>
<td align="center">0110110101110101011</td>
</tr>
</tbody></table>
<blockquote>
<p>前五种为基本类型，后三种为特殊类型<br>Redis为了方便我们学习，将操作不同数据类型的命令也做了分组，在官网（ <a href="https://redis.io/commands">https://redis.io/commands</a> ）可以查看到不同的命令：</p>
</blockquote>
<p>我们也可以通过Help命令来帮助我们去查看命令<br><img src="https://pic.imgdb.cn/item/6486d8a41ddac507ccaa1c91.jpg"></p>
<h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><ul>
<li><code>KEYS</code> 查看符合模板的所有<code>key</code><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询以a开头的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p><strong>在生产环境下，不推荐使用keys 命令，因为这个命令在key过多的情况下，效率不高</strong></p>
</blockquote>
<ul>
<li><p>DEL 删除一个指定的key</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> del</span><br><span class="line"></span><br><span class="line">  DEL key [key ...]</span><br><span class="line">  summary: Delete a key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del name <span class="comment">#删除单个</span></span><br><span class="line">(<span class="built_in">integer</span>) 1  <span class="comment">#成功删除1个</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 <span class="comment">#批量添加数据</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k3&quot;</span></span><br><span class="line">2) <span class="string">&quot;k2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k1&quot;</span></span><br><span class="line">4) <span class="string">&quot;age&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del k1 k2 k3 k4</span><br><span class="line">(<span class="built_in">integer</span>) 3   <span class="comment">#此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys * <span class="comment">#再查询全部的key</span></span><br><span class="line">1) <span class="string">&quot;age&quot;</span>	<span class="comment">#只剩下一个了</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>EXISTS 判断key是否存在</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> EXISTS</span><br><span class="line"></span><br><span class="line">  EXISTS key [key ...]</span><br><span class="line">  summary: Determine <span class="keyword">if</span> a key exists</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>EXPIRE 给一个key设置<code>有效期</code>，有效期到期时该key会被自动删除</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire age 10</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -2  <span class="comment">#当这个key过期了，那么此时查询出来就是-2 </span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> age 10 <span class="comment">#如果没有设置过期时间</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(<span class="built_in">integer</span>) -1  <span class="comment"># ttl的返回值就是-1</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="String命令"><a href="#String命令" class="headerlink" title="String命令"></a>String命令</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p>
<p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p>
<ul>
<li>string：普通字符串</li>
<li>int：整数类型，可以做自增.自减操作</li>
<li>float：浮点类型，可以做自增.自减操作<br>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过<code>512M</code>.</li>
</ul>
<table>
<thead>
<tr>
<th align="center">KEY</th>
<th align="center">VALUE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">msg</td>
<td align="center">hello world</td>
</tr>
<tr>
<td align="center">num</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">score</td>
<td align="center">92.5</td>
</tr>
</tbody></table>
<p>String的常见命令有：</p>
<ul>
<li><code>SET</code>：添加或者修改已经存在的一个String类型的键值对</li>
<li><code>GET</code>：根据key获取String类型的value</li>
<li><code>MSET</code>：批量添加多个String类型的键值对</li>
<li><code>MGET</code>：根据多个key获取多个String类型的value</li>
<li><code>INCR</code>：让一个整型的key自增1</li>
<li><code>INCRBY</code>:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li>
<li><code>INCRBYFLOAT</code>：让一个浮点类型的数字自增并指定步长</li>
<li><code>SETNX</code>：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li>
<li><code>SETEX</code>：添加一个String类型的键值对，并且指定有效期</li>
</ul>
<ul>
<li><p><code>SET</code>:添加或者修改已经存在的一个String类型的键值对</p>
</li>
<li><p><code>GET</code>:根据key获取String类型的value </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name Rose  //原来不存在</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;Rose&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name Jack //原来存在，就是修改</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>MSET</code>: 批量添加多个String类型的键值对</p>
</li>
<li><p><code>MGET</code>：根据多个key获取多个String类型的value</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MGET name age k1 k2 k3</span><br><span class="line">1) <span class="string">&quot;Jack&quot;</span> //之前存在的name</span><br><span class="line">2) <span class="string">&quot;10&quot;</span>   //之前存在的age</span><br><span class="line">3) <span class="string">&quot;v1&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">5) <span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>INCR</code>：让一个整型的key自增1</p>
</li>
<li><p><code>INCRBY</code>:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</p>
</li>
<li><p><code>INCRBYFLOAT</code>：让一个浮点类型的数字自增并指定步长</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get age </span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; incr age //增加1</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; get age //获得age</span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; incrby age 2 //一次增加2</span><br><span class="line">(<span class="built_in">integer</span>) 13 //返回目前的age的值</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; incrby age 2</span><br><span class="line">(<span class="built_in">integer</span>) 15</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; incrby age -1 //也可以增加负数，相当于减</span><br><span class="line">(<span class="built_in">integer</span>) 14</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; incrby age -2 //一次减少2个</span><br><span class="line">(<span class="built_in">integer</span>) 12</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; DECR age //相当于 incr 负数，减少正常用法</span><br><span class="line">(<span class="built_in">integer</span>) 11</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; get age </span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br></pre></td></tr></table></figure>

</li>
<li><p><code>SETNX</code>：添加一个String类型的键值对，前提是这个key不存在，否则不执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">help</span> setnx</span><br><span class="line"></span><br><span class="line">  SETNX key value</span><br><span class="line">  summary: Set the value of a key, only <span class="keyword">if</span> the key does not exist</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: string</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name Jack  //设置名称</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; setnx name lisi //如果key不存在，则添加成功</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get name //由于name已经存在，所以lisi的操作失败</span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx name2 lisi //name2 不存在，所以操作成功</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get name2 </span><br><span class="line"><span class="string">&quot;lisi&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>SETEX</code>：添加一个String类型的键值对，并且指定有效期</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex name 10 jack</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Key的层级结构"><a href="#Key的层级结构" class="headerlink" title="Key的层级结构"></a>Key的层级结构</h2><p>Redis没有类似MySQL中的Table的概念，我们该如何区分不同类型的key呢？</p>
<p>例如，需要存储用户.商品信息到redis，有一个用户id是1，有一个商品id恰好也是1，此时如果使用id作为key，那就会冲突了，该怎么办？</p>
<p>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范：</p>
<p>Redis的key允许有多个单词形成层级结构，多个单词之间用’<code>:</code>‘隔开，格式如下：<br><img src="https://pic.imgdb.cn/item/6486df071ddac507ccb585b1.jpg"></p>
<p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。<br>例如我们的项目名称叫 taobao，有user和product两种不同类型的数据，我们可以这样定义key：</p>
<ul>
<li><p>user相关的key：<strong>taobao:user:1</strong></p>
</li>
<li><p>product相关的key：<strong>taobao:product:1</strong></p>
</li>
</ul>
<p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储：</p>
<table>
<thead>
<tr>
<th align="center"><strong>KEY</strong></th>
<th align="center"><strong>VALUE</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">taobao:user:1</td>
<td align="center">{“id”:1, “name”: “Jack”, “age”: 21}</td>
</tr>
<tr>
<td align="center">taobao:product:1</td>
<td align="center">{“id”:1, “name”: “小米11”, “price”: 4999}</td>
</tr>
</tbody></table>
<p>一旦我们向redis采用这样的方式存储，那么在可视化界面中，redis会以层级结构来进行存储，形成类似于这样的结构，更加方便Redis获取数据</p>
<p><img src="https://pic.imgdb.cn/item/6486dfd31ddac507ccb8dcd6.jpg"></p>
<blockquote>
<p>Redis没有类似MySQL中的Table表的概念，我们该如何区分不同类型的key呢？<br>例如，需要存储用户、商品信息到redis，有一个用户id是1，有一个商品id恰好也是1</p>
</blockquote>
<h2 id="Hash命令"><a href="#Hash命令" class="headerlink" title="Hash命令"></a>Hash命令</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p>
<p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p>
<table>
<thead>
<tr>
<th align="center">KEY</th>
<th align="center">VALUE</th>
</tr>
</thead>
<tbody><tr>
<td align="center">yin:user:1</td>
<td align="center">{name:”jack”,age:21}</td>
</tr>
<tr>
<td align="center">yin:user:2</td>
<td align="center">{name:”Rose”,age:18}</td>
</tr>
</tbody></table>
<p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p>
<p><img src="https://pic.imgdb.cn/item/6486e2a81ddac507ccbfe7ed.jpg"></p>
<p><strong>Hash类型的常见命令</strong></p>
<ul>
<li><p><code>HSET key field value</code>：添加或者修改hash类型key的field的值</p>
</li>
<li><p><code>HGET key field</code>：获取一个hash类型key的field的值</p>
</li>
<li><p><code>HMSET</code>：批量添加多个hash类型key的field的值</p>
</li>
<li><p><code>HMGET</code>：批量获取多个hash类型key的field的值</p>
</li>
<li><p><code>HGETALL</code>：获取一个hash类型的key中的所有的field和value</p>
</li>
<li><p><code>HKEYS</code>：获取一个hash类型的key中的所有的field</p>
</li>
<li><p><code>HINCRBY</code>:让一个hash类型key的字段值自增并指定步长</p>
</li>
<li><p><code>HSETNX</code>：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p>
</li>
<li><p><code>HSET</code>:添加或者修改hash类型key的field的值</p>
</li>
<li><p><code>HGET</code>:获取一个hash类型key的field的值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSET yin:user:3 name Lucy//大key是 yin:user:3 小key是name，小value是Lucy</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET yin:user:3 age 21// 如果操作不存在的数据，则是新增</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSET yin:user:3 age 17 //如果操作存在的数据，则是修改</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; HGET yin:user:3 name </span><br><span class="line"><span class="string">&quot;Lucy&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HGET yin:user:3 age</span><br><span class="line"><span class="string">&quot;17&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HMSET</code>: 批量添加多个hash类型key的field的值</p>
</li>
<li><p><code>HMGET</code>:批量获取多个hash类型key的field的值</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HMSET yin:user:4 name HanMeiMei</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HMSET yin:user:4 name LiLei age 20 sex man</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; HMGET yin:user:4 name age sex</span><br><span class="line">1) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">3) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HGETALL</code>:获取一个hash类型的key中的所有的field和value</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HGETALL yin:user:4</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">3) <span class="string">&quot;age&quot;</span></span><br><span class="line">4) <span class="string">&quot;20&quot;</span></span><br><span class="line">5) <span class="string">&quot;sex&quot;</span></span><br><span class="line">6) <span class="string">&quot;women&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HKEYS</code>:获取一个hash类型的key中的所有的field</p>
</li>
<li><p><code>HVALS</code>:获取一个hash类型的key中的所有的value</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HKEYS yin:user:4</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">3) <span class="string">&quot;sex&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; HVALS yin:user:4</span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">3) <span class="string">&quot;women&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>HINCRBY</code>:让一个hash类型key的字段值自增或自减并指定步长</p>
</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HINCRBY yin:user:4 age 2</span><br><span class="line">(<span class="built_in">integer</span>) 22</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY yin:user:4 age 2</span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY yin:user:4 age 2</span><br><span class="line">(<span class="built_in">integer</span>) 26</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY yin:user:4 age -2</span><br><span class="line">(<span class="built_in">integer</span>) 24</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY yin:user:4 age -2</span><br><span class="line">(<span class="built_in">integer</span>) 22</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY yin:user:4 age -2</span><br><span class="line">(<span class="built_in">integer</span>) 20</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>HSETNX</code>：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; HSETNX yin:user:4 addr beijing</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget yin:user:4</span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;hget&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379&gt; hget yin:user:4 addr</span><br><span class="line"><span class="string">&quot;beijing&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="List命令"><a href="#List命令" class="headerlink" title="List命令"></a>List命令</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p>
<p>特征也与LinkedList类似：</p>
<ul>
<li>有序</li>
<li>元素可以重复</li>
<li>插入和删除快</li>
<li>查询速度一般</li>
</ul>
<p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p>
<p><strong>List的常见命令有：</strong></p>
<ul>
<li><p>LPUSH key element … ：向列表左侧插入一个或多个元素</p>
</li>
<li><p>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</p>
</li>
<li><p>RPUSH key element … ：向列表右侧插入一个或多个元素</p>
</li>
<li><p>RPOP key：移除并返回列表右侧的第一个元素</p>
</li>
<li><p>LRANGE key star end：返回一段角标范围内的所有元素</p>
</li>
<li><p>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</p>
</li>
<li><p><code>LPUSH</code>:向列表左侧插入一个或多个元素</p>
</li>
<li><p><code>RPUSH</code>:向列表右侧插入一个或多个元素</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPUSH <span class="built_in">users</span> 1 2 3 </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; RPUSH <span class="built_in">users</span> 7 8 9</span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br></pre></td></tr></table></figure></li>
<li><p><code>LPOP</code>:移除并返回列表左侧的第一个元素，没有则返回nil</p>
</li>
<li><p><code>RPOP</code>:移除并返回列表右侧的第一个元素，没有则返回nil</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LPOP <span class="built_in">users</span></span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPOP <span class="built_in">users</span></span><br><span class="line"><span class="string">&quot;9&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>LRANGE</code>：key star end：返回一段角标范围内的所有元素</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; LRANGE <span class="built_in">users</span> 1 2</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) <span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Set命令"><a href="#Set命令" class="headerlink" title="Set命令"></a>Set命令</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p>
<ul>
<li>无序</li>
<li>元素不可重复</li>
<li>查找快</li>
<li>支持交集.并集.差集等功能</li>
</ul>
<p><strong>Set类型的常见命令</strong></p>
<ul>
<li>SADD key member … ：向set中添加一个或多个元素</li>
<li>SREM key member … : 移除set中的指定元素</li>
<li>SCARD key： 返回set中元素的个数</li>
<li>SISMEMBER key member：判断一个元素是否存在于set中</li>
<li>SMEMBERS：获取set中的所有元素</li>
<li>SINTER key1 key2 … ：求key1与key2的交集</li>
<li>SDIFF key1 key2 … ：求key1与key2的差集</li>
<li>SUNION key1 key2 ..：求key1和key2的并集</li>
</ul>
<p><strong>案例</strong></p>
<ul>
<li>将下列数据用Redis的Set集合来存储：</li>
<li>张三的好友有：李四.王五.赵六</li>
<li>李四的好友有：王五.麻子.二狗</li>
<li>利用Set的命令实现下列功能：</li>
<li>计算张三的好友有几人</li>
<li>计算张三和李四有哪些共同好友</li>
<li>查询哪些人是张三的好友却不是李四的好友</li>
<li>查询张三和李四的好友总共有哪些人</li>
<li>判断李四是否是张三的好友</li>
<li>判断张三是否是李四的好友</li>
<li>将李四从张三的好友列表中移除<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SADD zs lisi wangwu zhaoliu //向张三集合中存入三个元素</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SADD <span class="built_in">ls</span> wangwu mazi ergou //向李四的集合中存入三个元素</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SCARD zs    //返回张三集合中的元素个数</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SINTER zs <span class="built_in">ls</span> //返回张三和李四的交集，也就是共同好友</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SDIFF zs <span class="built_in">ls</span> //返回张三和李四的差集，也就是张三减去李四的差</span><br><span class="line">1) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">2) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SUNION zs <span class="built_in">ls</span>    //返回张三和李四不重复的一起的朋友</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">3) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">4) <span class="string">&quot;mazi&quot;</span></span><br><span class="line">5) <span class="string">&quot;ergou&quot;</span></span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER zs lisi 判断李四是否存在张三的集合中</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER <span class="built_in">ls</span> zhangsan //判断张三是否存在李四的集合中</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SREM zs lisi //移除张三集合中李四这个元素</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">    </span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS zs  //获取张三集合中的元素</span><br><span class="line">1) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">2) <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p>
<p>SortedSet具备下列特性：</p>
<ul>
<li>可排序</li>
<li>元素不重复</li>
<li>查询速度快</li>
</ul>
<p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p>
<p>SortedSet的常见命令有：</p>
<ul>
<li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li>
<li>ZREM key member：删除sorted set中的一个指定元素</li>
<li>ZSCORE key member : 获取sorted set中的指定元素的score值</li>
<li>ZRANK key member：获取sorted set 中的指定元素的排名</li>
<li>ZCARD key：获取sorted set中的元素个数</li>
<li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li>
<li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li>
<li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li>
<li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li>
<li>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</li>
</ul>
<p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p>
<ul>
<li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</li>
<li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li>
</ul>
<h1 id="Java客户端-Jedis"><a href="#Java客户端-Jedis" class="headerlink" title="Java客户端-Jedis"></a>Java客户端-Jedis</h1><blockquote>
<p>同样，在Redis官网中提供了各种语言的客户端，地址：<a href="https://redis.io/docs/clients/">https://redis.io/docs/clients/</a><br>其中Java客户端也包含很多：<br><img src="https://pic.imgdb.cn/item/6486f7bf1ddac507cced7698.jpg"></p>
</blockquote>
<p>标记为❤️的就是推荐使用的java客户端，包括：</p>
<ul>
<li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li>
<li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map.Queue等，而且支持跨进程的同步机制：Lock.Semaphore等待，比较适合用来实现特殊的功能需求。</li>
</ul>
<h2 id="Jedis快速入门"><a href="#Jedis快速入门" class="headerlink" title="Jedis快速入门"></a>Jedis快速入门</h2><p><strong>入门案例详细步骤</strong></p>
<ol>
<li><p>创建maven工程：<br><img src="https://pic.imgdb.cn/item/6486f82f1ddac507ccee648a.jpg"></p>
</li>
<li><p>引入依赖：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!--jedis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.7</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--单元测试--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.7</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立连接<br>新建一个单元测试类，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Jedis jedis;​<span class="meta">@BeforeEachvoid</span> setUp() &#123;   </span><br><span class="line"><span class="comment">// 1.建立连接        </span></span><br><span class="line">jedis = JedisConnectionFactory.getJedis();    </span><br><span class="line"><span class="comment">// 2.设置密码    </span></span><br><span class="line">jedis.auth(<span class="string">&quot;123321&quot;</span>);    </span><br><span class="line"><span class="comment">// 3.选择库    </span></span><br><span class="line">jedis.select(<span class="number">0</span>);&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String 类型</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">set</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  hash</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//存值</span></span><br><span class="line">        jedis.hset(<span class="string">&quot;user:1&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;user:1&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        Map&lt;String, String&gt; stringStringMap = jedis.hgetAll(<span class="string">&quot;user:1&quot;</span>);</span><br><span class="line">        System.out.println(stringStringMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>释放资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tertDown</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="literal">null</span>)&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h2><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式</p>
<p>有关池化思想，并不仅仅是这里会使用，很多地方都有，比如说我们的数据库连接池，比如我们tomcat中的线程池，这些都是池化思想的体现。</p>
<h3 id="创建Jedis的连接池"><a href="#创建Jedis的连接池" class="headerlink" title="创建Jedis的连接池"></a>创建Jedis的连接池</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFacotry</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">         <span class="comment">//配置连接池</span></span><br><span class="line">         <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">         poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">         poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">         poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">         poolConfig.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">         <span class="comment">//创建连接池对象</span></span><br><span class="line">         jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig,</span><br><span class="line">                 <span class="string">&quot;192.168.150.101&quot;</span>,<span class="number">6379</span>,<span class="number">1000</span>,<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>JedisConnectionFacotry：工厂设计模式是实际开发中非常常用的一种设计模式，我们可以使用工厂，去降低代的耦合，比如Spring中的Bean的创建，就用到了工厂设计模式</p>
</li>
<li><p>静态代码块：随着类的加载而加载，确保只能执行一次，我们在加载当前工厂类的时候，就可以执行static的操作完成对 连接池的初始化</p>
</li>
<li><p>最后提供返回连接池中连接的方法.</p>
</li>
</ol>
<h3 id="改造原始代码"><a href="#改造原始代码" class="headerlink" title="改造原始代码"></a>改造原始代码</h3><ol>
<li><p>在我们完成了使用工厂设计模式来完成代码的编写之后，我们在获得连接时，就可以通过工厂来获得,而不用直接去new对象，降低耦合，并且使用的还是连接池对象。</p>
</li>
<li><p>当我们使用了连接池后，当我们关闭连接其实并不是关闭，而是将Jedis还回连接池的。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@BeforeEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">//建立连接</span></span><br><span class="line">     <span class="comment">/*jedis = new Jedis(&quot;127.0.0.1&quot;,6379);*/</span></span><br><span class="line">     jedis = JedisConnectionFacotry.getJedis();</span><br><span class="line">      <span class="comment">//选择库</span></span><br><span class="line">     jedis.select(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (jedis != <span class="literal">null</span>) &#123;</span><br><span class="line">         jedis.close();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java客户端-SpringDataRedis"><a href="#Java客户端-SpringDataRedis" class="headerlink" title="Java客户端-SpringDataRedis"></a>Java客户端-SpringDataRedis</h2><blockquote>
<p>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis，官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a></p>
</blockquote>
<ul>
<li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li>
<li>提供了RedisTemplate统一API来操作Redis</li>
<li>支持Redis的发布订阅模型</li>
<li>支持Redis哨兵和Redis集群</li>
<li>支持基于Lettuce的响应式编程</li>
<li>支持基于JDK.JSON.字符串.Spring对象的数据序列化及反序列化</li>
<li>支持基于Redis的JDKCollection实现</li>
</ul>
<p>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</p>
<table>
<thead>
<tr>
<th align="center">API</th>
<th align="center">返回值类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">redisTemplate.opsForValue()</td>
<td align="center">ValueOperations</td>
<td align="center">操作<code>String</code>类型数据</td>
</tr>
<tr>
<td align="center">redisTemplate.opsForHash()</td>
<td align="center">HashOperations</td>
<td align="center">操作<code>Hash</code>类型数据</td>
</tr>
<tr>
<td align="center">redisTemplate.opsForList()</td>
<td align="center">ListOperations</td>
<td align="center">操作<code>List</code>类型数据</td>
</tr>
<tr>
<td align="center">redisTemplate.opsForSet()</td>
<td align="center">SetOperations</td>
<td align="center">操作<code>set</code>类型数据</td>
</tr>
<tr>
<td align="center">redisTemplate.opsForZSet()</td>
<td align="center">ZSetOperations</td>
<td align="center">操作<code>ZSet</code>类型数据</td>
</tr>
<tr>
<td align="center">redisTemplate</td>
<td align="center"></td>
<td align="center"><strong>通用命令</strong></td>
</tr>
</tbody></table>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单：</p>
<h4 id="创建SpringBoot工程"><a href="#创建SpringBoot工程" class="headerlink" title="创建SpringBoot工程"></a>创建SpringBoot工程</h4><p><img src="https://pic.imgdb.cn/item/6486fb8b1ddac507ccf76277.jpg"></p>
<h4 id="导入maven坐标"><a href="#导入maven坐标" class="headerlink" title="导入maven坐标"></a>导入maven坐标</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--common pool--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.10</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="添加yml配置文件"><a href="#添加yml配置文件" class="headerlink" title="添加yml配置文件"></a>添加yml配置文件</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.101</span><span class="number">.116</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span>  <span class="comment">#最大连接数</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">8</span>   <span class="comment">#最大空闲数</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment">#最小空闲数</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">100ms</span> <span class="comment">#最长等待时间</span></span><br><span class="line">    <span class="attr">main:</span>  <span class="comment">#关闭springboot logo(可加可不加)</span></span><br><span class="line">      <span class="attr">banner-mode:</span> <span class="string">off</span></span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//存入一条数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>SpringDataRedis</code>的使用步骤：</p>
<ul>
<li>引入<code>spring-boot-starter-data-redis</code>依赖</li>
<li>在<code>application.yml</code>配置<code>Redis</code>信息</li>
<li>注入<code>RedisTemplate</code></li>
</ul>
<h4 id="数据序列化器"><a href="#数据序列化器" class="headerlink" title="数据序列化器"></a>数据序列化器</h4><blockquote>
<p>RedisTemplate可以接收任意Object作为值写入Redis,只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，可读性差,内存占用较大.</p>
</blockquote>
<p>我们可以自定义RedisTemplate的序列化方式，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">//创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如图：<br><img src="https://pic.imgdb.cn/item/6486fdb11ddac507ccfcbaf7.jpg"><br>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</p>
<h4 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h4><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，如图：<br><img src="https://pic.imgdb.cn/item/6486fde21ddac507ccfd2180.jpg"></p>
<ul>
<li><p>为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p>
</li>
<li><p>为了减少内存的消耗，我们可以采用<code>手动</code>序列化的方式，换句话说，就是不借助默认的序列化器，而是我们自己来控制序列化的动作，同时，我们只采用String的序列化器，这样，在存储value时，我们就不需要在内存中就不用多存储数据，从而节约我们的内存空间</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6486fe4d1ddac507ccfe1d6b.jpg"><br>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。</p>
<ul>
<li>省去了我们自定义RedisTemplate的序列化方式的步骤，而是直接使用：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string类型数据操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//存入一条数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUserUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">//新建一个对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;user:200&quot;</span>,json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userValue</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;user:200&quot;</span>);</span><br><span class="line">        <span class="comment">//手动反序列化</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper.readValue(userValue, User.class);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>此时我们再来看一看存储的数据<img src="https://pic.imgdb.cn/item/6486fe9f1ddac507ccfe8f1e.jpg"></p>
<p>总结：</p>
<p>RedisTemplate的两种序列化实践方案：</p>
<ul>
<li><p>方案一：</p>
<ul>
<li>自定义RedisTemplate</li>
<li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li>
</ul>
</li>
<li><p>方案二：</p>
<ul>
<li>使用StringRedisTemplate</li>
<li>写入Redis时，手动把对象序列化为JSON</li>
<li>读取Redis时，手动把读取到的JSON反序列化为对象</li>
</ul>
</li>
</ul>
<h4 id="Hash结构操作"><a href="#Hash结构操作" class="headerlink" title="Hash结构操作"></a>Hash结构操作</h4><p>这个代码就不再解释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 哈希结构数据操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisStringTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">        stringRedisTemplate.opsForHash().put(<span class="string">&quot;user:400&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object, Object&gt; entries = stringRedisTemplate.opsForHash().entries(<span class="string">&quot;user:400&quot;</span>);</span><br><span class="line">        System.out.println(entries);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>之后去数据库把这个数据修改一下，这样逻辑过期前和逻辑过期后的数据就不一致，当用户来访问数据的时候，需要花时间来进行重构缓存数据，但是在重构完成之前，都只能获得脏数据（也就是我们修改前的数据），只有当重构完毕之后，才能获得新数据（我们修改后的数据）</li>
</ul>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis实战</title>
    <url>//2023/06/13/%E9%BB%91%E9%A9%ACredis%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p> 在此特别感谢黑马程序员提供的教程:</p>
<div class="bvideo"><a href="//www.bilibili.com/video/BV1cr4y1671t" target="_blank">
        <div class="bvideo-box">
            <div class="bvideo-cover">
                <div class="cover-default"></div>
                <div class="bvideo-cover-layer" style="background-image:url(https://pic1.xuehuaimg.com/proxy/http://i2.hdslb.com/bfs/archive/0165ebc12ef7e5c0922c4a9d25dd86b3bf643ac2.jpg)">
                    <i class="icon-video"></i>
                </div>
                <span class="duration">42:46:09</span>
            </div>
            <div class="bvideo-info">
                <p class="title">黑马程序员Redis入门到实战教程，深度透析redis底层原理+redis分布式锁+企业解决方案+黑马点评实战项目</p>
                <p class="card-status">
                    <span class="play-num">
                        <i class="fa fa-youtube-play"></i>
                        <span>172.0万</span></span>
                    <span>
                        <i class="fa fa-list-alt"></i>
                        <span>6.4万</span></span></p>
                <div class="partition">
                    <label class="card-label">视频</label>
                    <label class="up-label"></label>
                    <label class="up-name">黑马程序员</label>
                </div>
                <div class="actions hide"></div>
            </div>
        </div>
    </a></div>

<h1 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h1><ul>
<li><p><code>短信登录</code></p>
<ul>
<li>这一块我们会使用redis共享session来实现</li>
<li>之前在瑞吉外卖项目已经实现过了，使用redis替换session就行</li>
</ul>
</li>
<li><p><code>商户查询缓存</code></p>
<ul>
<li>这部分要理解缓存击穿，缓存穿透，缓存雪崩等问题，对于这些概念的理解不仅仅是停留在概念上，更是能在代码中看到对应的内容</li>
</ul>
</li>
<li><p><code>优惠卷秒杀</code></p>
<ul>
<li>这部分可以学会Redis的计数器功能，完成高性能的Redis操作，同时学会Redis分布式锁的原理，包括Redis的三种消息队列，也是redis的核心功能。</li>
</ul>
</li>
<li><p><code>附近的商户</code></p>
<ul>
<li>利用Redis的GEOHash(新数据结构，前面没有应用场景就没介绍)来完成对于地理坐标的操作</li>
</ul>
</li>
<li><p><code>UV统计</code></p>
<ul>
<li>主要是使用Redis来完成统计功能</li>
</ul>
</li>
<li><p><code>用户签到</code></p>
<ul>
<li>使用Redis的BitMap数据统计功能</li>
</ul>
</li>
<li><p><code>好友关注</code></p>
<ul>
<li>基于Set集合的关注、取消关注，共同关注等等功能，这一块知识咱们之前就讲过，这次我们在项目中来使用一下</li>
</ul>
</li>
<li><p><code>达人探店</code></p>
<ul>
<li>基于List来完成点赞列表的操作，同时基于SortedSet来完成点赞的排行榜功能</li>
</ul>
</li>
</ul>
<h1 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h1><h2 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h2><p>在实现功能之前，我们先来导入项目，让项目跑起来</p>
<h3 id="导入SQL"><a href="#导入SQL" class="headerlink" title="导入SQL"></a>导入SQL</h3><p>黑马已经在资料中提供好了SQL文件，这里简单分析一下提供的表</p>
<table>
<thead>
<tr>
<th align="center"><strong>表</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">tb_user</td>
<td align="center">用户表</td>
</tr>
<tr>
<td align="center">tb_user_info</td>
<td align="center">用户详情表</td>
</tr>
<tr>
<td align="center">tb_shop</td>
<td align="center">商户信息表</td>
</tr>
<tr>
<td align="center">tb_shop_type</td>
<td align="center">商户类型表</td>
</tr>
<tr>
<td align="center">tb_blog</td>
<td align="center">用户日记表(达人探店日记)</td>
</tr>
<tr>
<td align="center">tb_follow</td>
<td align="center">用户关注表</td>
</tr>
<tr>
<td align="center">tb_voucher</td>
<td align="center">优惠券表</td>
</tr>
<tr>
<td align="center">tb_voucher_order</td>
<td align="center">优惠券的订单表</td>
</tr>
</tbody></table>
<h3 id="有关当前模型"><a href="#有关当前模型" class="headerlink" title="有关当前模型"></a>有关当前模型</h3><p>手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。</p>
<p>在tomcat支撑起并发流量后，我们如果让tomcat直接去访问Mysql，根据经验Mysql企业级服务器只要上点并发，一般是16或32 核心cpu，32 或64G内存，像企业级mysql加上固态硬盘能够支撑的并发，大概就是4000起~7000左右，上万并发， 瞬间就会让Mysql服务器的cpu，硬盘全部打满，容易崩溃，所以我们在高并发场景下，会选择使用mysql集群，同时为了进一步降低Mysql的压力，同时增加访问的性能，我们也会加入Redis，同时使用Redis集群使得Redis对外提供更好的服务。<br><img src="https://pic.imgdb.cn/item/64883aa11ddac507cc2af46a.jpg"></p>
<h3 id="导入后端项目"><a href="#导入后端项目" class="headerlink" title="导入后端项目"></a>导入后端项目</h3><ul>
<li>黑马已经提供好了后端项目源码压缩包，我们将其解压之后，放到自己的workspace里</li>
<li>然后修改MySQL和Reids的连接要素为自己的，随后启动项目</li>
<li>访问<a href="http://localhost:8081/shop-type/list">http://localhost:8081/shop-type/list</a> ，如果可以看到JSON数据，则说明导入成功</li>
</ul>
<h3 id="导入前端项目"><a href="#导入前端项目" class="headerlink" title="导入前端项目"></a>导入前端项目</h3><ul>
<li>黑马已经提供好了前端项目源码压缩包，我们将其解压之后，放到自己的workSpace里</li>
<li>然后在nginx所在目录打开一个cmd窗口，输入命令，即可启动项目<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start nginx.exe</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="运行前端项目"><a href="#运行前端项目" class="headerlink" title="运行前端项目"></a>运行前端项目</h3><ul>
<li>访问<a href="http://localhost:8080/">http://localhost:8080/</a> ，打开开发者模式，可以看到页面<br><img src="https://pic.imgdb.cn/item/64883bab1ddac507cc2fbb00.jpg"></li>
</ul>
<h2 id="基于Session实现登录流程"><a href="#基于Session实现登录流程" class="headerlink" title="基于Session实现登录流程"></a>基于Session实现登录流程</h2><ul>
<li>发送验证码<br>用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号<br>如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户</li>
<li>短信验证码登录、注册<br>用户将验证码和手机号进行输入，后台从session中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到session中，方便后续获得当前登录信息</li>
<li>校验登录状态<br>用户在请求的时候，会从cookie中携带JsessionId到后台，后台通过JsessionId从session中拿到用户信息，如果没有session信息，则进行拦截，如果有session信息，则将用户信息保存到threadLocal中，并放行</li>
</ul>
<h2 id="实现发送短信验证码功能"><a href="#实现发送短信验证码功能" class="headerlink" title="实现发送短信验证码功能"></a>实现发送短信验证码功能</h2><ul>
<li>输入手机号，点击发送验证码按钮，查看发送的请求<blockquote>
<p>请求网址: <a href="http://localhost:8080/api/user/code?phone=13956981234">http://localhost:8080/api/user/code?phone=13956981234</a><br>请求方法: POST</p>
</blockquote>
</li>
<li>看起来是使用通过<code>UserController</code>的<code>code</code>接口实现的,看源码确实是<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送手机验证码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;功能未完成&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>这里黑马并没有真正使用手机验证码，为了方便使用了控制台打印。</li>
</ul>
<h2 id="实现登录拦截功能"><a href="#实现登录拦截功能" class="headerlink" title="实现登录拦截功能"></a>实现登录拦截功能</h2><p>这里使用了拦截器的知识，可以再复习下SSM</p>
<ul>
<li>创建一个<code>LoginInterceptor</code>类，实现<code>HandlerInterceptor</code>接口，重写其中的两个方法，前置拦截器和完成处理方法，前置拦截器主要用于我们登陆之前的权限校验，完成处理方法是用于处理登录后的信息，避免内存泄露</li>
</ul>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">LoginInterceptor</button></li><li class="tab"><button type="button" data-href="#test1-2">UserHolder</button></li><li class="tab"><button type="button" data-href="#test1-3">MvcConfig</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 获取session中的用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4. 不存在，则拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 存在，保存用户信息到ThreadLocal，UserHolder是提供好了的工具类</span></span><br><span class="line">        UserHolder.saveUser(user);</span><br><span class="line">        <span class="comment">//6. 放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p>这是黑马已经提供好的工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p>让拦截器生效</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>



<h2 id="隐藏用户敏感信息"><a href="#隐藏用户敏感信息" class="headerlink" title="隐藏用户敏感信息"></a>隐藏用户敏感信息</h2><p>我们通过浏览器观察到此时用户的全部信息都在，这样极为不靠谱，所以我们应当在返回用户信息之前，将用户的敏感信息进行隐藏，采用的核心思路就是书写一个UserDto对象，这个UserDto对象就没有敏感信息了，我们在返回前，将有用户敏感信息的User对象转化成没有敏感信息的UserDto对象，那么就能够避免这个尴尬的问题了<br><strong>在登录方法处修改</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, BeanUtils.copyProperties(user,UserDTO.class));</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>在拦截器处：</strong><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserHolder.saveUser((UserDTO) user);</span><br></pre></td></tr></table></figure></li>
<li><strong>UserDto类如下，将User对象中的属性拷贝给UserDto，就可以避免暴露用户的隐藏信息</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>修改UserHolder，将其User类型都换为UserDto</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDTO user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改login</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">        <span class="comment">//获取登录账号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="comment">//获取登录验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">        <span class="comment">//获取session中的验证码</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">cacheCode</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 校验邮箱</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isEmailInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//2. 不符合格式则报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;邮箱格式不正确！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 校验验证码</span></span><br><span class="line">        log.info(<span class="string">&quot;code:&#123;&#125;,cacheCode&#123;&#125;&quot;</span>, code, cacheCode);</span><br><span class="line">        <span class="keyword">if</span> (code == <span class="literal">null</span> || !cacheCode.toString().equals(code)) &#123;</span><br><span class="line">            <span class="comment">//4. 不一致则报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码不一致！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 根据账号查询用户是否存在</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//6. 如果不存在则创建</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            user = createUserWithPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 保存用户信息到session中</span></span><br><span class="line">-       session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">+       <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">+       session.setAttribute(<span class="string">&quot;user&quot;</span>, userDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改拦截器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 获取session中的用户信息</span></span><br><span class="line">-       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">+       <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> (UserDTO) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4. 不存在，则拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 存在，保存用户信息到ThreadLocal，UserHolder是提供好了的工具类</span></span><br><span class="line">        UserHolder.saveUser(user);</span><br><span class="line">        <span class="comment">//6. 放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>重启服务器,登录后查看此时的用户信息，敏感信息已经不存在了</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">data</span><br><span class="line"><span class="punctuation">:</span> </span><br><span class="line"><span class="punctuation">&#123;</span>id<span class="punctuation">:</span> <span class="number">1010</span><span class="punctuation">,</span> nickName<span class="punctuation">:</span> <span class="string">&quot;user_9k6sd05tn4&quot;</span><span class="punctuation">,</span> icon<span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">icon</span><br><span class="line"><span class="punctuation">:</span> </span><br><span class="line"><span class="string">&quot;&quot;</span></span><br><span class="line">id</span><br><span class="line"><span class="punctuation">:</span> </span><br><span class="line"><span class="number">1010</span></span><br><span class="line">nickName</span><br><span class="line"><span class="punctuation">:</span> </span><br><span class="line"><span class="string">&quot;user_9k6sd05tn4&quot;</span></span><br><span class="line">success</span><br><span class="line"><span class="punctuation">:</span> </span><br><span class="line"><span class="literal"><span class="keyword">true</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Session共享问题"><a href="#Session共享问题" class="headerlink" title="Session共享问题"></a>Session共享问题</h2><ul>
<li>每个tomcat中都有一份属于自己的session,假设用户第一次访问第一台tomcat，并且把自己的信息存放到第一台服务器的session中，但是第二次这个用户访问到了第二台tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的session，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是session拷贝，就是说虽然每个tomcat上都有不同的session，但是每当任意一台服务器的session修改时，都会同步给其他的Tomcat服务器的session，这样的话，就可以实现session的共享了</li>
<li>但是这种方案具有两个大问题:</li>
</ul>
<ol>
<li>每台服务器中都有完整的一份session数据，服务器压力过大。</li>
<li>session拷贝数据时，可能会出现延迟</li>
</ol>
<ul>
<li>所以后来采用的方案都是基于redis来完成，我们把session换成redis，redis数据本身就是共享的，就可以避免session共享的问题了</li>
</ul>
<h2 id="Redis代替Session的业务流程"><a href="#Redis代替Session的业务流程" class="headerlink" title="Redis代替Session的业务流程"></a>Redis代替Session的业务流程</h2><h3 id="设计key的结构"><a href="#设计key的结构" class="headerlink" title="设计key的结构"></a>设计key的结构</h3><ul>
<li>首先我们要思考一下利用redis来存储数据，那么到底使用哪种结构呢？由于存入的数据比较简单,我们可以考虑使用String，或者是使用哈希<ul>
<li>如果使用String，以JSON字符串形式保存数据，会额外占用空间。</li>
<li>如果使用哈希，则他的value中只会存储他数据本身。<br>  如果不是特别在意内存，其实使用String就可以。</li>
</ul>
</li>
</ul>
<h3 id="设计key的具体细节"><a href="#设计key的具体细节" class="headerlink" title="设计key的具体细节"></a>设计key的具体细节</h3><ul>
<li><p>所以我们可以使用String结构，就是一个简单的key，value键值对的方式，但是关于key的处理，session他是每个用户都有自己的session，但是redis的key是共享的，咱们就不能使用code了</p>
</li>
<li><p>在设计这个key的时候，我们之前讲过需要满足两点</p>
</li>
</ul>
<ol>
<li><p>key要具有唯一性</p>
</li>
<li><p>key要方便携带</p>
</li>
</ol>
<p>如果我们采用<code>phone</code>：手机号这个的数据来存储当然是可以的，但是如果把这样的敏感数据存储到redis中并且从页面中带过来毕竟不太合适，所以我们在后台生成一个随机串<code>token</code>，然后让前端带来这个token就能完成我们的整体逻辑了</p>
<h3 id="整体访问流程"><a href="#整体访问流程" class="headerlink" title="整体访问流程"></a>整体访问流程</h3><ul>
<li>当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，<ul>
<li>如果一致，则根据手机号查询用户信息，</li>
</ul>
</li>
<li>不存在则新建，最后将用户数据保存到redis，并且生成token作为redis的key，当我们校验用户是否登录时，<ul>
<li>不存在则拦截</li>
<li>存在，会去携带着token进行访问，从redis中取出token对应的value，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到threadLocal中，并且放行。</li>
</ul>
</li>
</ul>
<h2 id="基于Redis实现短信登陆"><a href="#基于Redis实现短信登陆" class="headerlink" title="基于Redis实现短信登陆"></a>基于Redis实现短信登陆</h2><ul>
<li><p>由于前面已经分析过业务逻辑了，所以这里我们直接开始写代码，在此之前我们要在UserServiceImpl中注入<code>StringRedisTemplate</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改sendCode方法</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">UserServiceImpl</button></li><li class="tab"><button type="button" data-href="#tab1-2">RedisConstants.java</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>这里的key使用用<code>login:code:email</code>的形式，并设置有效期2分钟，我们也可以定义一个常量类来替换这里的<code>login:code</code>:和2，让代码显得更专业一点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">//校验手机号</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//生成验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//保存到redis并设置有效期</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//发送验证码</span></span><br><span class="line">        log.debug(<span class="string">&quot;验证码发送成功，验证码为：&quot;</span> + code);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_CODE_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:code:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_CODE_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_USER_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:token:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_USER_TTL</span> <span class="operator">=</span> <span class="number">36000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_NULL_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_SHOP_TTL</span> <span class="operator">=</span> <span class="number">30L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;cache:shop:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;lock:shop:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOCK_SHOP_TTL</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECKILL_STOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;seckill:stock:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLOG_LIKED_KEY</span> <span class="operator">=</span> <span class="string">&quot;blog:liked:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FEED_KEY</span> <span class="operator">=</span> <span class="string">&quot;feed:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHOP_GEO_KEY</span> <span class="operator">=</span> <span class="string">&quot;shop:geo:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_SIGN_KEY</span> <span class="operator">=</span> <span class="string">&quot;sign:&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


<ul>
<li>修改login方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 登录</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginForm</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">       <span class="comment">//  1. 校验手机号</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  2. 如果不符合直接返回错误信息</span></span><br><span class="line">       <span class="keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  3. 校验验证码</span></span><br><span class="line">       <span class="comment">//获取后端发出的验证码</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line">       <span class="comment">//获取前端传回的验证验证码</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  4. 校验，不一致报错</span></span><br><span class="line">       <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.equals(code)) &#123;</span><br><span class="line">           <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  5. 根据手机号查询用户</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  5.判断用户是否存在</span></span><br><span class="line">       <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 6.不存在，在数据库创建</span></span><br><span class="line">           user = createUserWithPhone(phone);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 7.   保存用户信息到redis</span></span><br><span class="line">       <span class="comment">//7.1   随机token作为令牌，</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 7.2   将user对象存入到redis中</span></span><br><span class="line">       <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">       Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO,<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(),</span><br><span class="line">               CopyOptions.create()</span><br><span class="line">                       .setIgnoreNullValue(<span class="literal">true</span>)</span><br><span class="line">                       .setFieldValueEditor((fieldName,fieldValue) -&gt; fieldValue.toString()));</span><br><span class="line">       <span class="comment">// 7.3  存储</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">       stringRedisTemplate.opsForHash().putAll(tokenKey,userMap);</span><br><span class="line">       <span class="comment">//7.4 设置token有效期</span></span><br><span class="line">       stringRedisTemplate.expire(tokenKey,LOGIN_USER_TTL,TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 8.  token 返回给前端</span></span><br><span class="line">       <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="解决状态登录刷新问题"><a href="#解决状态登录刷新问题" class="headerlink" title="解决状态登录刷新问题"></a>解决状态登录刷新问题</h2><h3 id="初始方案"><a href="#初始方案" class="headerlink" title="初始方案"></a>初始方案</h3><ul>
<li>在这个方案中，他确实可以使用对应路径的拦截，同时刷新登录token令牌的存活时间，但是现在这个拦截器他只是拦截需要被拦截的路径，假设当前用户访问了一些不需要拦截的路径，那么这个拦截器就不会生效，所以此时令牌刷新的动作实际上就不会执行，所以这个方案他是存在问题的</li>
</ul>
<h3 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h3><ul>
<li>既然之前的拦截器无法对不需要拦截的路径生效，那么我们可以添加一个拦截器，在第一个拦截器中拦截所有的路径，把第二个拦截器做的事情放入到第一个拦截器中，同时刷新令牌，因为第一个拦截器有了threadLocal的数据，所以此时第二个拦截器只需要判断拦截器中的user对象是否存在即可，完成整体刷新功能。</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>新建一个<code>RefreshTokenInterceptor</code>类，其业务逻辑与之前的<code>LoginInterceptor</code>类似，就算遇到用户未登录，也继续放行，交给<code>LoginInterceptor</code>处理<br>由于这个对象是我们手动在WebConfig里创建的，所以这里不能用@AutoWired自动装配，只能声明一个私有的，到了WebConfig里再自动装配<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//这里并不是自动装配，因为RefreshTokenInterceptor是我们手动在WebConfig里new出来的</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 如果token是空，直接放行，交给LoginInterceptor处理</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY + token;</span><br><span class="line">        <span class="comment">//3. 基于token获取Redis中的用户数据</span></span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">        <span class="comment">//4. 判断用户是否存在，不存在，也放行，交给LoginInterceptor</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 将查询到的Hash数据转化为UserDto对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//6. 将用户信息保存到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">//7. 刷新tokenTTL，这里的存活时间根据需要自己设置，这里的常量值我改为了30分钟</span></span><br><span class="line">        stringRedisTemplate.expire(key, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改之前的<code>LoginInterceptor</code>类，只需要判断用户是否存在，不存在，则拦截，存在则放行<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//不存在则拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存在则放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h1><h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><pre><code>- 就像自行车,越野车的避震器
</code></pre>
<ul>
<li>举个例子:<ul>
<li>越野车,山地自行车,都拥有<code>&quot;避震器&quot;</code>,<code>**防止**</code>车体加速后因惯性,在酷似”U”字母的地形上飞跃,硬着陆导致的<code>**损害**</code>,像个弹簧一样;</li>
</ul>
</li>
<li>同样,实际开发中,系统也需要<code>&quot;避震器&quot;</code>,防止过高的数据访问猛冲系统,导致其操作线程无法及时处理信息而瘫痪;</li>
<li>这在实际开发中对企业讲,对产品口碑,用户评价都是致命的;所以企业非常重视缓存技术;</li>
<li><code>**缓存(**Cache)</code>,就是数据交换的<strong>缓冲区</strong>,俗称的缓存就是<code>**缓冲区内的数据**</code>,一般从数据库中获取,存储于本地代码,例如:</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">本地用于高并发</button></li><li class="tab"><button type="button" data-href="#tab1-2">用于redis等缓存</button></li><li class="tab"><button type="button" data-href="#tab1-3">本地缓存</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Static <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Cache&lt;K,V&gt; USER_CACHE = CacheBuilder.newBuilder().build(); </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Static <span class="keyword">final</span> Map&lt;K,V&gt; map =  <span class="keyword">new</span> <span class="title class_">HashMap</span>(); </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>由于其被<code>**Static**</code>修饰,所以随着类的加载而被加载到<code>**内存之中**</code>,作为本地缓存,由于其又被<code>**final**</code>修饰,所以其引用(例3:map)和对象(例3:new HashMap())之间的关系是固定的,不能改变,因此不用担心赋值(&#x3D;)导致缓存失效;</li>
</ul>
<h3 id="为什么要使用缓存"><a href="#为什么要使用缓存" class="headerlink" title="为什么要使用缓存"></a>为什么要使用缓存</h3><ul>
<li>言简意赅：速度快，好用</li>
<li>缓存数据存储于代码中，而代码运行在内存中，内存的读写性能远高于磁盘，缓存可以大大降低用户访问并发量带来的服务器读写压力</li>
<li>实际开发中，企业的数据量，少则几十万，多则几千万，这么大的数据量，如果没有缓存来作为<code>避震器</code>系统是几乎撑不住的，所以企业会大量运- 用缓存技术</li>
<li>但是缓存也会增加代码复杂度和运营成本</li>
<li><code>缓存的作用</code></li>
<li>降低后端负载</li>
<li>提高读写效率，降低响应时间</li>
<li><code>缓存的成本</code></li>
<li>数据一致性成本</li>
<li>代码维护成本</li>
<li>运维成本（一般采用服务器集群，需要多加机器，机器就是钱）</li>
</ul>
<h3 id="如何使用缓存"><a href="#如何使用缓存" class="headerlink" title="如何使用缓存"></a>如何使用缓存</h3><p>实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用</p>
<ul>
<li><p><code>浏览器缓存</code>：主要是存在于浏览器端的缓存</p>
</li>
<li><p><code>应用层缓存</code>：可以分为tomcat本地缓存，比如之前提到的map，或者是使用redis作为缓存</p>
</li>
<li><p><code>数据库缓存</code>：在数据库中有一片空间是 buffer pool，增改查数据都会先加载到mysql的缓存中</p>
</li>
<li><p><code>CPU缓存</code>：当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存</p>
</li>
</ul>
<h2 id="添加商户缓存"><a href="#添加商户缓存" class="headerlink" title="添加商户缓存"></a>添加商户缓存</h2><ul>
<li>我们先启动前端和后端的项目，登陆之后随便访问一个商户，查看浏览器发送的请求<blockquote>
<p>请求网址: <a href="http://localhost:8080/api/shop/10">http://localhost:8080/api/shop/10</a><br>请求方法: GET</p>
</blockquote>
</li>
<li>在我们查询商户信息时，我们是直接操作从数据库中去进行查询的，大致逻辑是这样，直接查询数据库肯定慢<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shopService.getById(id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>所以我们可以在客户端与数据库之间加上一个Redis缓存，先从Redis中查询，如果没有查到，再去MySQL中查询，同时查询完毕之后，将查询到的数据也存入Redis，这样当下一个用户来进行查询的时候，就可以直接从Redis中获取到数据</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/64899a031ddac507ccaa26ea.jpg"></p>
<h3 id="缓存模型和思路"><a href="#缓存模型和思路" class="headerlink" title="缓存模型和思路"></a>缓存模型和思路</h3><ul>
<li>标准的操作方式就是查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入Redis。<br><img src="https://pic.imgdb.cn/item/64899a111ddac507ccaa51f2.jpg"></li>
</ul>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><ul>
<li>代码思路：如果Redis缓存里有数据，那么直接返回，如果缓存中没有，则去查询数据库，然后存入Redis<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Controller</button></li><li class="tab"><button type="button" data-href="#tab1-2">Service</button></li><li class="tab"><button type="button" data-href="#tab1-3">ServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查询商铺信息</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Result <span class="title function_">queryById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到返回一个错误信息或者返回空都可以，根据自己的需求来</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li>
</ul>
<p>重启服务器，访问商户信息，观察控制台日志输出，后续刷新页面，不会出现SQL语句查询商户信息，去Redis图形化界面中查看，可以看到缓存的商户信息数据</p>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul>
<li>商户的缓存一起做了</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Controller</button></li><li class="tab"><button type="button" data-href="#tab1-2">Service</button></li><li class="tab"><button type="button" data-href="#tab1-3">ServiceImpl(String类型实现)</button></li><li class="tab"><button type="button" data-href="#tab1-4">ServiceImpl(List类型实现)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> typeService.listS();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IShopTypeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShopType&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Result <span class="title function_">listS</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">listS</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_TYPE_KEY;</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(jsonStr))&#123;</span><br><span class="line">        List&lt;ShopType&gt; list = JSON.parseArray(jsonStr, ShopType.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(list);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ShopType&gt; tmp = typeService.query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key,JSON.toJSONString(tmp));</span><br><span class="line">    <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商铺信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listS</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_TYPE_KEY;</span><br><span class="line">        <span class="comment">//  1.查询Redis中是否存在</span></span><br><span class="line">        List&lt;String&gt; temp = stringRedisTemplate.opsForList().range(key, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//  2.如果不为空，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (!temp.isEmpty()) &#123;</span><br><span class="line">            List&lt;ShopType&gt; types = temp.stream().map(item -&gt;</span><br><span class="line">                    JSONUtil.toBean(item, ShopType.class)).collect(Collectors.toList());</span><br><span class="line">            <span class="keyword">return</span> Result.ok(types);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. 否则查询数据库</span></span><br><span class="line">        List&lt;ShopType&gt; tmp = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">        <span class="comment">//4. 校验数据库中是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (tmp.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 5.返回错误结果</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;商铺不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  6.不为空则添加进缓存</span></span><br><span class="line">        List&lt;String&gt; collect = tmp.stream().map(type -&gt;</span><br><span class="line">                (JSONUtil.toJsonStr(type))</span><br><span class="line">        ).collect(Collectors.toList());</span><br><span class="line">        stringRedisTemplate.opsForList().leftPushAll(key,collect);</span><br><span class="line">        <span class="comment">// 7. 设置有效期</span></span><br><span class="line">        stringRedisTemplate.expire(key,CACHE_SHOP_TYPE_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 返回结果</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><ul>
<li><p>缓存更新是redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们向redis插入太多数据，此时就可能会导致缓存中的数据过多，所以redis会对部分数据进行更新，或者把他叫为淘汰更合适。</p>
</li>
<li><p><strong>内存淘汰：</strong>redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p>
</li>
<li><p><strong>超时剔除：</strong>当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p>
</li>
<li><p><strong>主动更新：</strong>我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">内存淘汰</th>
<th align="center">超时剔除</th>
<th align="center">主动更新</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>说明</strong></td>
<td align="center">不用自己维护，利用Redis的内存淘汰机制，当内存不足时自动淘汰部分数据。下次查询时更新缓存</td>
<td align="center">给缓存添加TTL时间，到期后自动更新缓存</td>
<td align="center">编写业务逻辑，在修改数据库时，更新缓存</td>
</tr>
<tr>
<td align="center"><strong>一致性</strong></td>
<td align="center">差</td>
<td align="center">一般</td>
<td align="center">好</td>
</tr>
<tr>
<td align="center"><strong>维护成本</strong></td>
<td align="center">无</td>
<td align="center">低</td>
<td align="center">高</td>
</tr>
</tbody></table>
<p>业务场景：</p>
<ul>
<li>低一致性需求：使用内存淘汰机制。例如店铺类型的查询缓存</li>
<li>高一致性需求：主动更新，并以超时剔除作为兜底方案。例如店铺详情查询的缓存</li>
</ul>
<h3 id="数据库和缓存不一致解决方案"><a href="#数据库和缓存不一致解决方案" class="headerlink" title="数据库和缓存不一致解决方案"></a>数据库和缓存不一致解决方案</h3><p>由于我们的<strong>缓存的数据源来自于数据库</strong>,而数据库的<strong>数据是会发生变化的</strong>,因此,如果当数据库中<strong>数据发生变化,而缓存却没有同步</strong>,此时就会有<strong>一致性问题存在</strong>,其后果是:</p>
<p>用户使用缓存中的过时数据,就会产生类似多线程数据安全问题,从而影响业务,产品口碑等;怎么解决呢？有如下几种方案</p>
<ul>
<li><p>Cache Aside Pattern 人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案</p>
</li>
<li><p>Read&#x2F;Write Through Pattern : 由系统本身完成，数据库与缓存的问题交由系统本身去处理</p>
</li>
<li><p>Write Behind Caching Pattern ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致</p>
</li>
</ul>
<h3 id="数据库和缓存不一致采用什么方案"><a href="#数据库和缓存不一致采用什么方案" class="headerlink" title="数据库和缓存不一致采用什么方案"></a>数据库和缓存不一致采用什么方案</h3><p>综合考虑使用方案一，但是方案一调用者如何处理呢？这里有几个问题</p>
<p>操作缓存和数据库时有三个问题需要考虑：<br>如果采用第一个方案，那么假设我们每次操作数据库后，都操作缓存，但是中间如果没有人查询，那么这个更新动作实际上只有最后一次生效，中间的更新动作意义并不大，我们可以把缓存删除，等待再次查询时，将缓存中的数据加载出来</p>
<ul>
<li><p>删除缓存还是更新缓存？</p>
<ul>
<li><code>更新缓存</code>：每次更新数据库都更新缓存，无效写操作较多</li>
<li><code>删除缓存</code>：更新数据库时让缓存失效，查询时再更新缓存</li>
</ul>
</li>
<li><p>如何保证缓存与数据库的操作的同时成功或失败？</p>
<ul>
<li><code>单体系统</code>，将缓存与数据库操作放在一个事务</li>
<li><code>分布式系统</code>，利用TCC等分布式事务方案</li>
</ul>
</li>
</ul>
<p>应该具体操作缓存还是操作数据库，我们应当是先操作数据库，再删除缓存，原因在于，如果你选择第一种方案，在两个线程并发来访问时，假设线程1先来，他先把缓存删了，此时线程2过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程1再执行更新动作时，实际上写入的就是旧的数据，新的数据被旧数据覆盖了。</p>
<ul>
<li>先操作缓存还是先操作数据库？<ul>
<li>先删除缓存，再操作数据库<br>删除缓存的操作很快，但是更新数据库的操作相对较慢，如果此时有一个线程2刚好进来查询缓存，由于我们刚刚才删除缓存，所以线程2需要查询数据库，并写入缓存，但是我们更新数据库的操作还未完成，所以线程2查询到的数据是脏数据，出现线程安全问题<br><img src="https://pic.imgdb.cn/item/64899e211ddac507ccb677b7.jpg"></li>
<li>先操作数据库，再删除缓存<br>线程1在查询缓存的时候，缓存TTL刚好失效，需要查询数据库并写入缓存，这个操作耗时相对较短（相比较于上图来说），但是就在这么短的时间内，线程2进来了，更新数据库，删除缓存，但是线程1虽然查询完了数据（更新前的旧数据），但是还没来得及写入缓存，所以线程2的更新数据库与删除缓存，并没有影响到线程1的查询旧数据，写入缓存，造成线程安全问题<br><img src="https://pic.imgdb.cn/item/64899e4d1ddac507ccb7069a.jpg"></li>
</ul>
</li>
</ul>
<ul>
<li>虽然这二者都存在线程安全问题，但是相对来说，后者出现线程安全问题的概率相对较低，所以我们最终采用后者<code>先操作数据库，再删除缓存</code>的方案</li>
</ul>
<h2 id="实现商铺和缓存与数据库双写一致"><a href="#实现商铺和缓存与数据库双写一致" class="headerlink" title="实现商铺和缓存与数据库双写一致"></a>实现商铺和缓存与数据库双写一致</h2><p>核心思路如下：<br>修改ShopController中的业务逻辑，满足下面的需求：<br>2. 根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间<br>3. 根据id修改店铺时，先修改数据库，再删除缓存<br>4. 设置redis缓存时添加过期时间</p>
<ul>
<li>修改ShopService的queryById方法，写入缓存时设置一下TTL<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到返回一个错误信息或者返回空都可以，根据自己的需求来</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr,CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改<code>update</code>方法</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Controller</button></li><li class="tab"><button type="button" data-href="#tab1-2">Service</button></li><li class="tab"><button type="button" data-href="#tab1-3">ServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新商铺信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shop 商铺数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PutMapping</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(<span class="meta">@RequestBody</span> Shop shop)</span> &#123;</span><br><span class="line">       <span class="comment">// 写入数据库</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>  shopService.update(shop);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新商铺信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shop</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Result <span class="title function_">update</span><span class="params">(Shop shop)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 新增商铺信息</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> shop 实体对象</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">saveShop</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">     <span class="comment">//添加到数据库</span></span><br><span class="line">     save(shop);</span><br><span class="line">     <span class="comment">//清理缓存</span></span><br><span class="line">     <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> shop.getId();</span><br><span class="line">     <span class="comment">//加个判断,兜底</span></span><br><span class="line">     <span class="keyword">if</span> (id == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.fail(<span class="string">&quot;商铺ID不能为空&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//删除缓存</span></span><br><span class="line">     stringRedisTemplate.delete(CACHE_SHOP_KEY + id);</span><br><span class="line">     <span class="keyword">return</span> Result.ok();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>修改完毕之后我们重启服务器进行测试，首先随便挑一个顺眼的数据，我这里就是拿餐厅数据做测试，，我们先访问该餐厅，将该餐厅的数据缓存到Redis中，之后使用POSTMAN发送PUT请求，请求路径<a href="http://localhost:8080/api/shop/">http://localhost:8080/api/shop/</a> ，携带JSON数据如下</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大关&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;openHours&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10:00-22:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="number">4215</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;金华路锦昌文华苑29号&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="number">3035</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avgPrice&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;476茶餐厅&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typeId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>之后再Redis图形化页面刷新数据，发现该餐厅的数据确实不在Redis中了，之后我们刷新网页，餐厅名会被改为476茶餐厅，然后我们再去Redis中刷新，发现新数据已经被缓存了</li>
<li>那么现在功能就实现完毕了，只有当我们刷新页面的时候，才会重新查询数据库，并将数据缓存到Redis，中途无论修改多少次，只要不刷新页面访问，Redis中都不会更新数据</li>
</ul>
<h2 id="缓存穿透问题的解决思路"><a href="#缓存穿透问题的解决思路" class="headerlink" title="缓存穿透问题的解决思路"></a>缓存穿透问题的解决思路</h2><p><code>缓存穿透</code> ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p>
<p>常见的解决方案有两种：</p>
<ol>
<li>缓存空对象</li>
</ol>
<ul>
<li>优点：实现简单，维护方便</li>
<li>缺点： 额外的内存消耗,可能造成短期的不一致</li>
</ul>
<ol start="2">
<li>布隆过滤</li>
</ol>
<ul>
<li>优点：内存占用较少，没有多余key</li>
<li>缺点：实现复杂,存在误判可能</li>
</ul>
<ul>
<li><code>缓存空对象思路分析</code>：当我们客户端访问不存在的数据时，会先请求<code>redis</code>，但是此时redis中也没有数据，就会直接访问数据库，但是数据库里也没有数据，那么这个数据就穿透了缓存，<code>直击数据库</code>。但是数据库能承载的并发不如redis这么高，所以如果大量的请求同时都来访问这个不存在的数据，那么这些请求就会访问到数据库，简单的解决方案就是哪怕这个数据在数据库里不存在，我们也把这个这个数据存在redis中去，这样下次用户过来访问这个不存在的数据时，redis缓存中也能找到这个数据，不用去查数据库。可能造成的<code>短期不一致</code>是指在空对象的存活期间，我们更新了数据库，把这个空对象变成了正常的可以访问的数据，但由于空对象的TTL还没过，所以当用户来查询的时候，查询到的还是空对象，等TTL过了之后，才能访问到正确的数据，不过这种情况很少见罢了<br></li>
<li><code>布隆过滤思路分析</code>：布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，根据哈希思想去判断当前这个要查询的数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库里一定会存在这个数据，从数据库中查询到数据之后，再将其放到redis中。如果布隆过滤器判断这个数据不存在，则直接返回。这种思想的优点在于节约内存空间，但存在误判，误判的原因在于：布隆过滤器使用的是哈希思想，只要是哈希思想，都可能存在哈希冲突</li>
</ul>
<h2 id="解决商品查询的缓存穿透问题"><a href="#解决商品查询的缓存穿透问题" class="headerlink" title="解决商品查询的缓存穿透问题"></a>解决商品查询的缓存穿透问题</h2><p>核心思路如下：</p>
<ul>
<li><p>在原来的逻辑中，我们如果发现这个数据在mysql中不存在，直接就返回404了，这样是会存在缓存穿透问题的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到返回一个错误信息或者返回空都可以，根据自己的需求来</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr,CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在的逻辑中：如果这个数据不存在，我们不会返回404 ，还是会把这个数据<code>写入到Redis</code>中，并且将value设置为<code>空</code>，当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果查询到的是空字符串，则说明是我们缓存的空数据</span></span><br><span class="line">    <span class="keyword">if</span> (shopjson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到，则将空字符串写入Redis</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//这里的常量值是2分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>小结：</p>
<p>缓存穿透产生的原因是什么？</p>
<p>客户端发送请求，redis和数据库都不存在该值时，会直接查询到数据库，如果大量null请求攻击数据库，会直接给数据库带来极大压力。<br>缓存穿透的解决方案有哪些？<br><code>缓存null值</code>:客户端发送请求，redis和数据库都不存在，那么数据库给redis发送一条空值的缓存，并设置有效期，那么当客户端再次发送不存在的请求时，直接从redis返回空值和错误信息，减轻了数据库的压力。<br>优点:简单粗暴。<br>缺点:给redis带来额外的内存存储压力和短暂的内存存储的不一致性</p>
<p><code>布隆过滤</code>: 基于一种特殊的布隆算法，对数据进行统计，判断数据是否存在，不存在就不往下执行了<br>缺点:准确性不能保证，实现相对复杂</p>
<p>增强id复杂度，避免被猜测id规律（可以采用雪花算法）<br>做好数据的基础格式校验<br>加强用户权限校验<br>做好热点参数的限流</p>
</blockquote>
<h2 id="缓存雪崩问题及解决思路"><a href="#缓存雪崩问题及解决思路" class="headerlink" title="缓存雪崩问题及解决思路"></a>缓存雪崩问题及解决思路</h2><p>缓存雪崩是指在同一时段大量的缓存key同时<code>失效</code>或者Redis服务<code>宕机</code>，导致<code>大量请求</code>到达数据库，带来巨大压力。</p>
<p>解决方案：</p>
<ul>
<li>给不同的Key的TTL添加随机值</li>
<li>利用Redis集群提高服务的可用性(使用一个或者多个哨兵(<code>Sentinel</code>)实例组成的系统，对redis节点进行监控，在主节点出现故障的情况下，能将从节点中的一个升级为主节点，进行故障转义，保证系统的可用性。)</li>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存(浏览器访问静态资源时，优先读取浏览器本地缓存；访问非静态资源（ajax查询数据）时，访问服务端；请求到达Nginx后，优先读取Nginx本地缓存；如果Nginx本地缓存未命中，则去直接查询Redis（不经过Tomcat）；如果Redis查询未命中，则查询Tomcat；请求进入Tomcat后，优先查询JVM进程缓存；如果JVM进程缓存未命中，则查询数据库)</li>
</ul>
<h2 id="缓存击穿问题及解决思路"><a href="#缓存击穿问题及解决思路" class="headerlink" title="缓存击穿问题及解决思路"></a>缓存击穿问题及解决思路</h2><p>缓存击穿问题也叫热点Key问题，就是一个被<code>高并发访问</code>并且<code>缓存重建业务较复杂</code>的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>
<p>常见的解决方案有两种：</p>
<ul>
<li>互斥锁</li>
<li>逻辑过期</li>
</ul>
<p><code>逻辑分析</code>：假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大<br><img src="https://pic.imgdb.cn/item/6489a27c1ddac507ccc23ce8.jpg"></p>
<ul>
<li>解决方案一、使用锁来解决：<br>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用<code>tryLock</code>方法 + <code>double check</code>来解决这样的问题。</li>
</ul>
<p>假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。<br><img src="https://pic.imgdb.cn/item/6489a2a51ddac507ccc27f0e.jpg"></p>
<p><code>解决方案二</code>:逻辑过期方案</p>
<p>方案分析：我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。</p>
<p>我们把过期时间设置在 redis的value中，注意：这个过期时间并<code>不会直接作用</code>于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p>
<p>这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。类似于数据库中的逻辑删除,逻辑上的删除，但不是现实意义上的删除。<br><img src="https://pic.imgdb.cn/item/6489a3271ddac507ccc3ad26.jpg"></p>
<p>进行对比</p>
<ul>
<li><p><code>互斥锁方案</code>由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响</p>
</li>
<li><p><code>逻辑过期方案</code>线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">解决方案</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">互斥锁</td>
<td align="center"><strong>没有额外的内存消耗</strong>，<strong>保证一致性</strong>，<strong>实现简单</strong></td>
<td align="center"><strong>线程需要等待</strong>，<strong>可能有死锁风险</strong></td>
</tr>
<tr>
<td align="center">逻辑过期</td>
<td align="center"><strong>线程无需等待，性能较好</strong></td>
<td align="center"><strong>不保证一致性</strong>，<strong>有额外内存消耗</strong>，<strong>实现复杂</strong></td>
</tr>
</tbody></table>
<h2 id="利用互斥锁解决缓存击穿问题"><a href="#利用互斥锁解决缓存击穿问题" class="headerlink" title="利用互斥锁解决缓存击穿问题"></a>利用互斥锁解决缓存击穿问题</h2><p><code>核心思路</code>：相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是 进行查询之后，如果从缓存没有查询到数据，则进行互斥锁的获取，获取互斥锁后，判断是否获得到了锁，如果没有获得到，则休眠，过一会再进行尝试，直到获取到锁为止，才能进行查询</p>
<p>如果获取到了锁的线程，再去进行查询，查询后将数据写入redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑，防止缓存击穿<br><img src="https://pic.imgdb.cn/item/6489a4771ddac507ccc6db79.jpg"></p>
<p><code>操作锁的代码</code><br>核心思路就是利用redis的setnx方法来表示获取锁，该方法含义是redis中如果没有这个key，则插入成功，返回1，在stringRedisTemplate中返回true，  如果有这个key则插入失败，则返回0，在stringRedisTemplate返回false，我们可以通过true，或者是false，来表示是否有线程成功插入key，成功插入的key的线程我们认为他就是获得到锁的线程。</p>
<p>创建自定义锁和解锁方法</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">tryLock</button></li><li class="tab"><button type="button" data-href="#tab1-2">unlock</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//互斥锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//为了避免null值，这里使用BooleanUtil工具类</span></span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//释放锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">//直接从缓存删除即可</span></span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li><p>然后这里把之前写的缓存穿透代码修改一下，提取成一个独立的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (shopjson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>之后编写我们的互斥锁代码，其实与缓存穿透代码类似，只需要在上面稍加修改即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//互斥锁解决缓存击穿</span></span><br><span class="line">    <span class="keyword">private</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">//3.命中，返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.判断是否命中空值</span></span><br><span class="line">        <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 未命中，实现缓存重建</span></span><br><span class="line">        <span class="comment">//4.1 尝试获取互斥锁</span></span><br><span class="line">        <span class="comment">//这里锁的key和前面缓存的key不是同一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//4.2  判断是否获取锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="comment">//4.3 未获取到锁，休眠并充实</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.2 获取互斥锁成功</span></span><br><span class="line">            <span class="comment">//4.3 校验redis中是否存在，如果存在则无需重建缓存</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">doubleCheckShop</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(doubleCheckShop)) &#123;</span><br><span class="line">                <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.4 获取到锁，根据id查询数据库</span></span><br><span class="line">            shop = getById(id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟重建休眠延时</span></span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.判断数据库是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//6.数据库中不存在，将空值写入redis,返回错误信息</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//7. 数据库中存在，将其存入缓存</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//8.释放互斥锁</span></span><br><span class="line">            unlock(LOCK_SHOP_KEY + id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9.返回</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改queryById方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用Jmeter进行测试</p>
<ul>
<li>我们先来模拟一下缓存击穿的情景，缓存击穿是指在某时刻，一个热点数据的TTL到期了，此时用户不能从Redis中获取热点商品数据，然后就都得去数据库里查询，造成数据库压力过大。</li>
<li>那么我们首先将Redis中的热点商品数据删除，模拟TTL到期，然后用Jmeter进行压力测试，开100个线程来访问这个没有缓存的热点数据<ul>
<li>如果后台日志只输出了一条SQL语句，则说明我们的互斥锁是生效的，没有造成大量用户都去查询数据库，执行SQL语句</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">: ==&gt;  Preparing: SELECT id,name,type_id,images,area,address,x,y,avg_price,sold,comments,score,open_hours,create_time,update_time FROM tb_shop WHERE id=?</span><br><span class="line">: ==&gt; Parameters: 2(Long)</span><br><span class="line">: &lt;==      Total: 1</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6489a7211ddac507ccce8523.jpg"><br><img src="https://pic.imgdb.cn/item/6489a77e1ddac507cccf2400.jpg"></p>
<blockquote>
<p>下载地址:<a href="https://jmeter.apache.org/download_jmeter.cgi">https://jmeter.apache.org/download_jmeter.cgi</a></p>
</blockquote>
<h2 id="利用逻辑过期解决击穿问题"><a href="#利用逻辑过期解决击穿问题" class="headerlink" title="利用逻辑过期解决击穿问题"></a>利用逻辑过期解决击穿问题</h2><ul>
<li><code>需求</code>：修改根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题</li>
</ul>
<p><code>思路分析</code>：当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。<br><img src="https://pic.imgdb.cn/item/6489a80a1ddac507ccd0874f.jpg"></p>
<ul>
<li>封装数据：因为现在redis中存储的数据的value需要带上过期时间，此时要么你去修改原来的实体类，要么新建一个类包含原有的数据和过期时间</li>
<li><code>步骤一</code></li>
<li>这里我们选择新建一个实体类，包含原有数据(用万能的Object)和过期时间，这样对原有的代码没有侵入性<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>步骤二</code></p>
<ul>
<li><p>在ShopServiceImpl中新增方法，进行单元测试，进行缓存预热</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expirSeconds)</span> &#123;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expirSeconds));</span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HmDianPingApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShopServiceImpl shopService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSaveShop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        shopService.saveShop2Redis(<span class="number">1L</span>,<span class="number">10L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行测试方法，查看缓存确实包含了data和expireTime1<br><img src="https://pic.imgdb.cn/item/6489a9cf1ddac507ccd4f3ca.jpg"><br><code>步骤三</code></p>
</li>
<li><p>正式代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑过期</span></span><br><span class="line">    <span class="keyword">private</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">        <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">//3.未命中直接返回空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 命中，将json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">//5. 判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//5.1未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.2 已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">//6. 缓存重建</span></span><br><span class="line">        <span class="comment">//6.1获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">lock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//这里锁的key和前面缓存的key不是同一个</span></span><br><span class="line">        <span class="comment">//6.2  判断是否获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">//检测reids缓存是否过期</span></span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">doubleCheckExpireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">            <span class="keyword">if</span> (doubleCheckExpireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">                <span class="keyword">return</span> shop;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 6.3 开启独立线程，当前线程返回商铺信息</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.saveShop2Redis(id, <span class="number">20L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.4 未获取到锁</span></span><br><span class="line">        <span class="comment">//返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Jmeter进行测试</p>
</li>
<li><p>先来复现一遍场景，当某个用户去Redis中访问缓存的数据时，发现该数据已经过期了，于是新开一个线程去重构缓存数据，但在重构完成之前，用户得到的数据都是脏数据，重构完成之后，才是新数据</p>
</li>
<li><p>那我们先使用saveShop2Redis方法，向redis中添加一个逻辑过期数据，设置过期时间为2秒，这样很快就过期了，</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">saveShop2Redis</button></li><li class="tab"><button type="button" data-href="#tab1-2">Test</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装RedisData</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expireSeconds)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="comment">//查询店铺数据</span></span><br><span class="line">       <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">       Thread.sleep(<span class="number">200</span>);</span><br><span class="line">       <span class="comment">//封装逻辑过期时间</span></span><br><span class="line">       <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">       redisData.setData(shop);</span><br><span class="line">       redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line">       <span class="comment">//写入reids</span></span><br><span class="line">       stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">2L</span>,<span class="number">2L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li>
</ul>
<h2 id="封装Redis工具类"><a href="#封装Redis工具类" class="headerlink" title="封装Redis工具类"></a>封装Redis工具类</h2><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：</p>
<ul>
<li><p>方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, timeUnit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓存击穿问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicExpire</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    <span class="comment">//由于需要设置逻辑过期时间，所以我们需要用到RedisData</span></span><br><span class="line">    RedisData&lt;Object&gt; redisData = <span class="keyword">new</span> <span class="title class_">RedisData</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//redisData的data是传进来的value对象</span></span><br><span class="line">    redisData.setData(value);</span><br><span class="line">    <span class="comment">//逻辑过期时间就是当前时间加上传进来的参数时间，用TimeUnit可以将时间转为秒，随后与当前时间相加</span></span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(time)));</span><br><span class="line">    <span class="comment">//由于是逻辑过期，这里不需要设置过期时间，只存一下key和value就好了，同时注意value是ridisData类型</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">原方法</button></li><li class="tab"><button type="button" data-href="#tab1-2">通用型</button></li><li class="tab"><button type="button" data-href="#tab1-3">使用方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">      <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">          <span class="comment">//3.命中，返回商铺信息</span></span><br><span class="line">          <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//返回错误信息</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4.未命中，根据id查询数据库</span></span><br><span class="line">      <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//5.判断数据库是否存在</span></span><br><span class="line">      <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//6.数据库中不存在，将空值写入redis,返回错误信息</span></span><br><span class="line">          stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//7. 数据库中存在，将其存入缓存</span></span><br><span class="line">      stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//8.向前端返回结果</span></span><br><span class="line">      <span class="keyword">return</span> shop;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><ul>
<li>改为通用方法，那么返回值就需要进行修改，不能返回<code>Shop</code>了，那我们直接设置一个泛型，同时ID的类型，也不一定都是<code>Long</code>类型，所以我们也采用泛型。</li>
<li>Key的前缀也会随着业务需求的不同而修改，所以参数列表里还需要加入Key的前缀</li>
<li>通过id去数据库查询的具体业务需求我们也不清楚，所以我们也要在参数列表中加入一个查询数据库逻辑的函数</li>
<li>最后再加上设置TTL需要的两个参数</li>
<li>那么综上所述，我们的参数列表需要<ul>
<li>key前缀</li>
<li>id（类型泛型）</li>
<li>返回值类型（泛型）</li>
<li>查询的函数</li>
<li>TTL需要的两个参数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(</span></span><br><span class="line"><span class="params">        String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallback,Long time,TimeUnit timeUnit)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">        <span class="comment">//3.命中，返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.未命中，根据id查询数据库</span></span><br><span class="line">    <span class="comment">//不知道调用着查询的什么库，所以采用函数式编程，让调用者告诉我们</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.判断数据库是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//6.数据库中不存在，将空值写入redis,返回错误信息</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. 数据库中存在，将其存入缓存</span></span><br><span class="line">    <span class="built_in">this</span>.set(key,r,time,timeUnit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.向前端返回结果</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> cacheClient.</span><br><span class="line">            queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, <span class="built_in">this</span>::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
<li><p>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题,将逻辑进行封装</p>
<br></li>
</ul>
<p>参考上面思路</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//缓存穿透参考缓存击穿</span></span><br><span class="line">  <span class="comment">//逻辑过期</span></span><br><span class="line">  <span class="keyword">public</span>  &lt;R,ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(</span></span><br><span class="line"><span class="params">          String keyPrefix, ID id,Class&lt;R&gt; type,Function&lt;ID,R&gt; dbFallback,Long time,TimeUnit timeUnit)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">      <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">Json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">      <span class="keyword">if</span> (StrUtil.isBlank(Json)) &#123;</span><br><span class="line">          <span class="comment">//3.未命中直接返回空</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//4. 命中，将json反序列化为对象</span></span><br><span class="line">      <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(Json, RedisData.class);</span><br><span class="line">      <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">      <span class="comment">//5. 判断是否过期</span></span><br><span class="line">      <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">          <span class="comment">//5.1未过期，直接返回店铺信息</span></span><br><span class="line">          <span class="keyword">return</span> r;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//5.2 已过期，需要缓存重建</span></span><br><span class="line">      <span class="comment">//6. 缓存重建</span></span><br><span class="line">      <span class="comment">//6.1获取互斥锁</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">lock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">      <span class="comment">//这里锁的key和前面缓存的key不是同一个</span></span><br><span class="line">      <span class="comment">//6.2  判断是否获取锁</span></span><br><span class="line">      <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">          <span class="comment">//检测reids缓存是否过期</span></span><br><span class="line">          <span class="type">LocalDateTime</span> <span class="variable">doubleCheckExpireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">          <span class="keyword">if</span> (doubleCheckExpireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">              <span class="keyword">return</span> r;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 6.3 开启独立线程，当前线程返回商铺信息</span></span><br><span class="line">          CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">//重建缓存</span></span><br><span class="line">                  <span class="comment">// 1.查询数据库</span></span><br><span class="line">                  <span class="type">R</span> <span class="variable">r1</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                  <span class="comment">//2. 写入redis</span></span><br><span class="line">                  <span class="built_in">this</span>.setWithLogicalExpire(key,r1,time,timeUnit);</span><br><span class="line"></span><br><span class="line">              &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">              &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  <span class="comment">//释放锁</span></span><br><span class="line">                  unlock(lockKey);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//6.4 未获取到锁</span></span><br><span class="line">      <span class="comment">//返回过期的商铺信息</span></span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>方法5：根据指定的Key查询缓存，并反序列化为指定类型，需要利用互斥锁解决缓存击穿问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//    互斥锁解决缓存击穿和缓存穿透</span></span><br><span class="line">    <span class="keyword">private</span> &lt;R,ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(String keyPrefix,ID id,Class&lt;R&gt; type,Function&lt;ID,R&gt; dbFallback,Long time,TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">//3.命中，返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.判断是否命中空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 未命中，实现缓存重建</span></span><br><span class="line">        <span class="comment">//4.1 尝试获取互斥锁</span></span><br><span class="line">        <span class="comment">//这里锁的key和前面缓存的key不是同一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//4.2  判断是否获取锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="comment">//4.3 未获取到锁，休眠并重试</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(keyPrefix,id,type,dbFallback,time,timeUnit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.2 获取互斥锁成功</span></span><br><span class="line">            <span class="comment">//4.3 校验redis中是否存在，如果存在则无需重建缓存</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">doubleCheckShop</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(doubleCheckShop)) &#123;</span><br><span class="line">                <span class="comment">//这里做doubleCheck</span></span><br><span class="line">                <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.4 获取到锁，根据id查询数据库</span></span><br><span class="line">           r = dbFallback.apply(id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟重建休眠延时</span></span><br><span class="line"><span class="comment">//            Thread.sleep(200);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.判断数据库是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//6.数据库中不存在，将空值写入redis,返回错误信息</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//7. 数据库中存在，将其存入缓存</span></span><br><span class="line">            <span class="built_in">this</span>.set(key, JSONUtil.toJsonStr(r),time, timeUnit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//8.释放互斥锁</span></span><br><span class="line">            unlock(LOCK_SHOP_KEY + id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9.返回</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.RedisData;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.Shop;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存工具封装</span></span><br><span class="line"><span class="comment"> * 方法1：将任意java对象序列化为json并存储在string类型的key中，并且可以设置ttl过期时间</span></span><br><span class="line"><span class="comment"> * 方法2：将任意java对象序列化为json并存储在string类型的key中，并可以设置逻辑过期时间，用于处理缓存击穿问题</span></span><br><span class="line"><span class="comment"> * 方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</span></span><br><span class="line"><span class="comment"> * 方法4：根据指定key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//互斥锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//为了避免null值，这里使用BooleanUtil工具类</span></span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建线程池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="comment">//设置逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(time));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于不知道调用者使用什么类型，所以采用泛型,id同理</span></span><br><span class="line">    <span class="comment">//那么我还需要调用者传回id的前置</span></span><br><span class="line">    <span class="comment">//调用数据库时需要调用者的查库逻辑</span></span><br><span class="line">    <span class="comment">//最后设置的时间和时间类型</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">//3.命中，返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.未命中，根据id查询数据库</span></span><br><span class="line">        <span class="comment">//不知道调用着查询的什么库，所以采用函数式编程，让调用者告诉我们</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断数据库是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//6.数据库中不存在，将空值写入redis,返回错误信息</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7. 数据库中存在，将其存入缓存</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, timeUnit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.向前端返回结果</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存穿透参考缓存击穿</span></span><br><span class="line">    <span class="comment">//逻辑过期</span></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">Json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(Json)) &#123;</span><br><span class="line">            <span class="comment">//3.未命中直接返回空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4. 命中，将json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(Json, RedisData.class);</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">//5. 判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//5.1未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.2 已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">//6. 缓存重建</span></span><br><span class="line">        <span class="comment">//6.1获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">lock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//这里锁的key和前面缓存的key不是同一个</span></span><br><span class="line">        <span class="comment">//6.2  判断是否获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">//检测reids缓存是否过期</span></span><br><span class="line">            <span class="type">LocalDateTime</span> <span class="variable">doubleCheckExpireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">            <span class="keyword">if</span> (doubleCheckExpireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 6.3 开启独立线程，当前线程返回商铺信息</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//重建缓存</span></span><br><span class="line">                    <span class="comment">// 1.查询数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">r1</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">//2. 写入redis</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, r1, time, timeUnit);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.4 未获取到锁</span></span><br><span class="line">        <span class="comment">//返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    互斥锁解决缓存击穿和缓存穿透</span></span><br><span class="line">    <span class="keyword">private</span> &lt;R, ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.从redis里查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断缓存是否命中</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">//3.命中，返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.判断是否命中空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 未命中，实现缓存重建</span></span><br><span class="line">        <span class="comment">//4.1 尝试获取互斥锁</span></span><br><span class="line">        <span class="comment">//这里锁的key和前面缓存的key不是同一个</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//4.2  判断是否获取锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="comment">//4.3 未获取到锁，休眠并重试</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, timeUnit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//4.2 获取互斥锁成功</span></span><br><span class="line">            <span class="comment">//4.3 校验redis中是否存在，如果存在则无需重建缓存</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">doubleCheckShop</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isNotBlank(doubleCheckShop)) &#123;</span><br><span class="line">                <span class="comment">//这里做doubleCheck</span></span><br><span class="line">                <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.4 获取到锁，根据id查询数据库</span></span><br><span class="line">            r = dbFallback.apply(id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟重建休眠延时</span></span><br><span class="line"><span class="comment">//            Thread.sleep(200);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.判断数据库是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//6.数据库中不存在，将空值写入redis,返回错误信息</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//7. 数据库中存在，将其存入缓存</span></span><br><span class="line">            <span class="built_in">this</span>.set(key, JSONUtil.toJsonStr(r), time, timeUnit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//8.释放互斥锁</span></span><br><span class="line">            unlock(LOCK_SHOP_KEY + id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//9.返回</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h1><h2 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h2><ul>
<li><p>在各类购物App中，都会遇到商家发放的优惠券</p>
</li>
<li><p>当用户抢购时，就会生成订单并保存到<code>tb_voucher_order</code>这张表中，而订单表如果使用数据库自增ID就存在一些问题：</p>
<ul>
<li>id的规律性太明显</li>
<li>受单表数据量的限制</li>
</ul>
</li>
<li><p>如果我们的id具有太明显的规则，用户或者说商业对手很容易猜测出来我们的一些敏感信息，比如商城在一天时间内，卖出了多少单，这明显不合适。</p>
</li>
<li><p>随着我们商城规模越来越大，mysql的单表的容量不宜超过500W，数据量过大之后，我们要进行拆库拆表，但拆分表了之后，他们从逻辑上讲他们是同一张表，所以他们的id是不能一样的， 于是乎我们需要保证id的唯一性。</p>
</li>
<li><p>那就要引出我们的<strong>全局ID生成器</strong>，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：</p>
<ul>
<li>唯一性</li>
<li>高可用</li>
<li>高性能</li>
<li>递增性</li>
<li>安全性</li>
</ul>
</li>
<li><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其他信息</p>
</li>
<li><p>ID组成部分</p>
<ul>
<li>符号位：1bit，永远为0</li>
<li>时间戳：31bit，以秒为单位，可以使用69年（2^31秒约等于69 - 年）</li>
<li>序列号：32bit，秒内的计数器，支持每秒传输2^32个不同ID</li>
</ul>
</li>
<li><p>根据分析实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//设置一下起始时间，时间戳就是起始时间与当前时间的秒数差</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">tmp</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    System.out.println(tmp.toEpochSecond(ZoneOffset.UTC));</span><br><span class="line">    <span class="comment">//结果为1640995200L</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneOffset;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成全局唯一id；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1640995200L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisIdWorker</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timestamp</span> <span class="operator">=</span> nowSecond - BEGIN_TIMESTAMP;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.生成序列号</span></span><br><span class="line">        <span class="comment">// 2.1.获取当前日期，精确到天</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="comment">// 2.2.自增长</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;icr:&quot;</span> + keyPrefix + <span class="string">&quot;:&quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.拼接并返回</span></span><br><span class="line">        <span class="keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="添加优惠券"><a href="#添加优惠券" class="headerlink" title="添加优惠券"></a>添加优惠券</h2><ul>
<li>每个店铺度可以发布优惠券，分为平价券和特价券，平价券可以任意购买，而特价券需要秒杀抢购</li>
<li>tb_voucher：优惠券的基本信息，优惠金额、使用规则等</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Field</th>
<th align="center">Type</th>
<th align="center">Collation</th>
<th align="center">Null</th>
<th align="center">Key</th>
<th align="center">Default</th>
<th align="center">Extra</th>
<th align="center">Comment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">bigint<br>unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center">PRI</td>
<td align="center">(NULL)</td>
<td align="center">auto_increment</td>
<td align="center">主键</td>
</tr>
<tr>
<td align="center">shop_id</td>
<td align="center">bigint<br>unsigned</td>
<td align="center">(NULL)</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">商铺id</td>
</tr>
<tr>
<td align="center">title</td>
<td align="center">varchar(255)</td>
<td align="center">utf8mb4_general_ci</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">代金券标题</td>
</tr>
<tr>
<td align="center">sub_title</td>
<td align="center">varchar(255)</td>
<td align="center">utf8mb4_general_ci</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">副标题</td>
</tr>
<tr>
<td align="center">rules</td>
<td align="center">varchar(1024)</td>
<td align="center">utf8mb4_general_ci</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">使用规则</td>
</tr>
<tr>
<td align="center">pay_value</td>
<td align="center">bigint<br>unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">支付金额，单位是分。例如200代表2元</td>
</tr>
<tr>
<td align="center">actual_value</td>
<td align="center">bigint</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">抵扣金额，单位是分。例如200代表2元</td>
</tr>
<tr>
<td align="center">type</td>
<td align="center">tinyint<br>unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">0</td>
<td align="center"></td>
<td align="center">0,普通券；<br>1,秒杀券</td>
</tr>
<tr>
<td align="center">status</td>
<td align="center">tinyint<br>unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">1</td>
<td align="center"></td>
<td align="center">0,普通券；1,秒杀券</td>
</tr>
<tr>
<td align="center">create_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED</td>
<td align="center">0,普通券；1,秒杀券</td>
</tr>
<tr>
<td align="center">update_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED<br>on update<br>CURRENT_TIMESTAMP</td>
<td align="center">更新时间</td>
</tr>
</tbody></table>
<ul>
<li>tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Field</th>
<th align="center">Type</th>
<th align="center">Collation</th>
<th align="center">Null</th>
<th align="center">Key</th>
<th align="center">Default</th>
<th align="center">Extra</th>
<th align="center">Comment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">voucher_id</td>
<td align="center">bigint<br>unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center">PRI</td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">关联的优惠券的id</td>
</tr>
<tr>
<td align="center">stock</td>
<td align="center">int</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">库存</td>
</tr>
<tr>
<td align="center">create_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED</td>
<td align="center">创建时间</td>
</tr>
<tr>
<td align="center">begin_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED</td>
<td align="center">生效时间</td>
</tr>
<tr>
<td align="center">end_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED</td>
<td align="center">失效时间</td>
</tr>
<tr>
<td align="center">update_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED<br>on update<br>CURRENT_TIMESTAMP</td>
<td align="center">更新时间</td>
</tr>
</tbody></table>
<ul>
<li><p>平价券由于优惠力度并不是很大，所以是可以任意领取</p>
</li>
<li><p>而代金券由于优惠力度大，所以像第二种券，就得限制数量，从表结构上也能看出，特价券除了具有优惠券的基本信息以外，还具有库存，抢购时间，结束时间等等字段</p>
</li>
<li><p>添加优惠券的代码已经提供好了</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">新增普通券</button></li><li class="tab"><button type="button" data-href="#tab1-2">新增秒杀券</button></li><li class="tab"><button type="button" data-href="#tab1-3">新增秒杀券业务逻辑</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>新增普通券，也就只是将普通券的信息保存到表中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增普通券</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> voucher 优惠券信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 优惠券id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">addVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">       voucherService.save(voucher);</span><br><span class="line">       <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><p>新增秒杀券主要看<code>addSeckillVoucher</code>中的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 新增秒杀券</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> voucher 优惠券信息，包含秒杀信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 优惠券id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;seckill&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">addSeckillVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">       voucherService.addSeckillVoucher(voucher);</span><br><span class="line">       <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><p>秒杀券可以看做是一种特殊的普通券，将普通券信息保存到普通券表中，同时将秒杀券的数据保存到秒杀券表中，通过券的ID进行关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    <span class="comment">// 关联普通券id</span></span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    <span class="comment">// 设置库存</span></span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    <span class="comment">// 设置开始时间</span></span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    <span class="comment">// 设置结束时间</span></span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    <span class="comment">// 保存信息到秒杀券表中</span></span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

</li>
<li><p>由于这里并没有后台管理页面，所以我们只能用POSTMAN模拟发送请求来新增秒杀券，请求路径<a href="http://localhost:8081/voucher/seckill%EF%BC%8C">http://localhost:8081/voucher/seckill，</a> 请求方式POST，JSON数据如下，注意优惠券的截止日期设置，若优惠券过期，则不会在页面上显示。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shopId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;100元代金券&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subTitle&quot;</span><span class="punctuation">:</span><span class="string">&quot;周一至周五可用&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span><span class="string">&quot;全场通用\\n无需预约\\n可无限叠加&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payValue&quot;</span><span class="punctuation">:</span><span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;actualValue&quot;</span><span class="punctuation">:</span><span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span><span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;beginTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-01-01T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;endTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-10-31T23:59:59&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6491c61a1ddac507cc9b016d.jpg"></p>
</li>
</ul>
<h2 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h2><p>下单核心思路：当我们点击<code>抢购</code>时，会触发右侧的请求，我们只需要编写对应的controller即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">请求网址: http:<span class="comment">//localhost:8080/api/voucher-order/seckill/13</span></span><br><span class="line">请求方法: POST</span><br></pre></td></tr></table></figure>
<p>看样子是<code>VoucherOrderController</code>里的方法<br>秒杀下单应该思考的内容：</p>
<p>下单时需要判断两点：</p>
<ul>
<li>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单</li>
<li>库存是否充足，不足则无法下单<br>下单核心逻辑分析：</li>
</ul>
<p>当用户开始进行下单，我们应当去查询优惠卷信息，查询到优惠卷信息，判断是否满足秒杀条件</p>
<p>比如时间是否充足，如果时间充足，则进一步判断库存是否足够，如果两者都满足，则扣减库存，创建订单，然后返回订单id，如果有一个条件不满足则直接结束。</p>
<p><img src="https://www.enjoy2077.top/2023/06/20/SpringBoot%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5/index.html"></p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">Controller</button></li><li class="tab"><button type="button" data-href="#tab1-2">Service</button></li><li class="tab"><button type="button" data-href="#tab1-3">ServiceImpl</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;seckill/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long voucherId)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> voucherOrderService.seckillVoucher(voucherId);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询优惠券</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line">    <span class="comment">// 2.判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀尚未开始！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.判断秒杀是否已经结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 尚未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5，扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock= stock -1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">//扣减库存</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 6.1.订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">// 6.2.用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 6.3.代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


<h2 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h2><p>我们之前的代码其实是有问题的，当遇到高并发场景时，会出现超卖现象，我们可以用Jmeter开200个线程来模拟抢优惠券的场景，URL为 localhost:8081&#x2F;voucher-order&#x2F;seckill&#x2F;20，请求方式为POST<br><img src="https://pic.imgdb.cn/item/6492f0de1ddac507cc4884a1.jpg"></p>
<p>测试完毕之后，查看数据库中的订单表，我们明明只设置了100张优惠券，却有166条数据，去优惠券表查看，库存为-66，超卖了66张</p>
<ul>
<li>先来看看我们的代码中是怎么写的<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//4. 判断库存是否充足</span></span><br><span class="line"><span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券已被抢光了哦，下次记得手速快点&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5. 扣减库存</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>假设现在只剩下一张优惠券，线程1过来查询库存，判断库存数大于1，但还没来得及去扣减库存，此时库线程2也过来查询库存，发现库存数也大于1，那么这两个线程都会进行扣减库存操作，最终相当于是多个线程都进行了扣减库存，那么此时就会出现超卖问题</p>
<ul>
<li>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：而对于加锁，我们通常有两种解决方案</li>
</ul>
<ol>
<li>悲观锁<ul>
<li>悲观锁认为线程安全问题一定会发生，因此在操作数据之前先获取锁，确保线程串行执行    </li>
<li>例如Synchronized、Lock等，都是悲观锁</li>
</ul>
</li>
<li>乐观锁<ul>
<li>乐观锁认为线程安全问题不一定会发生，因此不加锁，只是在更新数据的时候再去判断有没有其他线程对数据进行了修改<ul>
<li>如果没有修改，则认为自己是安全的，自己才可以更新数据</li>
<li>如果已经被其他线程修改，则说明发生了安全问题，此时可以重试或者异常</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><code>悲观锁</code>：悲观锁可以实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等<br></li>
<li><code>乐观锁</code>：乐观锁会有一个版本号，每次操作数据会对版本号<code>+1</code>，再提交回数据时，会去校验是否比之前的版本大1 ，如果大1 ，则进行操作成功，这套机制的核心逻辑在于，如果在操作过程中，版本号只比原来大1 ，那么就意味着操作过程中没有人对他进行过修改，他的操作就是安全的，如果不大1，则数据被修改过，当然乐观锁还有一些变种的处理方式比如CAS</li>
<li>乐观锁的典型代表：就是CAS(Compare-And-Swap)，利用CAS进行无锁化机制加锁，var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 &#x3D;&#x3D; 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> var5;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">&#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"><span class="keyword">return</span> var5;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中do while是为了操作失败时，再次进行自旋操作，即把之前的逻辑再操作一次</p>
</li>
<li><p>该项目中的具体解决方式<br>这里并不需要真的来指定一下<code>版本号</code>，完全可以使用<code>stock</code>来充当版本号，在扣减库存时，比较查询到的优惠券库存和实际数据库中优惠券库存是否相同</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//1. 查询优惠券</span></span><br><span class="line">    queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">    <span class="comment">//2. 判断秒杀时间是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀还未开始，请耐心等待&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 判断秒杀时间是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券已被抢光了哦，下次记得手速快点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">+           .eq(<span class="string">&quot;stock&quot;</span>,seckillVoucher.getStock())</span><br><span class="line">            .update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//6.1 设置订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//6.2 设置用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//6.3 设置代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(id);</span><br><span class="line">    <span class="comment">//7. 将订单数据保存到表中</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="comment">//8. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>以上逻辑的核心含义是：只要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败<br><img src="https://pic.imgdb.cn/item/6492f36a1ddac507cc4c8edb.jpg"></p>
</li>
<li><p>那么我们继续完善代码，修改我们的逻辑，在这种场景，我们可以只判断是否有剩余优惠券，即只要数据库中的库存大于0，都能顺利完成扣减库存操作</p>
</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Result seckillVoucher(Long voucherId) &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    //1. 查询优惠券</span><br><span class="line">    queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">    SeckillVoucher seckillVoucher = seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">    //2. 判断秒杀时间是否开始</span><br><span class="line">    if (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">        return Result.fail(&quot;秒杀还未开始，请耐心等待&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //3. 判断秒杀时间是否结束</span><br><span class="line">    if (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">        return Result.fail(&quot;秒杀已经结束！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //4. 判断库存是否充足</span><br><span class="line">    if (seckillVoucher.getStock() &lt; 1) &#123;</span><br><span class="line">        return Result.fail(&quot;优惠券已被抢光了哦，下次记得手速快点&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //5. 扣减库存</span><br><span class="line">    boolean success = seckillVoucherService.update()</span><br><span class="line">            .setSql(&quot;stock = stock - 1&quot;)</span><br><span class="line">            .eq(&quot;voucher_id&quot;, voucherId)</span><br><span class="line"><span class="deletion">-           .eq(&quot;stock&quot;,seckillVoucher.getStock())</span></span><br><span class="line"><span class="addition">+           .gt(&quot;stock&quot;, 0)</span></span><br><span class="line">            .update();</span><br><span class="line">    if (!success) &#123;</span><br><span class="line">        return Result.fail(&quot;库存不足&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //6. 创建订单</span><br><span class="line">    VoucherOrder voucherOrder = new VoucherOrder();</span><br><span class="line">    //6.1 设置订单id</span><br><span class="line">    long orderId = redisIdWorker.nextId(&quot;order&quot;);</span><br><span class="line">    //6.2 设置用户id</span><br><span class="line">    Long id = UserHolder.getUser().getId();</span><br><span class="line">    //6.3 设置代金券id</span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(id);</span><br><span class="line">    //7. 将订单数据保存到表中</span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    //8. 返回订单id</span><br><span class="line">    return Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务器，继续使用Jmeter进行测试，这次就能顺利将优惠券刚好抢空了</li>
</ul>
<h2 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h2><ul>
<li><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能抢一张</p>
</li>
<li><p>具体操作逻辑如下：我们在判断库存是否充足之后，根据我们保存的订单数据，判断用户订单是否已存在</p>
<ul>
<li>如果已存在，则不能下单，返回错误信息</li>
<li>如果不存在，则继续下单，获取优惠券</li>
</ul>
</li>
<li><p>初步代码</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  @Override</span><br><span class="line">    public Result seckillVoucher(Long voucherId) &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //1. 查询优惠券</span><br><span class="line">        queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">        SeckillVoucher seckillVoucher = seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">        //2. 判断秒杀时间是否开始</span><br><span class="line">        if (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">            return Result.fail(&quot;秒杀还未开始，请耐心等待&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //3. 判断秒杀时间是否结束</span><br><span class="line">        if (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">            return Result.fail(&quot;秒杀已经结束！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //4. 判断库存是否充足</span><br><span class="line">        if (seckillVoucher.getStock() &lt; 1) &#123;</span><br><span class="line">            return Result.fail(&quot;优惠券已被抢光了哦，下次记得手速快点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="addition">+       // 一人一单逻辑</span></span><br><span class="line"><span class="addition">+       Long userId = UserHolder.getUser().getId();</span></span><br><span class="line"><span class="addition">+       int count = query().eq(&quot;voucher_id&quot;, voucherId).eq(&quot;user_id&quot;, userId).count();</span></span><br><span class="line"><span class="addition">+       if (count &gt; 0)&#123;</span></span><br><span class="line"><span class="addition">+           return Result.fail(&quot;你已经抢过优惠券了哦&quot;);</span></span><br><span class="line"><span class="addition">+       &#125;</span></span><br><span class="line">        //5. 扣减库存</span><br><span class="line">        boolean success = seckillVoucherService.update()</span><br><span class="line">                .setSql(&quot;stock = stock - 1&quot;)</span><br><span class="line">                .eq(&quot;voucher_id&quot;, voucherId)</span><br><span class="line">                .gt(&quot;stock&quot;, 0)</span><br><span class="line">                .update();</span><br><span class="line">        if (!success) &#123;</span><br><span class="line">            return Result.fail(&quot;库存不足&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //6. 创建订单</span><br><span class="line">        VoucherOrder voucherOrder = new VoucherOrder();</span><br><span class="line">        //6.1 设置订单id</span><br><span class="line">        long orderId = redisIdWorker.nextId(&quot;order&quot;);</span><br><span class="line">        //6.2 设置用户id</span><br><span class="line">        Long id = UserHolder.getUser().getId();</span><br><span class="line">        //6.3 设置代金券id</span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        voucherOrder.setUserId(id);</span><br><span class="line">        //7. 将订单数据保存到表中</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        //8. 返回订单id</span><br><span class="line">        return Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>存在问题</code>：还是和之前一样，如果这个用户故意开多线程抢优惠券，那么在判断库存充足之后，执行一人一单逻辑之前，在这个区间如果进来了多个线程，还是可以抢多张优惠券的，那我们这里使用悲观锁来解决这个问题</p>
</li>
<li><p>初步代码，我们把一人一单逻辑之后的代码都提取到一个<code>createVoucherOrder</code>方法中，然后给这个方法加锁</p>
</li>
<li><p>不管哪一个线程（例如线程A），运行到这个方法时，都要检查有没有其它线程B（或者C、 D等）正在用这个方法(或者该类的其他同步方法)，有的话要等正在使用synchronized方法的线程B（或者C 、D）运行完这个方法后再运行此线程A，没有的话，锁定调用者，然后直接运行。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 一人一单逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>)</span><br><span class="line">            .update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//6.1 设置订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//6.2 设置用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//6.3 设置代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(id);</span><br><span class="line">    <span class="comment">//7. 将订单数据保存到表中</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="comment">//8. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>但是这样加锁，锁的细粒度太粗了，在使用锁的过程中，控制锁粒度是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会被锁住，现在的情况就是所有用户都公用这一把锁，串行执行，效率很低，我们现在要完成的业务是<code>一人一单</code>，所以这个锁，应该只加在单个用户上，用户标识可以用<code>userId</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 一人一单逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">                .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>)</span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1 设置订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        <span class="comment">//6.2 设置用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//6.3 设置代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        voucherOrder.setUserId(id);</span><br><span class="line">        <span class="comment">//7. 将订单数据保存到表中</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//8. 返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行到这里，锁已经被释放了，但是可能当前事务还未提交，如果此时有线程进来，不能确保事务不出问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于toString的源码是new String，所以如果我们只用<code>userId.toString()</code>拿到的也不是同一个用户，需要使用<code>intern()</code>，如果字符串常量池中已经包含了一个等于这个string对象的字符串（由equals（object）方法确定），那么将返回池中的字符串。否则，将此String对象添加到池中，并返回对此String对象的引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">long</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == Long.MIN_VALUE)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-9223372036854775808&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (i &lt; <span class="number">0</span>) ? stringSize(-i) + <span class="number">1</span> : stringSize(i);</span><br><span class="line">    <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[size];</span><br><span class="line">    getChars(i, size, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>但是以上代码还是存在问题，问题的原因在于当前方法被Spring的事务控制，如果你在内部加锁，可能会导致当前方法事务还没有提交，但是锁已经释放了，这样也会导致问题，所以我们选择将当前方法整体包裹起来，确保事务不会出现问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">     <span class="comment">// 1. 查询优惠券</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.校验秒杀是否开始</span></span><br><span class="line">        <span class="keyword">if</span> (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀还未开始，请耐心等待&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (seckillVoucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 2.1 未开始，直接返回错误信息并结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3 开始，校验库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.1 不充足，直接返回错误信息并结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;哎呀，被抢光了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">        <span class="keyword">return</span> createVoucherOrder(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务，这里可以使用<code>AopContext.currentProxy()</code>来获取当前对象的代理对象，然后再用代理对象调用方法，记得要去<code>IVoucherOrderService</code>中创建<code>createVoucherOrder</code>方法</li>
</ul>
<p>可以参考这篇文章，<a href="/2023/06/20/SpringBoot%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5/" title="SpringBoot事务失效的几种情况">SpringBoot事务失效的几种情况</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"><span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">    <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>但是该方法会用到一个依赖，我们需要导入一下</p>
</li>
<li><p>同时在启动类上加上<code>@EnableAspectJAutoProxy(exposeProxy = true)</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.hmdp.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HmDianPingApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HmDianPingApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务器，再次使用Jmeter测试，200个线程并发，但是只能抢到一张优惠券，目的达成</p>
</li>
</ul>
<h2 id="集群环境下的并发问题"><a href="#集群环境下的并发问题" class="headerlink" title="集群环境下的并发问题"></a>集群环境下的并发问题</h2><ul>
<li><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了</p>
<ol>
<li>我们将服务启动两份，端口分别为8081和8082</li>
<li>然后修改nginx的config目录下的nginx.conf文件，配置反向代理和负载均衡（默认轮询就行）</li>
</ol>
</li>
<li><p>具体操作，我们使用<code>POSTMAN</code>发送两次请求，header携带同一用户的token，尝试用同一账号抢两张优惠券，发现是可行的。</p>
</li>
<li><p>失败原因分析：由于我们部署了多个Tomcat，每个Tomcat都有一个属于自己的jvm，那么假设在服务器A的Tomcat内部，有两个线程，即线程1和线程2，这两个线程使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的。但是如果在Tomcat的内部，又有两个线程，但是他们的锁对象虽然写的和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2互斥</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6492fbe71ddac507cc5c1dd6.jpg"></p>
<ul>
<li>这就是集群环境下，syn锁失效的原因，在这种情况下，我们需要使用分布式锁来解决这个问题，让锁不存在于每个jvm的内部，而是让所有jvm公用外部的一把锁（Redis）</li>
</ul>
<h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h2 id="基本原理和实现方式对比"><a href="#基本原理和实现方式对比" class="headerlink" title="基本原理和实现方式对比"></a>基本原理和实现方式对比</h2><ul>
<li>分布式锁：满足分布式系统或集群模式下多线程课件并且可以互斥的锁</li>
<li>分布式锁的核心思想就是让大家共用同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6492fc721ddac507cc5d5650.jpg"></p>
<ul>
<li><p>那么分布式锁应该满足一些什么条件呢？</p>
<ol>
<li>可见性：多个线程都能看到相同的结果。<blockquote>
<p>注意：这里说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p>
</blockquote>
</li>
<li>互斥：互斥是分布式锁的最基本条件，使得程序串行执行</li>
<li>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</li>
<li>高性能：由于加锁本身就让性能降低，所以对于分布式锁需要他较高的加锁性能和释放锁性能</li>
<li>安全性：安全也是程序中必不可少的一环</li>
</ol>
</li>
<li><p>常见的分布式锁有三种</p>
</li>
</ul>
<ol>
<li>MySQL：MySQL本身就带有锁机制，但是由于MySQL的性能一般，所以采用分布式锁的情况下，使用MySQL作为分布式锁比较少见</li>
<li>Redis：Redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都是用Redis或者Zookeeper作为分布式锁，利用<code>SETNX</code>这个方法，如果插入Key成功，则表示获得到了锁，如果有人插入成功，那么其他人就回插入失败，无法获取到锁，利用这套逻辑完成<code>互斥</code>，从而实现分布式锁</li>
<li>Zookeeper：Zookeeper也是企业级开发中较好的一种实现分布式锁的方案，但本文是基于Redis学习，所以这里就不过多阐述了</li>
</ol>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">Mysql</th>
<th align="center">Redis</th>
<th align="center">Zookeeper</th>
</tr>
</thead>
<tbody><tr>
<td align="center">互斥</td>
<td align="center">利用mysql本身的互斥锁机制</td>
<td align="center">利用setnx这样的互斥命令</td>
<td align="center">利用节点的唯一性和有序性实现互斥</td>
</tr>
<tr>
<td align="center">高可用</td>
<td align="center">好</td>
<td align="center">好</td>
<td align="center">好</td>
</tr>
<tr>
<td align="center">高性能</td>
<td align="center">一般</td>
<td align="center">好</td>
<td align="center">一般</td>
</tr>
<tr>
<td align="center">安全性</td>
<td align="center">断开连接,自动释放锁</td>
<td align="center">利用锁超时时间，到期释放</td>
<td align="center">临时节点,断开连接自动释放</td>
</tr>
</tbody></table>
<h2 id="Redis分布式锁的实现核心思路"><a href="#Redis分布式锁的实现核心思路" class="headerlink" title="Redis分布式锁的实现核心思路"></a>Redis分布式锁的实现核心思路</h2><ul>
<li>实现分布式锁时需要实现两个基本方法</li>
</ul>
<ol>
<li>获取锁<ul>
<li>互斥：确保只能有一个线程获取锁</li>
<li>非阻塞：尝试一次，成功返回true，失败返回false<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET lock thread01 NX EX 10</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>释放锁<ul>
<li>手动释放</li>
<li>超时释放：获取锁的时候添加一个超时时间<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del lock</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>核心思路<ul>
<li>我们利用redis的<code>SETNX</code>方法，当有多个线程进入时，我们就利用该方法来获取锁。第一个线程进入时，redis 中就有这个key了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁（返回了0）的线程，等待一定时间之后重试</li>
</ul>
</li>
</ul>
<h2 id="实现分布式锁"><a href="#实现分布式锁" class="headerlink" title="实现分布式锁"></a>实现分布式锁</h2><ul>
<li><p>锁的基本接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true表示获取锁成功，false表示获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后创建一个SimpleRedisLock类实现接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">//锁的前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="comment">//具体业务名称，将前缀和业务名拼接之后当做Key</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//这里不是@Autowired注入，采用的是构造器注入，在创建SimpleRedisLock时，将RedisTemplate作为参数传入</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁，使用SETNX方法进行加锁，同时设置过期时间，防止死锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">          <span class="comment">//spring已经帮我们包装好了布尔类型，那么返回时自动拆箱就有可能产生空指针</span></span><br><span class="line">        <span class="comment">// 所以调用引用类型的equals做比较，使用一个常量对比，如果是true返回true，如果为false或null则都会返回false</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//通过DEL来删除锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改业务代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 秒杀券下单</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">      <span class="comment">// 1. 查询优惠券</span></span><br><span class="line">      <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.校验秒杀是否开始</span></span><br><span class="line">      <span class="keyword">if</span> (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀还未开始，请耐心等待&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (seckillVoucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">          <span class="comment">// 2.1 未开始，直接返回错误信息并结束</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3 开始，校验库存是否充足</span></span><br><span class="line">      <span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// 3.1 不充足，直接返回错误信息并结束</span></span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;哎呀，被抢光了&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">      <span class="comment">// 4. 获取锁对象</span></span><br><span class="line">     <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">      <span class="comment">//4.1获取锁</span></span><br><span class="line">      <span class="comment">//tryLock 参数1：最大等待时间，默认值：-1    参数2：施放时间 默认值：30秒 参数3：事件类型</span></span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">      <span class="comment">//4.2判断锁获取是否成功</span></span><br><span class="line">      <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">          <span class="keyword">return</span> Result.fail(<span class="string">&quot;一个用户只能下一单&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//4.3获取代理对象(事务)</span></span><br><span class="line">          <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">          <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//4.4 判断锁标识是否一样，</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//4.4 释放锁</span></span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用Jmeter进行压力测试，请求头中携带登录用户的token，最终只能抢到一张优惠券</p>
</li>
</ul>
<h2 id="Redis分布式锁误删情况说明"><a href="#Redis分布式锁误删情况说明" class="headerlink" title="Redis分布式锁误删情况说明"></a>Redis分布式锁误删情况说明</h2><ul>
<li><code>逻辑说明</code><ul>
<li>持有锁的线程1在锁的内部出现了阻塞，导致他的锁TTL到期，自动释放</li>
<li>此时线程2也来尝试获取锁，由于线程1已经释放了锁，所以线程2可以拿到</li>
<li>但是现在线程1阻塞完了，继续往下执行，要开始释放锁了</li>
<li>那么此时就会将属于线程2的锁释放，这就是误删别人锁的情况</li>
</ul>
</li>
<li>解决方案<ul>
<li>解决方案就是在每个线程释放锁的时候，都判断一下这个锁是不是自己的，如果不属于自己，则不进行删除操作。</li>
<li>假设还是上面的情况，线程1阻塞，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1阻塞完了，继续往下执行，开始删除锁，但是线程1 发现这把锁不是自己的，所以不进行删除锁的逻辑，当线程2执行到删除锁的逻辑时，如果TTL还未到期，则判断当前这把锁是自己的，于是删除这把锁</li>
</ul>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6492ffd21ddac507cc62d2da.jpg"></p>
<h2 id="解决Redis分布式锁误删问题"><a href="#解决Redis分布式锁误删问题" class="headerlink" title="解决Redis分布式锁误删问题"></a>解决Redis分布式锁误删问题</h2><ul>
<li>需求：修改之前的分布式锁实现</li>
<li>满足：在获取锁的时候存入线程标识（用UUID标识，在一个JVM中，ThreadId一般不会重复，但是我们现在是集群模式，有多个JVM，多个JVM之间可能会出现ThreadId重复的情况），在释放锁的时候先获取锁的线程标识，判断是否与当前线程标识一致<ul>
<li>如果一致则释放锁</li>
<li>如果不一致则不释放锁</li>
</ul>
</li>
<li><code>核心逻辑</code>：在存入锁的时候，放入自己的线程标识，在删除锁的时候，判断当前这把锁是不是自己存入的<ul>
<li>如果是，则进行删除</li>
<li>如果不是，则不进行删除</li>
</ul>
</li>
<li>具体实现代码如下<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期或宕机自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识,uuid拼接线程id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//spring已经帮我们包装好了布尔类型，那么返回时自动拆箱就有可能产生空指针</span></span><br><span class="line">        <span class="comment">// 所以调用引用类型的equals做比较，使用一个常量对比，如果是true返回true，如果为false或null则都会返回false</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="分布式锁的原子性问题"><a href="#分布式锁的原子性问题" class="headerlink" title="分布式锁的原子性问题"></a>分布式锁的原子性问题</h2><ul>
<li>更为极端的误删逻辑说明</li>
<li>假设线程1已经获取了锁，在判断标识一致之后，准备释放锁的时候，又出现了阻塞（例如JVM垃圾回收机制）</li>
<li>于是锁的TTL到期了，自动释放了</li>
<li>那么现在线程2趁虚而入，拿到了一把锁</li>
<li>但是线程1的逻辑还没执行完，那么线程1就会执行删除锁的逻辑</li>
<li>但是在阻塞前线程1已经判断了标识一致，所以现在线程1把线程2的锁给删了</li>
<li>那么就相当于判断标识那行代码没有起到作用</li>
<li>这就是删锁时的原子性问题</li>
<li>因为线程1的拿锁，判断标识，删锁，不是原子操作，所以我们要防止刚刚的情况</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/649300b61ddac507cc642430.jpg"></p>
<ul>
<li><p>Lua脚本解决多条命令原子性问题</p>
</li>
<li><p>Redis提供了<code>Lua</code>脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。</p>
</li>
<li><p>Lua是一种编程语言，它的基本语法可以上菜鸟教程看看，链接：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p>
</li>
<li><p>这里重点介绍Redis提供的调用函数，我们可以使用Lua去操作Redis，而且还能保证它的原子性，这样就可以实现<code>拿锁</code>，<code>判断标识</code>，<code>删锁</code>是一个原子性动作了</p>
</li>
<li><p>Redis提供的调用函数语法如下</p>
</li>
<li><p>Redis提供的调用函数语法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;命令名称&#x27;</span>,<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;其他参数&#x27;</span>, ...)</span><br></pre></td></tr></table></figure>
</li>
<li><p>例如我们要执行<code>set name Kyle</code>，则脚本是这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Kyle&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>例如我我们要执行<code>set name David</code>，然后执行<code>get name</code>，则脚本如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先执行set name David</span></span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;David&#x27;</span>)</span><br><span class="line"><span class="comment"># 再执行get name</span></span><br><span class="line"><span class="built_in">local</span> name = redis.call(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment"># 返回</span></span><br><span class="line"><span class="built_in">return</span> name</span><br></pre></td></tr></table></figure>
</li>
<li><p>写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EVAL script numkeys key [key ...] arg [arg ...]</span><br></pre></td></tr></table></figure>
</li>
<li><p>例如，我们要调用<code>redis.call(&#39;set&#39;, &#39;name&#39;, &#39;Kyle&#39;) 0</code>这个脚本，语法如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">&quot;return redis.call(&#x27;set&#x27;, &#x27;name&#x27;, &#x27;Kyle&#x27;)&quot;</span> 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果脚本中的key和value不想写死，可以作为参数传递，key类型参数会放入KEYS数组，其他参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组中获取这些参数</p>
<blockquote>
<p>注意：在Lua中，数组下标从1开始</p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">&quot;return redis.call(&#x27;set&#x27;, KEYS[1], ARGV[1])&quot;</span> 1 name Lucy</span><br></pre></td></tr></table></figure>
<ul>
<li>那现在我们来使用Lua脚本来代替我们释放锁的逻辑</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">原方法</button></li><li class="tab"><button type="button" data-href="#tab1-2">Lua脚本</button></li><li class="tab"><button type="button" data-href="#tab1-3">改写为lua脚本2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取线程标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//获取锁中的标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    <span class="comment">//判断是否一致</span></span><br><span class="line">    <span class="keyword">if</span> (threadId.equals(id)) &#123;</span><br><span class="line">        <span class="comment">//一致,则删除</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 线程标识</span></span><br><span class="line"><span class="keyword">local</span> threadId = <span class="string">&quot;UUID-31&quot;</span></span><br><span class="line"><span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> key = <span class="string">&quot;lock:order:userId&quot;</span></span><br><span class="line"><span class="comment">-- 获取锁中线程标识</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>, key)</span><br><span class="line"><span class="comment">-- 比较线程标识与锁的标识是否一致</span></span><br><span class="line"><span class="keyword">if</span> (threadId == id) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 一致则释放锁 del key</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-3"><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这里的KEYS[1]就是传入锁的key</span></span><br><span class="line"><span class="comment">-- 这里的ARGV[1]就是线程标识</span></span><br><span class="line"><span class="comment">-- 比较锁中的线程标识与线程标识是否一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 一致则释放锁</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<h2 id="利用Java代码调用Lua脚本改造分布式锁"><a href="#利用Java代码调用Lua脚本改造分布式锁" class="headerlink" title="利用Java代码调用Lua脚本改造分布式锁"></a>利用Java代码调用Lua脚本改造分布式锁</h2><ul>
<li><p>在RedisTemplate中，可以利用execute方法去执行lua脚本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(RedisScript&lt;T&gt; script, List&lt;K&gt; keys, Object... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.scriptExecutor.execute(script, keys, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对应的Java代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建lua脚本执行对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置脚本位置</span></span><br><span class="line">        UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">        UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//调用lua脚本</span></span><br><span class="line">        stringRedisTemplate.execute(UNLOCK_SCRIPT,</span><br><span class="line">                <span class="comment">//将锁的key转为list</span></span><br><span class="line">                Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">                <span class="comment">//线程标识</span></span><br><span class="line">                ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是现在的分布式锁还存在一个问题：锁不住</p>
<ul>
<li>那什么是锁不住呢？</li>
<li>如果锁的TTL快到期的时候，我们可以给它续期一下，比如续个30s，就好像是网吧上网，快没网费了的时候，让网管再给你续50块钱的，然后该玩玩，程序也继续往下执行</li>
<li>那么续期问题怎么解决呢，可以依赖于我们接下来要学习redission了</li>
</ul>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote>
<ul>
<li>基于Redis分布式锁的实现思路<ul>
<li>利用SET NX EX获取锁，并设置过期时间，保存线程标识,而由于线程id是有序递增，那么高并发时就有可能线程id相同的情况，所以线程id也需要配合一些不会重复的字符来避免类似问题，例如可以使用时间戳、uuid之类的</li>
<li>释放锁时先判断线程标识是否与自己当前获取的标识一致，一致则删除锁</li>
<li>可以使用lua脚本保证锁的原子性，避免出现并发线程安全问题<ul>
<li>分布式锁特性<ul>
<li>利用SET NX满足互斥性，</li>
<li>利用SET EX保证故障时依然能释放锁，避免死锁，提高安全性</li>
<li>利用Redis集群保证高可用和高并发特性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>思考<ol>
<li>在使用锁时，要尽量考虑到多种复杂情况以及解决方案。</li>
<li>还要考虑到提前预防的措施。以及在应用锁时，是否符合原子性和数据一致性等等问题。</li>
</ol>
</li>
</ul>
</blockquote>
<h1 id="分布式锁-Redisson"><a href="#分布式锁-Redisson" class="headerlink" title="分布式锁-Redisson"></a>分布式锁-Redisson</h1><ul>
<li>基于SETNX实现的分布式锁存在以下问题</li>
</ul>
<ol>
<li>重入问题<ul>
<li>重入问题是指获取锁的线程，可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，例如在HashTable这样的代码中，它的方法都是使用synchronized修饰的，加入它在一个方法内调用另一个方法，如果此时是不可重入的，那就死锁了。所以可重入锁的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的</li>
</ul>
</li>
<li>不可重试<ul>
<li>我们编写的分布式锁只能尝试一次，失败了就返回false，没有重试机制。但合理的情况应该是：当线程获取锁失败后，他应该能再次尝试获取锁</li>
</ul>
</li>
<li>超时释放<ul>
<li>我们在加锁的时候增加了TTL，这样我们可以防止死锁，但是如果卡顿(阻塞)时间太长，也会导致锁的释放。虽然我们采用Lua脚本来防止删锁的时候，误删别人的锁，但现在的新问题是没锁住，也有安全隐患</li>
</ul>
</li>
<li>主从一致性<ul>
<li>如果Redis提供了主从集群，那么当我们向集群写数据时，主机需要异步的将数据同步给从机，万一在同步之前，主机宕机了(主从同步存在延迟，虽然时间很短，但还是发生了)，那么又会出现死锁问题</li>
</ul>
</li>
</ol>
<ul>
<li><p>什么是Redisson?</p>
<ul>
<li>Redisson是一个在Redis的基础上实现的Java驻内存数据网格(In-Memory Data Grid)。它不仅提供了一系列的分布式Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现</li>
</ul>
</li>
<li><p>Redisson提供了分布式锁的多种多样功能</p>
</li>
</ul>
<ol>
<li>可重入锁(Reentrant Lock)</li>
<li>公平锁(Fair Lock)</li>
<li>联锁(MultiLock)</li>
<li>红锁(RedLock)</li>
<li>读写锁(ReadWriteLock)</li>
<li>信号量(Semaphore)</li>
<li>可过期性信号量(PermitExpirableSemaphore)</li>
<li>闭锁(CountDownLatch)</li>
</ol>
<h2 id="Redisson入门"><a href="#Redisson入门" class="headerlink" title="Redisson入门"></a>Redisson入门</h2><ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Redisson客户端，在config包下新建<code>RedissonConfig</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">            .setAddress(<span class="string">&quot;redis://101.XXX.XXX.160:6379&quot;</span>)</span><br><span class="line">            .setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Redisson的分布式锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRedisson</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//获取可重入锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;anyLock&quot;</span>);</span><br><span class="line">    <span class="comment">//尝试获取锁，三个参数分别是：获取锁的最大等待时间(期间会重试)，锁的自动释放时间，时间单位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> lock.tryLock(<span class="number">1</span>,<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//判断获取锁成功</span></span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行业务&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>替换我们之前自己写的分布式锁</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">DIff</button></li><li class="tab"><button type="button" data-href="#tab1-2">修改后方法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>这里要注入一下RedissonClient</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="addition">+   @Resource</span></span><br><span class="line"><span class="addition">+   private RedissonClient redissonClient;</span></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result seckillVoucher(Long voucherId) &#123;</span><br><span class="line">        // 1. 查询优惠券</span><br><span class="line">        SeckillVoucher seckillVoucher = seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">        // 2.校验秒杀是否开始</span><br><span class="line">        if (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">            return Result.fail(&quot;秒杀还未开始，请耐心等待&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (seckillVoucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            // 2.1 未开始，直接返回错误信息并结束</span><br><span class="line">            return Result.fail(&quot;秒杀已经结束！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        // 3 开始，校验库存是否充足</span><br><span class="line">        if (seckillVoucher.getStock() &lt; 1) &#123;</span><br><span class="line">            // 3.1 不充足，直接返回错误信息并结束</span><br><span class="line">            return Result.fail(&quot;哎呀，被抢光了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Long userId = UserHolder.getUser().getId();</span><br><span class="line"><span class="deletion">-       SimpleRedisLock redisLock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span></span><br><span class="line"><span class="addition">+       RLock redisLock = redissonClient.getLock(&quot;order:&quot; + userId);</span></span><br><span class="line"><span class="deletion">-       boolean isLock = redisLock.tryLock(120);</span></span><br><span class="line"><span class="addition">+       boolean isLock = redisLock.tryLock();</span></span><br><span class="line">        if (!isLock) &#123;</span><br><span class="line">            return Result.fail(&quot;不允许抢多张优惠券&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            return proxy.createVoucherOrder(voucherId);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            redisLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀券下单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voucherId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 查询优惠券</span></span><br><span class="line">        <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.校验秒杀是否开始</span></span><br><span class="line">        <span class="keyword">if</span> (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀还未开始，请耐心等待&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (seckillVoucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 2.1 未开始，直接返回错误信息并结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3 开始，校验库存是否充足</span></span><br><span class="line">        <span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 3.1 不充足，直接返回错误信息并结束</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;哎呀，被抢光了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">// 4. 获取锁对象</span></span><br><span class="line"><span class="comment">//        SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock:order:&quot;</span> + userId);</span><br><span class="line">        <span class="comment">//4.1获取锁</span></span><br><span class="line">        <span class="comment">//tryLock 参数1：最大等待时间，默认值：-1    参数2：施放时间 默认值：30秒 参数3：事件类型</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">        <span class="comment">//4.2判断锁获取是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;一个用户只能下一单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//4.3获取代理对象(事务)</span></span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.4 判断锁标识是否一样，</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.4 释放锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>使用Jmeter进行压力测试，依旧是只能抢到一张优惠券，满足我们的需求</li>
</ul>
<h2 id="Redisson可重入锁原理"><a href="#Redisson可重入锁原理" class="headerlink" title="Redisson可重入锁原理"></a>Redisson可重入锁原理</h2><ul>
<li><p>在Lock锁中，他是借助于等曾的一个voaltile的一个state变量来记录重入的状态的</p>
<ul>
<li>如果当前<code>没有</code>人持有这把锁，那么<code>state = 0</code></li>
<li>如果有人持<code>有</code>这把锁，那么<code>state = 1 </code><ul>
<li>如果持有者把锁的人再次持有这把锁，那么state会<code>+1</code></li>
</ul>
</li>
<li>如果对于<code>synchronize</code>而言，他在c语言代码中会有一个count</li>
<li>原理与<code>state</code>类似，也是重入一次就<code>+1</code>，释放一次就<code>-1</code>，直至减到0，表示这把锁没有被人持有</li>
</ul>
</li>
<li><p>在redisson中，我们也支持可重入锁  </p>
<ul>
<li>在分布式锁中，它采用hash结构来存储锁，其中外层key表示这把锁是否存在，内层key则记录当前这把锁被哪个线程持有</li>
</ul>
</li>
<li><p>method1在方法内部调用method2，method1和method2出于同一个线程，那么method1已经拿到一把锁了，想进入method2中拿另外一把锁，必然是拿不到的，于是就出现了死锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RLock  lock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">steUp</span><span class="params">()</span>&#123;</span><br><span class="line">        lock = redissonClient.getLock(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//尝试获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">        <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败........ 1 &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功......... 1 &quot;</span>);</span><br><span class="line">            method2();</span><br><span class="line">            log.info(<span class="string">&quot;开始执行业务........ 1 &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;准备释放锁........ 1 &quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">        <span class="keyword">if</span> (!isLock)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取锁失败........ 2 &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取锁成功......... 2 &quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;开始执行业务........ 2 &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;准备释放锁........ 2 &quot;</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>所以我们需要额外判断，method1和method2是否处于同一线程，如果是同一个线程，则可以拿到锁，但是state会<code>+1</code>，之后执行method2中的方法，释放锁，释放锁的时候也只是将state进行-1，只有减至0，才会真正释放锁</p>
</li>
<li><p>由于我们需要额外存储一个state，所以用字符串型<code>SET NX EX</code>是不行的，需要用到<code>Hash</code>结构，但是<code>Hash</code>结构又没有<code>NX</code>这种方法，所以我们需要将原有的逻辑拆开，进行手动判断<br><img src="https://pic.imgdb.cn/item/6493065a1ddac507cc6dfa41.jpg"></p>
</li>
<li><p>为了保证原子性，所以流程图中的业务逻辑也是需要我们用Lua来实现的</p>
</li>
<li><p>获取锁的逻辑</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]; <span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>]; <span class="comment">-- 线程唯一标识</span></span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>]; <span class="comment">-- 锁的自动释放时间</span></span><br><span class="line"><span class="comment">-- 锁不存在</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;exists&#x27;</span>, key) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 获取锁并添加线程标识，state设为1</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hset&#x27;</span>, key, threadId, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="comment">-- 设置锁有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 锁存在，判断threadId是否为自己</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;hexists&#x27;</span>, key, threadId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 锁存在，重入次数 +1，这里用的是hash结构的incrby增长</span></span><br><span class="line">    redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, thread, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">-- 设置锁的有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">-- 返回结果</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">-- 代码走到这里，说明获取锁的不是自己，获取锁失败</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>释放锁的逻辑</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">local</span> threadId = ARGV[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">local</span> releaseTime = ARGV[<span class="number">2</span>];</span><br><span class="line"><span class="comment">-- 如果锁不是自己的</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;HEXISTS&#x27;</span>, key, threadId) == <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">-- 直接返回</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-- 锁是自己的，锁计数-1，还是用hincrby，不过自增长的值为-1</span></span><br><span class="line"><span class="keyword">local</span> count = redis.call(<span class="string">&#x27;hincrby&#x27;</span>, key, threadId, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">-- 判断重入次数为多少</span></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 大于0，重置有效期</span></span><br><span class="line">    redis.call(<span class="string">&#x27;expire&#x27;</span>, key, releaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">-- 否则直接释放锁</span></span><br><span class="line">    redis.call(<span class="string">&#x27;del&#x27;</span>, key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取锁源码</p>
</li>
<li><p>查看源码，跟我们的实现方式几乎一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.evalWriteAsync(<span class="built_in">this</span>.getName(), LongCodec.INSTANCE, command, <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); return nil; end; if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); return nil; end; return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>, Collections.singletonList(<span class="built_in">this</span>.getName()), <span class="built_in">this</span>.internalLockLeaseTime, <span class="built_in">this</span>.getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>释放锁源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">unlockInnerAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.evalWriteAsync(<span class="built_in">this</span>.getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN, <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then return nil;end; local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); if (counter &gt; 0) then redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); return 0; else redis.call(&#x27;del&#x27;, KEYS[1]); redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); return 1; end; return nil;&quot;</span>, Arrays.asList(<span class="built_in">this</span>.getName(), <span class="built_in">this</span>.getChannelName()), LockPubSub.UNLOCK_MESSAGE, <span class="built_in">this</span>.internalLockLeaseTime, <span class="built_in">this</span>.getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Redisson锁重试和WatchDog机制"><a href="#Redisson锁重试和WatchDog机制" class="headerlink" title="Redisson锁重试和WatchDog机制"></a>Redisson锁重试和WatchDog机制</h2><ul>
<li><p>前面我们分析的是空参的tryLock方法，现在我们来分析一下这个带参数的</p>
</li>
<li><p>继续跟tryLock<br>进来以后先看首先做了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//首先将等待时间转为毫秒，后面操作都是以毫秒为单位</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> unit.toMillis(waitTime);</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//获取线程id，也就是每个线程独特的标识</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//获取锁，从tryAcquire开始业务逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(waitTime, leaseTime, unit, threadId);</span><br></pre></td></tr></table></figure>
</li>
<li><p>继续跟<code>tryAcquire</code>,进来可以看到<code>tryAcquire</code>又调用了<code>tryAcquireAsync</code>，继续跟</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Long <span class="title function_">tryAcquire</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get(tryAcquireAsync(waitTime, leaseTime, unit, threadId));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>到这里可以看到，一开始的业务逻辑了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="comment">//首先判断锁施放时间是否是永久</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果不是-1，这里会给释放时间一个默认值，通过getLockWatchdogTimeout的源码可以得知，是30*1000毫秒，也就是30秒</span></span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                            commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                            TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6495969d1ddac507cc0fa812.jpg"></p>
</li>
<li><p>继续跟入<code>tryLockInnerAsync</code></p>
</li>
<li><p>通过源码可以得知，获取锁成功返回的是<code>nil</code>，而获取锁失败则返回的是锁的剩余有效期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line">    <span class="comment">//首先将施放时间记录到常量</span></span><br><span class="line">        internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">    <span class="comment">//执行lua脚本，成功则返回nil，nil可以理解为null，如果获取锁失败则返回锁剩余有效期和key名称</span></span><br><span class="line">        <span class="keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, command,</span><br><span class="line">                <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="comment">//这里是发送锁执行成功的通知</span></span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                Collections.singletonList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>而拿到剩余有效期有啥用呢？往回倒一下看看</p>
</li>
<li><p>可以看到刚才tryLockInnerAsync的返回值是一个<code>Future</code>，异步函数，只管发出去了，return的也是一个<code>Future</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                                commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后将这个结果返回到一开始看到的<code>tryAcquire</code>方法，他的返回值是long类型的，就是锁的有效期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Long <span class="title function_">tryAcquire</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> get(tryAcquireAsync(waitTime, leaseTime, unit, threadId));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>继续返回到<code>tryLock</code>，也就是最开始我们看到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> unit.toMillis(waitTime);</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//这里返回锁的有效期</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">    <span class="comment">// 进来判断，是null吗，根据刚才看的源码，成功返回nil，那么直接直接返回true就可以了</span></span><br><span class="line">    <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实际上就是 time - 消耗时间， 如果time&lt;0 则说明时间用完了，直接返回false，否则重试</span></span><br><span class="line">    time -= System.currentTimeMillis() - current;</span><br><span class="line">    <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        acquireFailed(waitTime, unit, threadId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再次拿到当前时间</span></span><br><span class="line">     current = System.currentTimeMillis();</span><br><span class="line">     <span class="comment">//这里订阅了别的线程释放锁的通知。也就是前面lua脚本中的   &quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot; </span></span><br><span class="line">    RFuture&lt;RedissonLockEntry&gt; subscribeFuture = subscribe(threadId);</span><br><span class="line">    <span class="comment">//这里用的是 Futrue.await进行等待，在锁的剩余等待最大时间结束前完成，返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">if</span> (!subscribeFuture.await(time, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="comment">//false就进到这里</span></span><br><span class="line">        <span class="keyword">if</span> (!subscribeFuture.cancel(<span class="literal">false</span>)) &#123;</span><br><span class="line">            subscribeFuture.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//首先取消订阅消息</span></span><br><span class="line">                    unsubscribe(subscribeFuture, threadId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        acquireFailed(waitTime, unit, threadId);</span><br><span class="line">        <span class="comment">//返回false结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果不是false进到这里</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//再次计算上面的逻辑消耗了多长时间</span></span><br><span class="line">        time -= System.currentTimeMillis() - current;</span><br><span class="line">        <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            acquireFailed(waitTime, unit, threadId);</span><br><span class="line">            <span class="comment">//如果超时了返回false，太TM严谨了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//终于进入到重试逻辑了</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//再次获取当前时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">//再次tryAcquire，同上面的一样，这是进行重试了</span></span><br><span class="line">            ttl = tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">            <span class="comment">// 再次进行判断，别忘了，ttl返回null等于成功</span></span><br><span class="line">            <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果失败了，再次计算锁剩余时间还够不够，不够的返回false</span></span><br><span class="line">            time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//就算是重试也不能直接重试，这里再次使用到了 Futrue 进行尝试，也就是异步操作</span></span><br><span class="line">               <span class="comment">// waiting for message</span></span><br><span class="line">            currentTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span> &amp;&amp; ttl &lt; time) &#123;</span><br><span class="line">                <span class="comment">//getLatch信号量，释放锁会释放一个信号，这边接收到信号后会再次进行尝试</span></span><br><span class="line">                <span class="comment">//再次尝试也有等待时间，如果超过了等待时间，会返回false，在时间内拿到锁的话，则会返回true</span></span><br><span class="line">                <span class="comment">//而这个等待时间，两种：1.ttl(锁释放时间) &lt; time(剩余等待时间),就使用ttl</span></span><br><span class="line">                subscribeFuture.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//反之，则使用 time </span></span><br><span class="line">                subscribeFuture.getNow().getLatch().tryAcquire(time, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这边等到醒了，再次校验时间</span></span><br><span class="line">            time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果时间还有，那么就返回到上面的 <code>while(true)</code> ，继续循环    </p>
</li>
<li><p>那么这里并不是无休止的等待，而是使用了<code>消息订阅</code>和<code>信号量</code>机制，你那边释放锁了，我这边再过去试一下，而并不是失败了就继续尝试，那样会增加不必要的消耗，大概可以理解为抢凳子游戏。</p>
</li>
<li><p>重试是解决了，那么超时呢，假设现在A是获取锁成功了，有一个剩余的有效期，A业务阻塞了，B的线程看A的ttl到期了，过来拿到了锁，也会发生线程安全问题</p>
</li>
<li><p>必须要确保锁是因为业务执行完到期才释放的， 而不能是因为到期了才释放</p>
</li>
<li><p>这里跟入 <code>tryAcquire</code>,继续跟入<code>tryAcquireAsync</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//这里leaseTime等于-1的时候会用默认的时间，前面提到过，看门狗getLockWatchdogTimeout，默认是三十秒</span></span><br><span class="line">       RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                               commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                               TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">       <span class="comment">//当上面的 ttlRemainingFuture 成功后进来，两个参数就是剩余有效期和异常</span></span><br><span class="line">       ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">           <span class="comment">//这里说明抛异常了，那么什么也不做</span></span><br><span class="line">           <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果说剩余有效期等于null说明获取锁成功了</span></span><br><span class="line">           <span class="comment">// lock acquired</span></span><br><span class="line">           <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//这里进行非常关键的一步， 到期续约</span></span><br><span class="line">               scheduleExpirationRenewal(threadId);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>跟进去<code>scheduleExpirationRenewal</code>看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleExpirationRenewal</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">        <span class="type">ExpirationEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpirationEntry</span>();</span><br><span class="line">        <span class="comment">//这里使用的 static final ConcurrentMap&lt;String, RedissonLock.ExpirationEntry&gt;</span></span><br><span class="line">        <span class="comment">//跟进去getEntryName得知是：id + name，而name是当前锁的name，而static说明，这个类的所有实例都可以看到这个hashMapper</span></span><br><span class="line">        <span class="comment">//也就是说，每个锁都有自己的名字，在mapper中都会有自己的entry，一把锁对应一个entry，不重复</span></span><br><span class="line">        <span class="comment">//putIfAbsent说明，如果第一次来，不存在，我再存入，如果存在，则不执行，也就说如果是重入，返回的则是旧的entry，也就锁第一次来的时候创建的entry</span></span><br><span class="line">        <span class="comment">//也就是说，不管重试多少次，使用的都是同一个entry</span></span><br><span class="line">        <span class="type">ExpirationEntry</span> <span class="variable">oldEntry</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">        <span class="keyword">if</span> (oldEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//这边来了个新的线程，加入进去</span></span><br><span class="line">            oldEntry.addThreadId(threadId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果第一次来</span></span><br><span class="line">            entry.addThreadId(threadId);</span><br><span class="line">            <span class="comment">//那么做一个续约，更新有效期</span></span><br><span class="line">            renewExpiration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里跟进去<code>renewExpiration</code></p>
</li>
<li><p>这个对象里封装了两样东西，一个是当前<code>线程id</code>，一个就是<code>定时任务</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">renewExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取 entry，      </span></span><br><span class="line">        <span class="type">ExpirationEntry</span> <span class="variable">ee</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">        <span class="keyword">if</span> (ee == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Timout ，超时任务，定时任务</span></span><br><span class="line">        <span class="comment">//这里newTimeout有两个参数，第一个是它本身，第二个则是到期以后才会执行</span></span><br><span class="line">        <span class="comment">//下面表明了 internalLockLeaseTime / 3, TimeUnit.MILLISECONDS ，就是内部锁的释放时间 / 3</span></span><br><span class="line">        <span class="comment">//internalLockLeaseTime下面图有标注怎么来的 30 /3 ，就是说10秒钟他执行下面的逻辑</span></span><br><span class="line">        <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//拿出entry</span></span><br><span class="line">                <span class="type">ExpirationEntry</span> <span class="variable">ent</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">                <span class="keyword">if</span> (ent == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//从entry获取线程id</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">threadId</span> <span class="operator">=</span> ent.getFirstThreadId();</span><br><span class="line">                <span class="keyword">if</span> (threadId == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//刷新有效期</span></span><br><span class="line">                RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">                future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//重置完有效期后，有调用了自己，递归</span></span><br><span class="line">                    <span class="comment">//也就是说，每隔十秒，执行一次，执行开始时又进行定时</span></span><br><span class="line">                    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                        <span class="comment">// reschedule itself</span></span><br><span class="line">                        renewExpiration();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最后将任务放入到entry去</span></span><br><span class="line">        ee.setTimeout(task);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6495a84f1ddac507cc318648.jpg"></p>
</li>
<li><p>接上一个的跟入<code>renewExpirationAsync</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">renewExpirationAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">      <span class="comment">//如果这把锁是的当前线程的，我寻思不是也进不来不是</span></span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">              <span class="comment">//重点来了，重置有效期，重新计时了</span></span><br><span class="line">                      <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">              Collections.singletonList(getName()),</span><br><span class="line">              internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时我们再回来看<code>scheduleExpirationRenewal</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleExpirationRenewal</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">     <span class="type">ExpirationEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpirationEntry</span>();</span><br><span class="line">     <span class="type">ExpirationEntry</span> <span class="variable">oldEntry</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">     <span class="keyword">if</span> (oldEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 不是第一次已经在持续执行了定时任务,就不用再调用了</span></span><br><span class="line">         oldEntry.addThreadId(threadId);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         entry.addThreadId(threadId);</span><br><span class="line">         <span class="comment">//而第一次进来需要执行定时任务</span></span><br><span class="line">         renewExpiration();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在我们再来看一下释放锁的逻辑<code>unlockAsync</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> RFuture&lt;Void&gt; <span class="title function_">unlockAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">      RPromise&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">RedissonPromise</span>&lt;Void&gt;();</span><br><span class="line">      <span class="comment">//释放锁获取 futrue </span></span><br><span class="line">      RFuture&lt;Boolean&gt; future = unlockInnerAsync(threadId);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Futrue 成功后会执行下面逻辑</span></span><br><span class="line">      future.onComplete((opStatus, e) -&gt; &#123;</span><br><span class="line">          <span class="comment">//取消更新任务</span></span><br><span class="line">          cancelExpirationRenewal(threadId);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">              result.tryFailure(e);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (opStatus == <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="type">IllegalMonitorStateException</span> <span class="variable">cause</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>(<span class="string">&quot;attempt to unlock lock, not locked by current thread by node id: &quot;</span></span><br><span class="line">                      + id + <span class="string">&quot; thread-id: &quot;</span> + threadId);</span><br><span class="line">              result.tryFailure(cause);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          result.trySuccess(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>取消定时任务逻辑<br><img src="https://pic.imgdb.cn/item/6495b12e1ddac507cc3f2b44.jpg"></p>
</li>
<li><p>流程图<br><img src="https://pic.imgdb.cn/item/6495b1621ddac507cc3f7ed9.jpg"></p>
</li>
</ul>
<h3 id="Redisson锁的MutiLock原理"><a href="#Redisson锁的MutiLock原理" class="headerlink" title="Redisson锁的MutiLock原理"></a>Redisson锁的MutiLock原理</h3><ul>
<li><p>为了提高Redis的可用性，我们会搭建集群或者主从，现在以主从为例</p>
</li>
<li><p>此时我们去写命令，写在主机上，主机会将数据同步给从机，但是假设主机还没来得及把数据写入到从机去的时候，主机宕机了</p>
</li>
<li><p>哨兵会发现主机宕机了，于是选举一个slave(从机)变成master(主机)，而此时新的master(主机)上并没有锁的信息，那么其他线程就可以获取锁，又会引发安全问题</p>
</li>
<li><p>为了解决这个问题。Redisson提出来了MutiLock锁，使用这把锁的话，那我们就不用主从了，每个节点的地位都是一样的，都可以当做是主机，那我们就需要将加锁的逻辑写入到每一个主从节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获取锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性</p>
</li>
<li><p>我们先使用虚拟机额外搭建两个Redis节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.126.131:6379&quot;</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.126.132:6379&quot;</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.126.133:6379&quot;</span>)</span><br><span class="line">                .setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>使用联锁，我们首先要注入三个RedissonClient对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient2;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> RLock lock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonClient2.getLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonClient3.getLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    lock = redissonClient.getMultiLock(lock1, lock2, lock3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">    redissonClient.getMultiLock();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;获取锁失败，1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;获取锁成功&quot;</span>);</span><br><span class="line">        method2();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;释放锁，1&quot;</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> lock.tryLock();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;获取锁失败，2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;获取锁成功，2&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;释放锁，2&quot;</span>);</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li><p>源码分析</p>
</li>
<li><p>当我们没有传入锁对象来创建联锁的时候，则会抛出一个异常，反之则将我们传入的可变参数锁对象封装成一个集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RedissonMultiLock</span><span class="params">(RLock... locks)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (locks.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Lock objects are not defined&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.locks.addAll(Arrays.asList(locks));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>联锁的tryLock</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">newLeaseTime</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">//如果传入了释放时间</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1L</span>) &#123;</span><br><span class="line">        <span class="comment">//再判断一下是否有等待时间</span></span><br><span class="line">        <span class="keyword">if</span> (waitTime == -<span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="comment">//如果没传等待时间，不重试，则只获得一次</span></span><br><span class="line">            newLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//想要重试，耗时较久，万一释放时间小于等待时间，则会有问题，所以这里将等待时间乘以二</span></span><br><span class="line">            newLeaseTime = unit.toMillis(waitTime) * <span class="number">2L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//剩余等待时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">remainTime</span> <span class="operator">=</span> -<span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">if</span> (waitTime != -<span class="number">1L</span>) &#123;</span><br><span class="line">        remainTime = unit.toMillis(waitTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//锁等待时间，与剩余等待时间一样    </span></span><br><span class="line">    <span class="type">long</span> <span class="variable">lockWaitTime</span> <span class="operator">=</span> <span class="built_in">this</span>.calcLockWaitTime(remainTime);</span><br><span class="line">    <span class="comment">//锁失败的限制，源码返回是的0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">failedLocksLimit</span> <span class="operator">=</span> <span class="built_in">this</span>.failedLocksLimit();</span><br><span class="line">    <span class="comment">//已经获取成功的锁</span></span><br><span class="line">    List&lt;RLock&gt; acquiredLocks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="built_in">this</span>.locks.size());</span><br><span class="line">    <span class="comment">//迭代器，用于遍历</span></span><br><span class="line">    ListIterator&lt;RLock&gt; iterator = <span class="built_in">this</span>.locks.listIterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> (RLock)iterator.next();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> lockAcquired;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//没有等待时间和释放时间，调用空参的tryLock</span></span><br><span class="line">            <span class="keyword">if</span> (waitTime == -<span class="number">1L</span> &amp;&amp; leaseTime == -<span class="number">1L</span>) &#123;</span><br><span class="line">                lockAcquired = lock.tryLock();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//否则调用带参的tryLock</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">awaitTime</span> <span class="operator">=</span> Math.min(lockWaitTime, remainTime);</span><br><span class="line">                lockAcquired = lock.tryLock(awaitTime, newLeaseTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RedisResponseTimeoutException var21) &#123;</span><br><span class="line">            <span class="built_in">this</span>.unlockInner(Arrays.asList(lock));</span><br><span class="line">            lockAcquired = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">            lockAcquired = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断获取锁是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (lockAcquired) &#123;</span><br><span class="line">            <span class="comment">//成功则将锁放入成功锁的集合</span></span><br><span class="line">            acquiredLocks.add(lock);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果获取锁失败</span></span><br><span class="line">            <span class="comment">//判断当前锁的数量，减去成功获取锁的数量，如果为0，则所有锁都成功获取，跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.locks.size() - acquiredLocks.size() == <span class="built_in">this</span>.failedLocksLimit()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//否则将拿到的锁都释放掉</span></span><br><span class="line">            <span class="keyword">if</span> (failedLocksLimit == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.unlockInner(acquiredLocks);</span><br><span class="line">                <span class="comment">//如果等待时间为-1，则不想重试，直接返回false</span></span><br><span class="line">                <span class="keyword">if</span> (waitTime == -<span class="number">1L</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                failedLocksLimit = <span class="built_in">this</span>.failedLocksLimit();</span><br><span class="line">                <span class="comment">//将已经拿到的锁都清空</span></span><br><span class="line">                acquiredLocks.clear();</span><br><span class="line">                <span class="comment">//将迭代器往前迭代，相当于重置指针，放到第一个然后重试获取锁</span></span><br><span class="line">                <span class="keyword">while</span>(iterator.hasPrevious()) &#123;</span><br><span class="line">                    iterator.previous();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                --failedLocksLimit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果剩余时间不为-1，很充足</span></span><br><span class="line">        <span class="keyword">if</span> (remainTime != -<span class="number">1L</span>) &#123;</span><br><span class="line">            <span class="comment">//计算现在剩余时间</span></span><br><span class="line">            remainTime -= System.currentTimeMillis() - time;</span><br><span class="line">            time = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">//如果剩余时间为负数，则获取锁超时了</span></span><br><span class="line">            <span class="keyword">if</span> (remainTime &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="comment">//将之前已经获取到的锁释放掉，并返回false</span></span><br><span class="line">                <span class="built_in">this</span>.unlockInner(acquiredLocks);</span><br><span class="line">                <span class="comment">//联锁成功的条件是：每一把锁都必须成功获取，一把锁失败，则都失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果设置了锁的有效期</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1L</span>) &#123;</span><br><span class="line">        List&lt;RFuture&lt;Boolean&gt;&gt; futures = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(acquiredLocks.size());</span><br><span class="line">        <span class="comment">//迭代器用于遍历已经获取成功的锁</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var24</span> <span class="operator">=</span> acquiredLocks.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var24.hasNext()) &#123;</span><br><span class="line">            <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> (RLock)var24.next();</span><br><span class="line">            <span class="comment">//设置每一把锁的有效期</span></span><br><span class="line">            RFuture&lt;Boolean&gt; future = ((RedissonLock)rLock).expireAsync(unit.toMillis(leaseTime), TimeUnit.MILLISECONDS);</span><br><span class="line">            futures.add(future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var24 = futures.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var24.hasNext()) &#123;</span><br><span class="line">            RFuture&lt;Boolean&gt; rFuture = (RFuture)var24.next();</span><br><span class="line">            rFuture.syncUninterruptibly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//但如果没设置有效期，则会触发WatchDog机制，自动帮我们设置有效期，所以大多数情况下，我们不需要自己设置有效期</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ol>
<li>不可重入Redis分布式锁<ul>
<li>原理：利用SETNX的互斥性；利用EX避免死锁；释放锁时判断线程标识</li>
<li>缺陷：不可重入、无法重试、锁超时失效</li>
</ul>
</li>
<li>可重入Redis分布式锁<ul>
<li>原理：利用Hash结构，记录线程标识与重入次数；利用WatchDog延续锁时间；利用信号量控制锁重试等待</li>
<li>缺陷：Redis宕机引起锁失效问题</li>
</ul>
</li>
<li>Redisson的multiLock<ul>
<li>原理：多个独立的Redis节点，必须在所有节点都获取重入锁，才算获取锁成功</li>
</ul>
</li>
</ol>
<h1 id="秒杀优化"><a href="#秒杀优化" class="headerlink" title="秒杀优化"></a>秒杀优化</h1><h2 id="异步秒杀思路"><a href="#异步秒杀思路" class="headerlink" title="异步秒杀思路"></a>异步秒杀思路</h2><ul>
<li>我们先来回顾一下下单流程</li>
<li>当用户发起请求，此时会先请求Nginx，Nginx反向代理到Tomcat，而Tomcat中的程序，会进行串行操作，分为如下几个步骤\</li>
</ul>
<ol>
<li>查询优惠券</li>
<li>判断秒杀库存是否足够</li>
<li>查询订单</li>
<li>校验是否一人一单</li>
<li>扣减库存</li>
<li>创建订单</li>
</ol>
<ul>
<li><p>在这六个步骤中，有很多操作都是要去操作数据库的，而且还是一个线程串行执行，这样就会导致我们的程序执行很慢，所以我们需要异步程序执行，那么如何加速呢？</p>
</li>
<li><p><code>优化方案</code>：我们将耗时较短的逻辑判断放到Redis中，例如：库存是否充足，是否一人一单这样的操作，只要满足这两条操作，那我们是一定可以下单成功的，不用等数据真的写进数据库，我们直接告诉用户下单成功就好了。然后后台再开一个线程，后台线程再去慢慢执行队列里的消息，这样我们就能很快的完成下单业务。<br><img src="https://pic.imgdb.cn/item/6496ecd71ddac507ccdeff8a.jpg"></p>
</li>
<li><p>但是这里还存在两个难点</p>
</li>
</ul>
<ol>
<li>我们怎么在Redis中快速校验是否一人一单，还有库存判断</li>
<li>我们校验一人一单和将下单数据写入数据库，这是两个线程，我们怎么知道下单是否完成。<ul>
<li>我们需要将一些信息返回给前端，同时也将这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询下单逻辑是否完成</li>
</ul>
</li>
</ol>
<ul>
<li>我们现在来看整体思路：当用户下单之后，判断库存是否充足，只需要取Redis中根据key找对应的value是否大于0即可，如果不充足，则直接结束。如果充足，则在Redis中判断用户是否可以下单，如果set集合中没有该用户的下单数据，则可以下单，并将userId和优惠券存入到Redis中，并且返回0，整个过程需要保证是原子性的，所以我们要用Lua来操作，同时由于我们需要在Redis中查询优惠券信息，所以在我们新增秒杀优惠券的同时，需要将优惠券信息保存到Redis中</li>
<li>完成以上逻辑判断时，我们只需要判断当前Redis中的返回值是否为0，如果是0，则表示可以下单，将信息保存到queue中去，然后返回，开一个线程来异步下单，其阿奴单可以通过返回订单的id来判断是否下单成功</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6496ed4b1ddac507ccdfad0f.jpg"></p>
<h2 id="Redis完成秒杀资格判断"><a href="#Redis完成秒杀资格判断" class="headerlink" title="Redis完成秒杀资格判断"></a>Redis完成秒杀资格判断</h2><ul>
<li>需求：</li>
</ul>
<ol>
<li>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</li>
<li>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否秒杀成功</li>
</ol>
<ul>
<li><p><code>步骤一</code>：修改保存优惠券相关代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line">    <span class="comment">// 保存秒杀优惠券信息到Reids，Key名中包含优惠券ID，Value为优惠券的剩余数量</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用PostMan发送请求，添加优惠券<br>请求路径：<a href="http://localhost:8080/api/voucher/seckill">http://localhost:8080/api/voucher/seckill</a><br>请求方式：POST</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;shopId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;200元代金券&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;subTitle&quot;</span><span class="punctuation">:</span><span class="string">&quot;周一至周五均可使用&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span><span class="string">&quot;全场通用\\n无需预约\\n可无限叠加\\n不兑现、不找零\\n仅限堂食&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payValue&quot;</span><span class="punctuation">:</span><span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;actualValue&quot;</span><span class="punctuation">:</span><span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span><span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;beginTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-06-19T18:02:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;endTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2023-09-25T12:09:17&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加成功后，数据库中和Redis中都能看到优惠券信息</p>
</li>
<li><p><code>步骤二</code>：编写Lua脚本<br>lua的字符串拼接使用..，字符串转数字是<code>tonumber()</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.参数列表</span></span><br><span class="line"><span class="comment">-- 1.1.优惠券id</span></span><br><span class="line"><span class="keyword">local</span> voucherId = ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 1.2.用户id</span></span><br><span class="line"><span class="keyword">local</span> userId = ARGV[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.数据key</span></span><br><span class="line"><span class="comment">-- 2.1.库存key</span></span><br><span class="line"><span class="keyword">local</span> stockKey = <span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line"><span class="comment">-- 2.2.订单key</span></span><br><span class="line"><span class="keyword">local</span> orderKey = <span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.脚本业务</span></span><br><span class="line"><span class="comment">-- 3.1.判断库存是否充足 get stockKey</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="number">0</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 3.2.库存不足，返回1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span></span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="number">1</span>) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 3.3.存在，说明是重复下单，返回2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 3.4.扣库存 incrby stockKey -1</span></span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>, stockKey, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">-- 3.5.下单（保存用户）sadd orderKey userId</span></span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>, orderKey, userId)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(), voucherId.toString(),</span><br><span class="line">            UserHolder.getUser().getId().toString());</span><br><span class="line">    <span class="comment">//2. 判断返回值，并返回错误信息</span></span><br><span class="line">    <span class="keyword">if</span> (result.intValue() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(result.intValue() == <span class="number">1</span> ? <span class="string">&quot;来晚咯，卖完啦!&quot;</span> : <span class="string">&quot;不能重复下单!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//TODO 保存阻塞队列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在我们使用PostMan发送请求，redis中的数据会变动，而且不能重复下单，但是数据库中的数据<code>并没有变化</code></p>
</li>
</ul>
<h2 id="基于阻塞队列实现秒杀优化"><a href="#基于阻塞队列实现秒杀优化" class="headerlink" title="基于阻塞队列实现秒杀优化"></a>基于阻塞队列实现秒杀优化</h2><ul>
<li>修改下单的操作，我们在下单时，是通过Lua表达式去原子执行判断逻辑，如果判断结果不为0，返回错误信息，如果判断结果为0，则将下单的逻辑保存到队列中去，然后异步执行</li>
<li><code>需求</code></li>
</ul>
<ol>
<li>如果秒杀成功，则将优惠券id和用户id封装后存入阻塞队列</li>
<li>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</li>
</ol>
<ul>
<li><code>步骤一</code>：创建阻塞队列<br>阻塞队列有一个特点：当一个线程尝试从阻塞队列里获取元素的时候，如果没有元素，那么该线程就会被阻塞，直到队列中有元素，才会被唤醒，并去获取元素<br>阻塞队列的创建需要指定一个大小</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>那么把优惠券id和用户id封装后存入阻塞队列</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(), voucherId.toString(),</span><br><span class="line">            UserHolder.getUser().getId().toString());</span><br><span class="line">    <span class="keyword">if</span> (result.intValue() != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> Result.fail(result.intValue() == <span class="number">1</span> ? <span class="string">&quot;来晚咯，卖完啦!&quot;</span> : <span class="string">&quot;不能重复下单!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//封装到voucherOrder中</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    voucherOrder.setUserId(UserHolder.getUser().getId());</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">//加入到阻塞队列</span></span><br><span class="line">    orderTasks.add(voucherOrder);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>步骤二</code>：实现异步下单功能</li>
</ul>
<ol>
<li><p>先开一个线程<br>private static final ExecutorService SECKILL_ORDER_EXECUTOR &#x3D; Executors.newSingleThreadExecutor(); </p>
</li>
<li><p>创建线程任务，秒杀业务需要在类初始化之后，就立即执行，所以这里需要用到<code>@PostConstruct</code>注解</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1. 获取队列中的订单信息</span></span><br><span class="line">                <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                <span class="comment">//2. 创建订单</span></span><br><span class="line">                handleVoucherOrder(voucherOrder);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;订单处理异常&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写创建订单的业务逻辑<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> IVoucherOrderService proxy;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">    <span class="comment">//2. 创建锁对象，作为兜底方案</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;order:&quot;</span> + userId);</span><br><span class="line">    <span class="comment">//3. 获取锁</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.tryLock();</span><br><span class="line">    <span class="comment">//4. 判断是否获取锁成功         </span></span><br><span class="line">    <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;不允许重复下单!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//5. 使用代理对象，由于这里是另外一个线程，</span></span><br><span class="line">        proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        redisLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>查看AopContext源码，它的获取代理对象也是通过ThreadLocal进行获取的，由于我们这里是异步下单，和主线程不是一个线程，所以不能获取成功</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Object&gt; currentProxy = <span class="keyword">new</span> <span class="title class_">NamedThreadLocal</span>(<span class="string">&quot;Current AOP proxy&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>但是我们可以将proxy放在成员变量的位置，然后在主线程中获取代理对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 1. 执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">            SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(),</span><br><span class="line">            voucherId.toString(), userId.toString()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">    <span class="comment">// 2. 判断结果是否为0</span></span><br><span class="line">    <span class="comment">// 2.1 不为 0 ,返回异常信息</span></span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;没有库存了&quot;</span> : <span class="string">&quot;您已经下过单了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 为0 下单信息存入阻塞队列</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//2.3封装id信息</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//2.4封装 订单id</span></span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">//2.5封装 用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">//2.6 封装 优惠券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    <span class="comment">// 2.7 保存阻塞队列</span></span><br><span class="line">    ordersTasks.add(voucherOrder);</span><br><span class="line">    <span class="comment">//2.8 获取代理对象</span></span><br><span class="line">    proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="comment">// 3. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>完整代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmdp.dto.Result;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.VoucherOrder;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.mapper.VoucherOrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.service.ISeckillVoucherService;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.service.IVoucherOrderService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.RedisIdWorker;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.UserHolder;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AopContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 服务实现类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Kyle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-10-22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;VoucherOrderMapper, VoucherOrder&gt; <span class="keyword">implements</span> <span class="title class_">IVoucherOrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IVoucherOrderService proxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_SCRIPT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SECKILL_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>();</span><br><span class="line">        SECKILL_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;seckill.lua&quot;</span>));</span><br><span class="line">        SECKILL_SCRIPT.setResultType(Long.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">SECKILL_ORDER_EXECUTOR</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        SECKILL_ORDER_EXECUTOR.submit(<span class="keyword">new</span> <span class="title class_">VoucherOrderHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 获取用户</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">        <span class="comment">//2. 创建锁对象，作为兜底方案</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;order:&quot;</span> + userId);</span><br><span class="line">        <span class="comment">//3. 获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.tryLock();</span><br><span class="line">        <span class="comment">//4. 判断是否获取锁成功 </span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;不允许重复下单!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//5. 使用代理对象，由于这里是另外一个线程，</span></span><br><span class="line">            proxy.createVoucherOrder(voucherOrder);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redisLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1. 获取队列中的订单信息</span></span><br><span class="line">                    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> orderTasks.take();</span><br><span class="line">                    <span class="comment">//2. 创建订单</span></span><br><span class="line">                    handleVoucherOrder(voucherOrder);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;订单处理异常&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(SECKILL_SCRIPT,</span><br><span class="line">                Collections.emptyList(), voucherId.toString(),</span><br><span class="line">                UserHolder.getUser().getId().toString());</span><br><span class="line">        <span class="keyword">if</span> (result.intValue() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;没有库存了&quot;</span> : <span class="string">&quot;您已经下过单了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        <span class="comment">//封装到voucherOrder中</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        voucherOrder.setUserId(UserHolder.getUser().getId());</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        <span class="comment">//加入到阻塞队列</span></span><br><span class="line">        orderTasks.add(voucherOrder);</span><br><span class="line">        <span class="comment">//主线程获取代理对象</span></span><br><span class="line">        proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createVoucherOrder</span><span class="params">(VoucherOrder voucherOrder)</span> &#123;</span><br><span class="line">        <span class="comment">// 一人一单逻辑</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> voucherOrder.getUserId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">voucherId</span> <span class="operator">=</span> voucherOrder.getVoucherId();</span><br><span class="line">        <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;你已经抢过优惠券了哦&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5. 扣减库存</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                    .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                    .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">                    .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>)</span><br><span class="line">                    .update();</span><br><span class="line">            <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//7. 将订单数据保存到表中</span></span><br><span class="line">            save(voucherOrder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><ul>
<li>秒杀业务的优化思路是什么？</li>
</ul>
<ol>
<li>先利用Redis完成库存容量、一人一单的判断，完成抢单业务</li>
<li>再将下单业务放入阻塞队列，利用独立线程异步下单</li>
</ol>
<ul>
<li>基于阻塞队列的异步秒杀存在哪些问题？</li>
</ul>
<ol>
<li>内存限制问题：<br> -我们现在使用的是JDK里的阻塞队列，它使用的是JVM的内存，如果在高并发的条件下，无数的订单都会放在阻塞队列里，可能就会造成<code>内存溢出</code>，所以我们在创建阻塞队列时，设置了一个长度，但是如果真的存满了，再有新的订单来往里塞，那就塞不进去了，存在内存限制问题</li>
<li>数据安全问题：<br>经典服务器宕机了，用户明明下单了，但是数据库里没有</li>
</ol>
<h1 id="Redis消息队列"><a href="#Redis消息队列" class="headerlink" title="Redis消息队列"></a>Redis消息队列</h1><h2 id="认识消息队列"><a href="#认识消息队列" class="headerlink" title="认识消息队列"></a>认识消息队列</h2><ul>
<li>什么是消息队列？字面意思就是存放消息的队列，最简单的消息队列模型包括3个角色</li>
</ul>
<ol>
<li>消息队列：存储和管理消息，也被称为消息代理（Message Broker）</li>
<li>生产者：发送消息到消息队列</li>
<li>消费者：从消息队列获取消息并处理消息</li>
</ol>
<ul>
<li>使用队列的好处在于<code>解耦</code>：举个例子，快递员(生产者)把快递放到驿站&#x2F;快递柜里去(Message Queue)去，我们(消费者)从快递柜&#x2F;驿站去拿快递，这就是一个异步，如果耦合，那么快递员必须亲自上楼把快递递到你手里，服务当然好，但是万一我不在家，快递员就得一直等我，浪费了快递员的时间。所以解耦还是非常有必要的</li>
<li>那么在这种场景下我们的秒杀就变成了：在我们下单之后，利用Redis去进行校验下单的结果，然后在通过队列把消息发送出去，然后在启动一个线程去拿到这个消息，完成解耦，同时也加快我们的响应速度</li>
<li>这里我们可以直接使用一些现成的(MQ)消息队列，如kafka，rabbitmq等，但是如果没有安装MQ，我们也可以使用Redis提供的MQ方案</li>
</ul>
<h2 id="基于List实现消息队列"><a href="#基于List实现消息队列" class="headerlink" title="基于List实现消息队列"></a>基于List实现消息队列</h2><ul>
<li><p>基于List结构模拟消息队列</p>
</li>
<li><p>消息队列(Message Queue)，字面意思就是存放消息的队列，而Redis的list数据结构是一个双向链表，很容易模拟出队列的效果</p>
</li>
<li><p>队列的入口和出口不在同一边，所以我们可以利用：LPUSH结合RPOP或者RPUSH结合LPOP来实现消息队列。</p>
</li>
<li><p>不过需要注意的是，当队列中没有消息时，RPOP和LPOP操作会返回NULL，而不像JVM阻塞队列那样会阻塞，并等待消息，所以我们这里应该使- 用BRPOP或者BLPOP来实现阻塞效果</p>
</li>
<li><p>基于List的消息队列有哪些优缺点？</p>
<ul>
<li>优点<ol>
<li>利用Redis存储，不受限于JVM内存上限</li>
<li>基于Redis的持久化机制，数据安全性有保障</li>
<li>可以满足消息有序性</li>
</ol>
</li>
<li>缺点<ol>
<li>无法避免消息丢失(经典服务器宕机)</li>
<li>只支持单消费者(一个消费者把消息拿走了，其他消费者就看不到这条消息了)</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="基于PubSub的消息队列"><a href="#基于PubSub的消息队列" class="headerlink" title="基于PubSub的消息队列"></a>基于PubSub的消息队列</h2><ul>
<li>PubSub(发布订阅)是Redis2.0版本引入的消息传递模型。顾名思义，消费和可以订阅一个或多个channel，生产者向对应channel发送消息- 后，所有订阅者都能收到相关消息</li>
<li>SUBSCRIBE channel [channel]：订阅一个或多个频道</li>
<li>PUBLISH channel msg：向一个频道发送消息</li>
<li>PSUBSCRIBE pattern [pattern]：订阅与pattern格式匹配的所有频道</li>
</ul>
<blockquote>
<p>Subscribes the client to the given patterns.<br>Supported glob-style patterns:</p>
<ul>
<li>h?flo subscribes to hello, hallo and hxllo</li>
<li>h*llo subscribes to hllo and heeeello</li>
<li>h[ae]llo subscribes to hello and hallo, but not hillo<br>Use \ to escape special characters if you want to match them verbatim.</li>
</ul>
</blockquote>
<ul>
<li><p>基于PubSub的消息队列有哪些优缺点</p>
</li>
<li><p>优点：</p>
<ol>
<li>采用发布订阅模型，支持多生产，多消费</li>
</ol>
</li>
<li><p>缺点：</p>
</li>
</ul>
<ol>
<li>不支持数据持久化</li>
<li>无法避免消息丢失（如果向频道发送了消息，却没有人订阅该频道，那发送的这条消息就丢失了）</li>
<li>消息堆积有上限，超出时数据丢失（消费者拿到数据的时候处理的太慢，而发送消息发的太快）</li>
</ol>
<h2 id="基于Stream的消息队列"><a href="#基于Stream的消息队列" class="headerlink" title="基于Stream的消息队列"></a>基于Stream的消息队列</h2><ul>
<li>Stream是Redis 5.0引入的一种新数据类型，可以时间一个功能非常完善的消息队列</li>
<li>发送消息的命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XADD key [NOMKSTREAM] [MAXLEN|MINID [=!~] threshold [LIMIT count]] *|ID field value [field value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>NOMKSTREAM<ul>
<li>如果队列不存在，是否自动创建队列，默认是自动创建</li>
</ul>
</li>
<li>[MAXLEN|MINID [&#x3D;!~] threshold [LIMIT count]]<ul>
<li>设置消息队列的最大消息数量，不设置则无上限</li>
</ul>
</li>
<li>*|ID<ul>
<li>消息的唯一id，*代表由Redis自动生成。格式是”时间戳-递增数&gt;字”，例如”114514114514-0”</li>
</ul>
</li>
<li>field value [field value …]<ul>
<li>发送到队列中的消息，称为Entry。格式就是多个key-value键&gt;值对</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><p>举例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建名为users的队列，并向其中发送一个消息，内容是&#123;name=jack, age=21&#125;，并且使用Redis自动生成ID</span></span><br><span class="line">XADD <span class="built_in">users</span> * name jack age 21</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取消息的方式之一：XREAD</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] ID [ID ...]</span><br></pre></td></tr></table></figure>


<blockquote>
<ul>
<li>[COUNT count]</li>
<li>每次读取消息的最大数量</li>
<li>[BLOCK milliseconds]<ul>
<li>当没有消息时，是否阻塞，阻塞时长</li>
</ul>
</li>
<li>STREAMS key [key …]<ul>
<li>要从哪个队列读取消息，key就是队列名</li>
</ul>
</li>
<li>ID [ID …]<ul>
<li>起始ID，只返回大于该ID的消息<ul>
<li>0：表示从第一个消息开始</li>
<li>$：表示从最新的消息开始</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>例如：使用XREAD读取第一个消息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XREAD COUNT 1 STREAMS <span class="built_in">users</span> 0</span><br><span class="line">1) 1) <span class="string">&quot;users&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1667119621804-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;jack&quot;</span></span><br><span class="line">            3) <span class="string">&quot;age&quot;</span></span><br><span class="line">            4) <span class="string">&quot;21&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>例如：XREAD阻塞方式，读取最新消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XREAD COUNT 2 BLOCK 10000 STREAMS <span class="built_in">users</span> $</span><br></pre></td></tr></table></figure>
</li>
<li><p>在业务开发中，我们可以使用循环调用的XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//尝试读取队列中的消息，最多阻塞2秒</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> redis.execute(<span class="string">&quot;XREAD COUNT 1 BLOCK 2000 STREAMS users $&quot;</span>);</span><br><span class="line">    <span class="comment">//没读取到，跳过下面的逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(msg == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理消息</span></span><br><span class="line">    handleMessage(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>注意：当我们指定其实ID为$时，代表只能读取到最新消息，如果当我们在处理一条消息的过程中，又有超过1条以上的消息到达队列，那么下次获取的时候，也只能获取到最新的一条，会出现<code>漏读消息</code>的问题</p>
</blockquote>
<ul>
<li>STREAM类型消息队列的XREAD命令特点</li>
</ul>
<ol>
<li>消息可回溯</li>
<li>一个消息可以被多个消费者读取</li>
<li>可以阻塞读取</li>
<li>有漏读消息的风险</li>
</ol>
<h2 id="基于Stream的消息队列—消费者组"><a href="#基于Stream的消息队列—消费者组" class="headerlink" title="基于Stream的消息队列—消费者组"></a>基于Stream的消息队列—消费者组</h2><ul>
<li>消费者组(Consumer Group)：将多个消费者划分到一个组中，监听同一个队列，具备以下特点</li>
</ul>
<ol>
<li>消息分流<ul>
<li>队列中的消息会分留给组内的不同消费者，而不是重复消费者，从而加快消息处理的速度</li>
</ul>
</li>
<li>消息标识<ul>
<li>消费者会维护一个标识，记录最后一个被处理的消息，哪怕消费者宕机重启，还会从标识之后读取消息，确保每一个消息都会被消费</li>
</ul>
</li>
<li>消息确认<ul>
<li>消费者获取消息后，消息处于pending状态，并存入一个pending-list，当处理完成后，需要通过XACK来确认消息，标记消息为已处理，才会从pending-list中移除</li>
</ul>
</li>
</ol>
<ul>
<li>创建消费者组<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE key groupName ID [MKSTREAM]</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<ul>
<li>key<ul>
<li>队列名称</li>
</ul>
</li>
<li>groupName<ul>
<li>消费者组名称</li>
</ul>
</li>
<li>ID<ul>
<li>起始ID标识，$代表队列中的最后一个消息，0代表队列中的第一个消息</li>
</ul>
</li>
<li>MKSTREAM<ul>
<li>队列不存在时自动创建队列</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>其他常见命令<ul>
<li>删除指定的消费者组  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP DESTORY key groupName</span><br></pre></td></tr></table></figure></li>
<li>给指定的消费者组添加消费者<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP CREATECONSUMER key groupName consumerName</span><br></pre></td></tr></table></figure></li>
<li>删除消费者组中指定的消费者<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP DELCONSUMER key groupName consumerName</span><br></pre></td></tr></table></figure></li>
<li>从消费者组中读取消息<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [keys ...] ID [ID ...]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>group<ul>
<li>消费者组名称</li>
</ul>
</li>
<li>consumer<ul>
<li>消费者名，如果消费者不存在，会自动创建一个消费者</li>
</ul>
</li>
<li>count<ul>
<li>本次查询的最大数量</li>
</ul>
</li>
<li>BLOCK milliseconds<ul>
<li>当前没有消息时的最大等待时间</li>
</ul>
</li>
<li>NOACK<ul>
<li>无需手动ACK，获取到消息后自动确认（一般不用，我们都是手动确认）</li>
</ul>
</li>
<li>STREAMS key<ul>
<li>指定队列名称</li>
</ul>
</li>
<li>ID<ul>
<li>获取消息的起始ID</li>
<li>&gt;：从下一个未消费的消息开始(pending-list中)</li>
<li>其他：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><p>消费者监听消息的基本思路</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">// 尝试监听队列，使用阻塞模式，最大等待时长为2000ms</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> redis.call(<span class="string">&quot;XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(msg == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 没监听到消息，重试</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//处理消息，完成后要手动确认ACK，ACK代码在handleMessage中编写</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//0表示从pending-list中的第一个消息开始，如果前面都ACK了，那么这里就不会监听到消息</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> redis.call(<span class="string">&quot;XREADGROUP GROUP g1 c1 COUNT 1 STREAMS s1 0&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(msg == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//null表示没有异常消息，所有消息均已确认，结束循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//说明有异常消息，再次处理</span></span><br><span class="line">                handleMessage(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                <span class="comment">//再次出现异常，记录日志，继续循环</span></span><br><span class="line">                log.error(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>STREAM类型消息队列的XREADGROUP命令的特点</p>
<ol>
<li>消息可回溯</li>
<li>可以多消费者争抢消息，加快消费速度</li>
<li>可以阻塞读取</li>
<li>没有消息漏读风险</li>
<li>有消息确认机制，保证消息至少被消费一次</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">List</th>
<th align="center">PubSub</th>
<th align="center">Stream</th>
</tr>
</thead>
<tbody><tr>
<td align="center">消息持久化</td>
<td align="center">支持</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">阻塞读取</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">消息堆积处理</td>
<td align="center">受限于内存空间<br>可以利用多消费者加快处理</td>
<td align="center">受限于消费者缓冲区</td>
<td align="center">受限于队列长度<br>可以利用消费者提供消费速度，减少堆积</td>
</tr>
<tr>
<td align="center">消息确认机制</td>
<td align="center">不支持</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">消息回溯</td>
<td align="center">不支持</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
</tbody></table>
<h2 id="Stream消息队列实现异步秒杀下单"><a href="#Stream消息队列实现异步秒杀下单" class="headerlink" title="Stream消息队列实现异步秒杀下单"></a>Stream消息队列实现异步秒杀下单</h2><ul>
<li>需求：</li>
</ul>
<ol>
<li>创建一个Stream类型的消息队列，名为stream.orders</li>
<li>修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId</li>
<li>项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单</li>
</ol>
<ul>
<li><p><code>步骤一</code>：创建一个Stream类型的消息队列，名为stream.orders</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE stream.orders g1 0 MKSTREAM</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>步骤二</code>：修改Lua脚本，新增orderId参数，并将订单信息加入到消息队列中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 1.参数列表</span><br><span class="line">-- 1.1.优惠券<span class="built_in">id</span></span><br><span class="line"><span class="built_in">local</span> voucherId = ARGV[1]</span><br><span class="line">-- 1.2.用户<span class="built_in">id</span></span><br><span class="line"><span class="built_in">local</span> userId = ARGV[2]</span><br><span class="line">-- 1.3 订单<span class="built_in">id</span></span><br><span class="line"><span class="built_in">local</span> orderId = ARGV[3]</span><br><span class="line"></span><br><span class="line">-- 2.数据key</span><br><span class="line">-- 2.1.库存key</span><br><span class="line"><span class="built_in">local</span> stockKey = <span class="string">&#x27;seckill:stock:&#x27;</span> .. voucherId</span><br><span class="line">-- 2.2.订单key</span><br><span class="line"><span class="built_in">local</span> orderKey = <span class="string">&#x27;seckill:order:&#x27;</span> .. voucherId</span><br><span class="line"></span><br><span class="line">-- 3.脚本业务</span><br><span class="line">-- 3.1.判断库存是否充足 get stockKey</span><br><span class="line"><span class="keyword">if</span>(tonumber(redis.call(<span class="string">&#x27;get&#x27;</span>, stockKey)) &lt;= 0) <span class="keyword">then</span></span><br><span class="line">    -- 3.2.库存不足，返回1</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">end</span><br><span class="line">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span><br><span class="line"><span class="keyword">if</span>(redis.call(<span class="string">&#x27;sismember&#x27;</span>, orderKey, userId) == 1) <span class="keyword">then</span></span><br><span class="line">    -- 3.3.存在，说明是重复下单，返回2</span><br><span class="line">    <span class="built_in">return</span> 2</span><br><span class="line">end</span><br><span class="line">-- 3.4.扣库存 incrby stockKey -1</span><br><span class="line">redis.call(<span class="string">&#x27;incrby&#x27;</span>, stockKey, -1)</span><br><span class="line">-- 3.5.下单（保存用户）sadd orderKey userId</span><br><span class="line">redis.call(<span class="string">&#x27;sadd&#x27;</span>, orderKey, userId)</span><br><span class="line">-- 3.6 发送消息到队列中， xadd stream.orders * k1 v1 k1 v1...</span><br><span class="line">redis.call(<span class="string">&#x27;xadd&#x27;</span>,<span class="string">&#x27;stream.orders&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;userId&#x27;</span>,userId,<span class="string">&#x27;voucherId&#x27;</span>,voucherId,<span class="string">&quot;id&quot;</span>,orderId)</span><br><span class="line"><span class="built_in">return</span> 0</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>步骤三</code>：修改秒杀逻辑</p>
</li>
</ul>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">DIFF</button></li><li class="tab"><button type="button" data-href="#tab1-2">修改后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><p>由于将下单数据加入到消息队列的功能，我们在Lua脚本中实现了，所以这里就不需要将下单数据加入到JVM的阻塞队列中去了，同时Lua脚本中我们新增了一个参数</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    public Result seckillVoucher(Long voucherId) &#123;</span><br><span class="line"><span class="addition">+       long orderId = redisIdWorker.nextId(&quot;order&quot;);</span></span><br><span class="line">        Long result = stringRedisTemplate.execute(SECKILL_SCRIPT,</span><br><span class="line">                Collections.emptyList(), voucherId.toString(),</span><br><span class="line"><span class="addition">+               UserHolder.getUser().getId().toString(), String.valueOf(orderId));</span></span><br><span class="line">        if (result.intValue() != 0) &#123;</span><br><span class="line">            return Result.fail(result.intValue() == 1 ? &quot;库存不足&quot; : &quot;不能重复下 单&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="deletion">-       long orderId = redisIdWorker.nextId(&quot;order&quot;);</span></span><br><span class="line"><span class="deletion">-       //封装到voucherOrder中</span></span><br><span class="line"><span class="deletion">-       VoucherOrder voucherOrder = new VoucherOrder();</span></span><br><span class="line"><span class="deletion">-       voucherOrder.setVoucherId(voucherId);</span></span><br><span class="line"><span class="deletion">-       voucherOrder.setUserId(UserHolder.getUser().getId());</span></span><br><span class="line"><span class="deletion">-       voucherOrder.setId(orderId);</span></span><br><span class="line"><span class="deletion">-       //加入到阻塞队列</span></span><br><span class="line"><span class="deletion">-       orderTasks.add(voucherOrder);</span></span><br><span class="line">        //主线程获取代理对象</span><br><span class="line">        proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        return Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//获取用户</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 1. 执行lua脚本</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> stringRedisTemplate.execute(</span><br><span class="line">            SECKILL_SCRIPT,</span><br><span class="line">            Collections.emptyList(),</span><br><span class="line">            voucherId.toString(), userId.toString(),String.valueOf(orderId)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> result.intValue();</span><br><span class="line">    <span class="comment">// 2. 判断结果是否为0</span></span><br><span class="line">    <span class="comment">// 2.1 不为 0 ,返回异常信息</span></span><br><span class="line">    <span class="keyword">if</span> (r != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(r == <span class="number">1</span> ? <span class="string">&quot;没有库存了&quot;</span> : <span class="string">&quot;您已经下过单了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.8 获取代理对象</span></span><br><span class="line">    proxy = (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="comment">// 3. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>

<ul>
<li>根据伪代码来修改我们的<code>VoucherOrderHandler</code><div class="tabs" id="tab1-"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1--1">伪代码</button></li><li class="tab"><button type="button" data-href="#tab1--2">修改后</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1--1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">// 尝试监听队列，使用阻塞模式，最大等待时长为2000ms</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> redis.call(<span class="string">&quot;XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(msg == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 没监听到消息，重试</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//处理消息，完成后要手动确认ACK</span></span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//0表示从pending-list中的第一个消息开始，如果前面都ACK了，那么这里就不会监听到消息</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">msg</span> <span class="operator">=</span> redis.call(<span class="string">&quot;XREADGROUP GROUP g1 c1 COUNT 1 STREAMS s1 0&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(msg == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//null表示没有异常消息，所有消息均已确认，结束循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//说明有异常消息，再次处理</span></span><br><span class="line">                handleMessage(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                <span class="comment">//再次出现异常，记录日志，继续循环</span></span><br><span class="line">                log.error(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1--2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderHandler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;stream.orders&quot;</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS stream.orders &gt;</span></span><br><span class="line">                    List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                            Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                            StreamReadOptions.empty().count(<span class="number">1</span>).block(Duration.ofSeconds(<span class="number">2</span>)),</span><br><span class="line">                            StreamOffset.create(queueName, ReadOffset.lastConsumed())</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//2.判断消息是否获取成功</span></span><br><span class="line">                    <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty())&#123;</span><br><span class="line">                        <span class="comment">//2.1 如果获取失败，说明没有消息，继续下一次循环</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//3. 解析消息中的订单消息</span></span><br><span class="line">                    MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                    Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//4. 如果获取成功，可以下单</span></span><br><span class="line">                    handlerVoucherOrder(voucherOrder);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//5. ACK确认</span></span><br><span class="line">                    stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;处理订单异常&quot;</span>, e);</span><br><span class="line">                    handlerPendingList();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handlerPendingList</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//1.获取PendingList中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 STREAMS stream.orders 0</span></span><br><span class="line">                    List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(</span><br><span class="line">                            Consumer.from(<span class="string">&quot;g1&quot;</span>, <span class="string">&quot;c1&quot;</span>),</span><br><span class="line">                            StreamReadOptions.empty().count(<span class="number">1</span>),</span><br><span class="line">                            StreamOffset.create(queueName, ReadOffset.from(<span class="string">&quot;0&quot;</span>))</span><br><span class="line">                    );</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//2.判断消息是否获取成功</span></span><br><span class="line">                    <span class="keyword">if</span> (list == <span class="literal">null</span> || list.isEmpty())&#123;</span><br><span class="line">                        <span class="comment">//2.1 如果获取失败，说明Pending没有异常消息，跳出循环</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//3. 解析消息中的订单消息</span></span><br><span class="line">                    MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="number">0</span>);</span><br><span class="line">                    Map&lt;Object, Object&gt; values = record.getValue();</span><br><span class="line">                    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(values, <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>(), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//4. 如果获取成功，可以下单</span></span><br><span class="line">                    handlerVoucherOrder(voucherOrder);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//5. ACK确认</span></span><br><span class="line">                    stringRedisTemplate.opsForStream().acknowledge(queueName,<span class="string">&quot;g1&quot;</span>,record.getId());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;处理Pending-list订单异常&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">                        interruptedException.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></li>
</ul>
<h1 id="达人探店"><a href="#达人探店" class="headerlink" title="达人探店"></a>达人探店</h1><h2 id="发布探店笔记"><a href="#发布探店笔记" class="headerlink" title="发布探店笔记"></a>发布探店笔记</h2><p>这部分代码已经提供好了，我们来看看对应的数据表</p>
<div class="tabs" id="tab1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab1-1">tb_blog</button></li><li class="tab"><button type="button" data-href="#tab1-2">tb_blog_comments</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab1-1"><ul>
<li>探店店笔记表，包含笔记中的标题、文字、图片等</li>
</ul>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Collation</th>
<th>Null</th>
<th>Key</th>
<th>Default</th>
<th>Extra</th>
<th>Comment</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint unsigned</td>
<td>(NULL)</td>
<td>NO</td>
<td>PRI</td>
<td>(NULL)</td>
<td>auto_increment</td>
<td>主键</td>
</tr>
<tr>
<td>shop_id</td>
<td>bigint</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>商户id</td>
</tr>
<tr>
<td>user_id</td>
<td>bigint unsigned</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>用户id</td>
</tr>
<tr>
<td>title</td>
<td>varchar(255)</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>标题</td>
</tr>
<tr>
<td>images</td>
<td>varchar(2048)</td>
<td>utf8mb4_general_ci</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>探店的照片，最多9张，多张以”,”隔开</td>
</tr>
<tr>
<td>content</td>
<td>varchar(2048)</td>
<td>utf8mb4_unicode_ci</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>探店的文字描述</td>
</tr>
<tr>
<td>liked</td>
<td>int unsigned</td>
<td>(NULL)</td>
<td>YES</td>
<td></td>
<td>0</td>
<td></td>
<td>点赞数量</td>
</tr>
<tr>
<td>comments</td>
<td>int unsigned</td>
<td>(NULL)</td>
<td>YES</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>评论数量</td>
</tr>
<tr>
<td>create_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED</td>
<td>创建时间</td>
</tr>
<tr>
<td>update_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED on update CURRENT_TIMESTAMP</td>
<td>更新时间</td>
</tr>
</tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab1-2"><ul>
<li>探店店笔记表，包含笔记中的标题、文字、图片等</li>
</ul>
<table>
<thead>
<tr>
<th align="center">Field</th>
<th align="center">Type</th>
<th align="center">Collation</th>
<th align="center">Null</th>
<th align="center">Key</th>
<th align="center">Default</th>
<th align="center">Extra</th>
<th align="center">Comment</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">bigint unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center">PRI</td>
<td align="center">(NULL)</td>
<td align="center">auto_increment</td>
<td align="center">主键</td>
</tr>
<tr>
<td align="center">user_id</td>
<td align="center">bigint unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">用户id</td>
</tr>
<tr>
<td align="center">blog_id</td>
<td align="center">bigint unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">探店id</td>
</tr>
<tr>
<td align="center">parent_id</td>
<td align="center">bigint unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">关联的1级评论id，如果是一级评论，则值为0</td>
</tr>
<tr>
<td align="center">answer_id</td>
<td align="center">bigint unsigned</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">回复的评论id</td>
</tr>
<tr>
<td align="center">content</td>
<td align="center">varchar(255)</td>
<td align="center">utf8mb4_general_ci</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">回复的内容</td>
</tr>
<tr>
<td align="center">liked</td>
<td align="center">int unsigned</td>
<td align="center">(NULL)</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">点赞数</td>
</tr>
<tr>
<td align="center">status</td>
<td align="center">tinyint unsigned</td>
<td align="center">(NULL)</td>
<td align="center">YES</td>
<td align="center"></td>
<td align="center">(NULL)</td>
<td align="center"></td>
<td align="center">状态，0：正常，1：被举报，2：禁止查看</td>
</tr>
<tr>
<td align="center">create_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED</td>
<td align="center">创建时间</td>
</tr>
<tr>
<td align="center">update_time</td>
<td align="center">timestamp</td>
<td align="center">(NULL)</td>
<td align="center">NO</td>
<td align="center"></td>
<td align="center">CURRENT_TIMESTAMP</td>
<td align="center">DEFAULT_GENERATED on update CURRENT_TIMESTAMP</td>
<td align="center">更新时间</td>
</tr>
</tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>


<ul>
<li>对应的实体类，数据表中并没有用户头像和用户昵称，但是对应的实体类里却有，这是因为使用了<code>@TableField(exist = false)</code> 用来解决实体类中有的属性但是数据表中没有的字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_blog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long shopId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户图标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否点赞过了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean isLike;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 探店的照片，最多9张，多张以&quot;,&quot;隔开</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String images;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 探店的文字描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点赞数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer liked;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 评论数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer comments;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>效果图如下<br><img src="https://pic.imgdb.cn/item/6496f99c1ddac507ccf48e2b.jpg"></p>
</li>
<li><p>对应代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">saveBlog</span><span class="params">(<span class="meta">@RequestBody</span> Blog blog)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取登录用户</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    blog.setUserId(user.getId());</span><br><span class="line">    <span class="comment">// 保存探店博文</span></span><br><span class="line">    blogService.save(blog);</span><br><span class="line">    <span class="comment">// 返回id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(blog.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上传图片的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;blog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">uploadImage</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile image)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取原始文件名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> image.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 生成新文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> createNewFileName(originalFilename);</span><br><span class="line">        <span class="comment">// 保存文件</span></span><br><span class="line">        image.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        log.debug(<span class="string">&quot;文件上传成功，&#123;&#125;&quot;</span>, fileName);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(fileName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这里我们需要修改<code>SystemConstants.IMAGE_UPLOAD_DIR</code> 为自己图片所在的地址，在实际开发中图片一般会放在nginx上或者是云存储上。</p>
</blockquote>
</li>
</ul>
<h2 id="查看探店笔记"><a href="#查看探店笔记" class="headerlink" title="查看探店笔记"></a>查看探店笔记</h2><ul>
<li>需求：点击首页的探店笔记，会进入详情页面，我们现在需要实现页面的查询接口</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6496fa121ddac507ccf5306c.jpg"></p>
<ul>
<li>随便点击一张图片，查看发送的请求<blockquote>
<p>请求网址: <a href="http://localhost:8080/api/blog/6">http://localhost:8080/api/blog/6</a><br>请求方法: GET</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot事务失效的几种情况</title>
    <url>//2023/06/20/SpringBoot%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<p>今天写项目遇到了，加上百度搜的记录一下</p>
<ol>
<li><p>内部调用失效<br>使用一个没有事务管理的方法调用一个有事务的方法，执行失败后不会进行回滚：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">saveWithOrder</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> invokeSave(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">invokeSave</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> save(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>当前给<code>invokeSave</code>加了事务，而没有给外面的<code>saveWithOrder</code>加上事务</p>
</li>
<li><p>而saveWithOrder调用invokeSave时，实际上是使用 <code>this</code>: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.invokeSave(id);</span><br></pre></td></tr></table></figure></li>
<li><p>而this拿到的是当前类对象，而不是当前类的代理对象</p>
</li>
<li><p>那么事务要生效，是Spring对当前类做了动态代理，拿到当前类的代理对象，做出了事务处理</p>
</li>
<li><p>而当前this使用的是非代理对象，所以是没有事务功能的，也就会导致<code>invokeSave</code>方法的事务管理失效</p>
</li>
</ol>
<br>

<ul>
<li>解决方法就是拿到事务代理对象：<ol>
<li><p>拿到当前对象代理对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ShopService</span> <span class="variable">proxy</span> <span class="operator">=</span> (ShopService) AopContext.currentProxy();</span><br></pre></td></tr></table></figure></li>
<li><p>使用代理对象调用方法,此时该方法就会被spring管理。那么内部事务自然也会生效</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> proxy.invokeSave(id);</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加依赖</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动类上加上<code>EnableAspectJAutoProxy</code>注解暴露代理对象</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<ol start="2">
<li>没有指定监听的<code>Exception</code></li>
</ol>
<ul>
<li><code>@Transactional</code>只会监听<code>RuntimeException</code>，当抛出其他异常时，不能正常捕获，也就不会回滚。</li>
<li>解决方法：<ol>
<li>手动捕获异常，然后包装为RuntimeException抛出</li>
<li>使用roobackFor属性指定需要捕获的异常：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">delete</span> <span class="operator">=</span> mapper.delete(shop);</span><br><span class="line"><span class="keyword">return</span> delete;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<p>目前遇到两种，遇到了再更新。</p>
<blockquote>
<p>一篇非常值得参考的文章：<a href="https://mp.weixin.qq.com/s/FVPe4OrC33px02ldqzkTaQ">https://mp.weixin.qq.com/s/FVPe4OrC33px02ldqzkTaQ</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>BUG分享</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot中bean重复定义</title>
    <url>//2023/06/19/SpringBoot%E4%B8%ADbean%E9%87%8D%E5%A4%8D%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<ul>
<li>启动SpringBoot项目时报错，信息如下</li>
</ul>
<p>&#x2F;***************************<br>APPLICATION FAILED TO START<br>&#x2F;***************************</p>
<p>Description:</p>
<p>The bean ‘dataSource’, defined in class path resource [org&#x2F;apache&#x2F;shardingsphere&#x2F;shardingjdbc&#x2F;spring&#x2F;boot&#x2F;SpringBootConfiguration.class], could not be registered. A bean with that name has already been defined in class path resource [com&#x2F;alibaba&#x2F;druid&#x2F;spring&#x2F;boot&#x2F;autoconfigure&#x2F;DruidDataSourceAutoConfigure.class] and overriding is disabled.</p>
<p>Action:</p>
<p>Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding&#x3D;true</p>
<blockquote>
<p>通过报错信息得知是Bean定义重复导致报错，并且这里给出解决方式：<br>然后给了一个提示, 建议打开一个开关，bean重写覆盖功能。<br><code>allow-bean-definition-overriding=true</code></p>
</blockquote>
<ul>
<li>于是百度了一下</li>
<li>网上大多数的解决方案都是在yml文件里添加一项配置<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当出现相同名字的类进行注册时，准许覆盖注册</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">main:</span></span><br><span class="line">        <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
这样能解决问题么？答案是能。</li>
</ul>
<p>但是这种方式并不是最正确的解决方案，因为两个地方同时定义了一个bean ，使用bean的覆盖重写其实在某种情况下是很可能出事的。</p>
<p>找了半个多小时，发现是项目里的其他模块的<code>bean</code>影响到了在使用的模块，将其他模块移除，正常运行。<br>闹心</p>
]]></content>
      <tags>
        <tag>BUG分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Redisson锁重试和WatchDog机制</title>
    <url>//2023/06/23/Redisson%E9%94%81%E9%87%8D%E8%AF%95%E5%92%8CWatchDog%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>Redisson锁重试和WatchDog机制</p>
<ul>
<li><p>前面我们分析的是空参的tryLock方法，现在我们来分析一下这个带参数的</p>
</li>
<li><p>继续跟tryLock<br>进来以后先看首先做了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//首先将等待时间转为毫秒，后面操作都是以毫秒为单位</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> unit.toMillis(waitTime);</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//获取线程id，也就是每个线程独特的标识</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//获取锁，从tryAcquire开始业务逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(waitTime, leaseTime, unit, threadId);</span><br></pre></td></tr></table></figure>
</li>
<li><p>继续跟<code>tryAcquire</code>,进来可以看到<code>tryAcquire</code>又调用了<code>tryAcquireAsync</code>，继续跟</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Long <span class="title function_">tryAcquire</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get(tryAcquireAsync(waitTime, leaseTime, unit, threadId));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>到这里可以看到，一开始的业务逻辑了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="comment">//首先判断锁施放时间是否是永久</span></span><br><span class="line">    <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果不是-1，这里会给释放时间一个默认值，通过getLockWatchdogTimeout的源码可以得知，是30*1000毫秒，也就是30秒</span></span><br><span class="line">    RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                            commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                            TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6495969d1ddac507cc0fa812.jpg"></p>
</li>
<li><p>继续跟入<code>tryLockInnerAsync</code></p>
</li>
<li><p>通过源码可以得知，获取锁成功返回的是<code>nil</code>，而获取锁失败则返回的是锁的剩余有效期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line">    <span class="comment">//首先将施放时间记录到常量</span></span><br><span class="line">        internalLockLeaseTime = unit.toMillis(leaseTime);</span><br><span class="line">    <span class="comment">//执行lua脚本，成功则返回nil，nil可以理解为null，如果获取锁失败则返回锁剩余有效期和key名称</span></span><br><span class="line">        <span class="keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, command,</span><br><span class="line">                <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                        <span class="comment">//这里是发送锁执行成功的通知</span></span><br><span class="line">                        <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">                Collections.singletonList(getName()), internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>而拿到剩余有效期有啥用呢？往回倒一下看看</p>
</li>
<li><p>可以看到刚才tryLockInnerAsync的返回值是一个<code>Future</code>，异步函数，只管发出去了，return的也是一个<code>Future</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                                commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                                TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后将这个结果返回到一开始看到的<code>tryAcquire</code>方法，他的返回值是long类型的，就是锁的有效期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Long <span class="title function_">tryAcquire</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> get(tryAcquireAsync(waitTime, leaseTime, unit, threadId));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>继续返回到<code>tryLock</code>，也就是最开始我们看到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> unit.toMillis(waitTime);</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">//这里返回锁的有效期</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">ttl</span> <span class="operator">=</span> tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">    <span class="comment">// 进来判断，是null吗，根据刚才看的源码，成功返回nil，那么直接直接返回true就可以了</span></span><br><span class="line">    <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//实际上就是 time - 消耗时间， 如果time&lt;0 则说明时间用完了，直接返回false，否则重试</span></span><br><span class="line">    time -= System.currentTimeMillis() - current;</span><br><span class="line">    <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        acquireFailed(waitTime, unit, threadId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再次拿到当前时间</span></span><br><span class="line">     current = System.currentTimeMillis();</span><br><span class="line">     <span class="comment">//这里订阅了别的线程释放锁的通知。也就是前面lua脚本中的   &quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot; </span></span><br><span class="line">    RFuture&lt;RedissonLockEntry&gt; subscribeFuture = subscribe(threadId);</span><br><span class="line">    <span class="comment">//这里用的是 Futrue.await进行等待，在锁的剩余等待最大时间结束前完成，返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">if</span> (!subscribeFuture.await(time, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">        <span class="comment">//false就进到这里</span></span><br><span class="line">        <span class="keyword">if</span> (!subscribeFuture.cancel(<span class="literal">false</span>)) &#123;</span><br><span class="line">            subscribeFuture.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//首先取消订阅消息</span></span><br><span class="line">                    unsubscribe(subscribeFuture, threadId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        acquireFailed(waitTime, unit, threadId);</span><br><span class="line">        <span class="comment">//返回false结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果不是false进到这里</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//再次计算上面的逻辑消耗了多长时间</span></span><br><span class="line">        time -= System.currentTimeMillis() - current;</span><br><span class="line">        <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            acquireFailed(waitTime, unit, threadId);</span><br><span class="line">            <span class="comment">//如果超时了返回false，太TM严谨了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//终于进入到重试逻辑了</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//再次获取当前时间</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="comment">//再次tryAcquire，同上面的一样，这是进行重试了</span></span><br><span class="line">            ttl = tryAcquire(waitTime, leaseTime, unit, threadId);</span><br><span class="line">            <span class="comment">// 再次进行判断，别忘了，ttl返回null等于成功</span></span><br><span class="line">            <span class="keyword">if</span> (ttl == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果失败了，再次计算锁剩余时间还够不够，不够的返回false</span></span><br><span class="line">            time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//就算是重试也不能直接重试，这里再次使用到了 Futrue 进行尝试，也就是异步操作</span></span><br><span class="line">               <span class="comment">// waiting for message</span></span><br><span class="line">            currentTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">if</span> (ttl &gt;= <span class="number">0</span> &amp;&amp; ttl &lt; time) &#123;</span><br><span class="line">                <span class="comment">//getLatch信号量，释放锁会释放一个信号，这边接收到信号后会再次进行尝试</span></span><br><span class="line">                <span class="comment">//再次尝试也有等待时间，如果超过了等待时间，会返回false，在时间内拿到锁的话，则会返回true</span></span><br><span class="line">                <span class="comment">//而这个等待时间，两种：1.ttl(锁释放时间) &lt; time(剩余等待时间),就使用ttl</span></span><br><span class="line">                subscribeFuture.getNow().getLatch().tryAcquire(ttl, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//反之，则使用 time </span></span><br><span class="line">                subscribeFuture.getNow().getLatch().tryAcquire(time, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这边等到醒了，再次校验时间</span></span><br><span class="line">            time -= System.currentTimeMillis() - currentTime;</span><br><span class="line">            <span class="keyword">if</span> (time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                acquireFailed(waitTime, unit, threadId);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果时间还有，那么就返回到上面的 <code>while(true)</code> ，继续循环    </p>
</li>
<li><p>那么这里并不是无休止的等待，而是使用了<code>消息订阅</code>和<code>信号量</code>机制，你那边释放锁了，我这边再过去试一下，而并不是失败了就继续尝试，那样会增加不必要的消耗，大概可以理解为抢凳子游戏。</p>
</li>
<li><p>重试是解决了，那么超时呢，假设现在A是获取锁成功了，有一个剩余的有效期，A业务阻塞了，B的线程看A的ttl到期了，过来拿到了锁，也会发生线程安全问题</p>
</li>
<li><p>必须要确保锁是因为业务执行完到期才释放的， 而不能是因为到期了才释放</p>
</li>
<li><p>这里跟入 <code>tryAcquire</code>,继续跟入<code>tryAcquireAsync</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; RFuture&lt;Long&gt; <span class="title function_">tryAcquireAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (leaseTime != -<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//这里leaseTime等于-1的时候会用默认的时间，前面提到过，看门狗getLockWatchdogTimeout，默认是三十秒</span></span><br><span class="line">       RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,</span><br><span class="line">                                               commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),</span><br><span class="line">                                               TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);</span><br><span class="line">       <span class="comment">//当上面的 ttlRemainingFuture 成功后进来，两个参数就是剩余有效期和异常</span></span><br><span class="line">       ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;</span><br><span class="line">           <span class="comment">//这里说明抛异常了，那么什么也不做</span></span><br><span class="line">           <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果说剩余有效期等于null说明获取锁成功了</span></span><br><span class="line">           <span class="comment">// lock acquired</span></span><br><span class="line">           <span class="keyword">if</span> (ttlRemaining == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//这里进行非常关键的一步， 到期续约</span></span><br><span class="line">               scheduleExpirationRenewal(threadId);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> ttlRemainingFuture;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>跟进去<code>scheduleExpirationRenewal</code>看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleExpirationRenewal</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">        <span class="type">ExpirationEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpirationEntry</span>();</span><br><span class="line">        <span class="comment">//这里使用的 static final ConcurrentMap&lt;String, RedissonLock.ExpirationEntry&gt;</span></span><br><span class="line">        <span class="comment">//跟进去getEntryName得知是：id + name，而name是当前锁的name，而static说明，这个类的所有实例都可以看到这个hashMapper</span></span><br><span class="line">        <span class="comment">//也就是说，每个锁都有自己的名字，在mapper中都会有自己的entry，一把锁对应一个entry，不重复</span></span><br><span class="line">        <span class="comment">//putIfAbsent说明，如果第一次来，不存在，我再存入，如果存在，则不执行，也就说如果是重入，返回的则是旧的entry，也就锁第一次来的时候创建的entry</span></span><br><span class="line">        <span class="comment">//也就是说，不管重试多少次，使用的都是同一个entry</span></span><br><span class="line">        <span class="type">ExpirationEntry</span> <span class="variable">oldEntry</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">        <span class="keyword">if</span> (oldEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//这边来了个新的线程，加入进去</span></span><br><span class="line">            oldEntry.addThreadId(threadId);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果第一次来</span></span><br><span class="line">            entry.addThreadId(threadId);</span><br><span class="line">            <span class="comment">//那么做一个续约，更新有效期</span></span><br><span class="line">            renewExpiration();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这里跟进去<code>renewExpiration</code></p>
</li>
<li><p>这个对象里封装了两样东西，一个是当前<code>线程id</code>，一个就是<code>定时任务</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">renewExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取 entry，      </span></span><br><span class="line">        <span class="type">ExpirationEntry</span> <span class="variable">ee</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">        <span class="keyword">if</span> (ee == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Timout ，超时任务，定时任务</span></span><br><span class="line">        <span class="comment">//这里newTimeout有两个参数，第一个是它本身，第二个则是到期以后才会执行</span></span><br><span class="line">        <span class="comment">//下面表明了 internalLockLeaseTime / 3, TimeUnit.MILLISECONDS ，就是内部锁的释放时间 / 3</span></span><br><span class="line">        <span class="comment">//internalLockLeaseTime下面图有标注怎么来的 30 /3 ，就是说10秒钟他执行下面的逻辑</span></span><br><span class="line">        <span class="type">Timeout</span> <span class="variable">task</span> <span class="operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Timeout timeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//拿出entry</span></span><br><span class="line">                <span class="type">ExpirationEntry</span> <span class="variable">ent</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());</span><br><span class="line">                <span class="keyword">if</span> (ent == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//从entry获取线程id</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">threadId</span> <span class="operator">=</span> ent.getFirstThreadId();</span><br><span class="line">                <span class="keyword">if</span> (threadId == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//刷新有效期</span></span><br><span class="line">                RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);</span><br><span class="line">                future.onComplete((res, e) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="string">&quot; expiration&quot;</span>, e);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//重置完有效期后，有调用了自己，递归</span></span><br><span class="line">                    <span class="comment">//也就是说，每隔十秒，执行一次，执行开始时又进行定时</span></span><br><span class="line">                    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">                        <span class="comment">// reschedule itself</span></span><br><span class="line">                        renewExpiration();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, internalLockLeaseTime / <span class="number">3</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最后将任务放入到entry去</span></span><br><span class="line">        ee.setTimeout(task);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/6495a84f1ddac507cc318648.jpg"></p>
</li>
<li><p>接上一个的跟入<code>renewExpirationAsync</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> RFuture&lt;Boolean&gt; <span class="title function_">renewExpirationAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> evalWriteAsync(getName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">      <span class="comment">//如果这把锁是的当前线程的，我寻思不是也进不来不是</span></span><br><span class="line">              <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">              <span class="comment">//重点来了，重置有效期，重新计时了</span></span><br><span class="line">                      <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;return 1; &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                      <span class="string">&quot;return 0;&quot;</span>,</span><br><span class="line">              Collections.singletonList(getName()),</span><br><span class="line">              internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时我们再回来看<code>scheduleExpirationRenewal</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scheduleExpirationRenewal</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">     <span class="type">ExpirationEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpirationEntry</span>();</span><br><span class="line">     <span class="type">ExpirationEntry</span> <span class="variable">oldEntry</span> <span class="operator">=</span> EXPIRATION_RENEWAL_MAP.putIfAbsent(getEntryName(), entry);</span><br><span class="line">     <span class="keyword">if</span> (oldEntry != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 不是第一次已经在持续执行了定时任务,就不用再调用了</span></span><br><span class="line">         oldEntry.addThreadId(threadId);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         entry.addThreadId(threadId);</span><br><span class="line">         <span class="comment">//而第一次进来需要执行定时任务</span></span><br><span class="line">         renewExpiration();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在我们再来看一下释放锁的逻辑<code>unlockAsync</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> RFuture&lt;Void&gt; <span class="title function_">unlockAsync</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">      RPromise&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">RedissonPromise</span>&lt;Void&gt;();</span><br><span class="line">      <span class="comment">//释放锁获取 futrue </span></span><br><span class="line">      RFuture&lt;Boolean&gt; future = unlockInnerAsync(threadId);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Futrue 成功后会执行下面逻辑</span></span><br><span class="line">      future.onComplete((opStatus, e) -&gt; &#123;</span><br><span class="line">          <span class="comment">//取消更新任务</span></span><br><span class="line">          cancelExpirationRenewal(threadId);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">              result.tryFailure(e);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (opStatus == <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="type">IllegalMonitorStateException</span> <span class="variable">cause</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>(<span class="string">&quot;attempt to unlock lock, not locked by current thread by node id: &quot;</span></span><br><span class="line">                      + id + <span class="string">&quot; thread-id: &quot;</span> + threadId);</span><br><span class="line">              result.tryFailure(cause);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          result.trySuccess(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>取消定时任务逻辑<br><img src="https://pic.imgdb.cn/item/6495b12e1ddac507cc3f2b44.jpg"></p>
</li>
<li><p>到这里就结束了</p>
<blockquote>
<p>感慨一下大佬的思维模式,太顶了,像是订阅机制或者是基于HashMap实现的Entry的思想都是非常值得学习借鉴的.</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
  </entry>
  <entry>
    <title>spring</title>
    <url>//2023/06/27/spring/</url>
    <content><![CDATA[<h1 id="SPring是什么？"><a href="#SPring是什么？" class="headerlink" title="SPring是什么？"></a>SPring是什么？</h1><ul>
<li>spring是用来管理对象的一门技术</li>
<li>充分解耦</li>
</ul>
<h1 id="Spring核心板块"><a href="#Spring核心板块" class="headerlink" title="Spring核心板块"></a>Spring核心板块</h1><pre><code>1. Core Contatiner(核心容器)
</code></pre>
<ol start="2">
<li>IOC(控制反转)&#x2F;DI</li>
<li>aop(面向切面编程)</li>
<li>Aspexts(aop思想实现)</li>
<li>Data Access&#x2F;Data Integeration(数据访问&#x2F;数据集成(包容及其他技术，集成))</li>
<li>web开发</li>
<li>Test(单元测试与集成测试)</li>
</ol>
<h2 id="IOC-IOC容器-x2F-Bean"><a href="#IOC-IOC容器-x2F-Bean" class="headerlink" title="IOC(IOC容器)&#x2F;Bean"></a>IOC(IOC容器)&#x2F;Bean</h2><ul>
<li><p>使用对象时，由主动new产生对象转为外部提供对象，过程中对象的创建控制权由<code>程序</code>转移到<code>外部</code>，这种思想称为<code>控制反转</code></p>
</li>
<li><p>SPring提供了一个容器，用来充当<code>IOC</code>思想中的<code>外部</code></p>
</li>
<li><p>IOC负责对象的创建，初始化等一系列工作，被创建或被管理的对象在IOC容器中统称为<code>bean</code></p>
</li>
</ul>
<h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI(依赖注入)"></a>DI(依赖注入)</h2><blockquote>
<p>在容器中建立bean与bean之间的依赖关系的过程，称为依赖注入</p>
</blockquote>
<h2 id="xml文件配置"><a href="#xml文件配置" class="headerlink" title="xml文件配置"></a>xml文件配置</h2><ul>
<li><p>id:标签名</p>
</li>
<li><p>class：bean的类型 </p>
</li>
<li><p>name: 别名,多个别名使用空格<code> </code> 或 <code>,</code> 或<code> ;</code></p>
</li>
<li><p>scope:单例模式和非单例， 默认：singleton  非单例：prototype</p>
</li>
<li><p>property：  标签表示配置当前bean的属性<br>name:表示配置哪一个具体的属性<br>ref：表示参照的是哪一个bean</p>
</li>
<li><p>适合交给容器进行管理的<code>bean</code></p>
<ul>
<li>表现层对象</li>
<li>业务层对象</li>
<li>数据层对象</li>
<li>工具对象</li>
</ul>
</li>
<li><p>不适合交给容器进行管理的对象</p>
<ul>
<li>封装实体的对象</li>
</ul>
</li>
</ul>
<h2 id="bean实例化的三种方式"><a href="#bean实例化的三种方式" class="headerlink" title="bean实例化的三种方式"></a>bean实例化的三种方式</h2><ul>
<li><p>bean本质上就是一个对象，使用构造方法完成</p>
</li>
<li><p>实例化对象的三种方式：</p>
</li>
</ul>
<ol>
<li><p>空参构造方法实例化bean（public或private） 常用</p>
<ul>
<li>无参的构造方法如果不存在，将抛出异常 <strong>BeanCreationExceprtion</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>使用静态工厂实例化bean</p>
<ul>
<li><p>需要配置对应工厂对应构造方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.factory.OrderDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用实例化工厂实例化bean</p>
<ul>
<li>需要先实例化工厂，再通过工厂实例化bean</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三：使用实例工厂实例化bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要先实例化工厂，再通过工厂实例化bean--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.factory.UserDaoFactory&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    factory-method: 工厂中使用的是那个方法构造的</span></span><br><span class="line"><span class="comment">    factory-bean ： 工厂实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用FactoryBean实例化,第三种方式的变种  <strong>（实用）</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.factory.UserDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><ul>
<li>生命周期：从创建到销毁的过程</li>
<li>bean生命周期：bean从创建到销毁的整体过程</li>
<li>bean生命周期控制：在bean创建到销毁之前做的一些</li>
</ul>
<p>bean的生命周期</p>
<ul>
<li><p>初始化容器</p>
<ol>
<li>创建对象（内存分配）</li>
<li>执行构造方法</li>
<li>执行属性注入（set操作）</li>
<li><strong>执行bean初始化方法</strong></li>
</ol>
</li>
<li><p>使用bean<br>1. 执行业务操作</p>
</li>
<li><p>关闭&#x2F;销毁容器</p>
<ol>
<li><strong>执行bean销毁方法</strong></li>
</ol>
</li>
<li><p>配置bean的生命周期</p>
</li>
</ul>
<ol>
<li>xml方式</li>
</ol>
<ul>
<li><p>init-method:初始化之前执行</p>
</li>
<li><p>destroy-method：销毁前执行</p>
</li>
</ul>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>接口方式</p>
<ul>
<li><code>InitializingBean</code>(初始化) </li>
<li><code>DisposableBean</code>(销毁前)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span>  <span class="title class_">InitializingBean</span>, DisposableBean &#123;</span><br><span class="line">  ```java</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;destroy service....&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;init service....&quot;</span>);</span><br><span class="line">      &#125;&#125;</span><br><span class="line">  ```</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<ul>
<li><p>容器关闭前会触发bean的销毁</p>
</li>
<li><p>关闭容器的方式</p>
<ul>
<li><p>手动关闭容器</p>
<p><code>ConfigurableApplicationContext</code>接口<code>close()</code>操作</p>
</li>
<li><p>注册关闭钩子，在虚拟机推出前先关闭容器再退出虚拟机</p>
<p><code>ConfigurableApplicationContext</code>接口registerShutdownHook()操作</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line"><span class="comment">//    context.close();</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h2><ul>
<li>思考：向一个类中传递数据的方式有几种？</li>
</ul>
<p>能想到的就构造方法</p>
<ul>
<li><p>答案：1. 普通方法(set方法)	 2. 构造方法</p>
</li>
<li><p>思考: 依赖注入描述了在容器中建立bean与bean之间依赖关系的过程，如果<code>bean</code>运行需要的是数字或字符串呢 ?</p>
</li>
</ul>
<p>get、set方法</p>
<ul>
<li>答案： 1. 引用类型 	2. 基本数据类型和<code>String</code></li>
</ul>
<ul>
<li>依赖注入方式		<ul>
<li>setter注入<ul>
<li>简单类型</li>
<li><strong>引用</strong>类型</li>
</ul>
</li>
<li>构造器注入<ul>
<li>简单类型</li>
<li>引用类型</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>简单类型</p>
<ul>
<li><p>在bean中定义应用类型属性并提供可访问的<code>set</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">   <span class="keyword">private</span> String databaseName;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatabaseName</span><span class="params">(String databaseName)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置中使用 <code>property</code> 标签 <code>value</code>属性注入简单数据类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>构造器注入</p>
<ul>
<li><p>在类中创建构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>  <span class="type">int</span> number;</span><br><span class="line">    <span class="keyword">private</span>  String databaseName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">(<span class="type">int</span> number, String databaseName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">        <span class="built_in">this</span>.databaseName = databaseName;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置中使用 <code>constructor-arg</code> 标签 <code>name</code>指定名称，<code>value</code>指定值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;databaseName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>但是构造器存在一个很致命的问题：如果构造方法中的形参名一旦改变，那么配置文件中的constructor-arg也必须随之改变，那么无疑加大了耦合性。</p>
</li>
<li><p>解决方案1:配置文件中使用类型</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>但是呢，这个方案也有个问题，如果有两个同类型的形参，这不又g了</li>
</ul>
</li>
<li><p>解决方案2：使用形参位置进行定位</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用适合的类型即可</li>
</ul>
</li>
<li><p>依赖注入方式选择</p>
<ol>
<li>强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现</li>
<li>可选依赖使用setter注入进行，灵活性强</li>
<li>Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li>
<li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入</li>
<li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入</li>
<li><strong>自己开发的模块推荐使用setter注入</strong></li>
</ol>
</li>
</ul>
<h2 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h2><blockquote>
<p>什么是自动装配：IOC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配</p>
</blockquote>
<ul>
<li>自动装配方式<ol>
<li><strong>按类型（常用）</strong></li>
<li>按名称</li>
<li>按构造方法</li>
<li>不启用自动装配</li>
</ol>
</li>
</ul>
<ol>
<li><p>按类型,要求类型匹配必须是唯一的</p>
<ol>
<li>在类中提供setter入口方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDaoImpl bookDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDaoImpl bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置文件添加<code>autowire</code>配置,</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><ol>
<li>按名称装配,<code>autowire</code> 配置项改为 byName.需要和bean一致</li>
</ol>
</li>
</ol>
<ul>
<li>依赖自动装配特征<ul>
<li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li>
<li>使用按类型装配时 ( byType  ) 必须保障容器中相同类型的bean唯一，推荐使用</li>
<li>使用按名称装配时( byName ) 必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用</li>
<li>自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效</li>
</ul>
</li>
</ul>
<h2 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h2><blockquote>
<p>数组  、List、set、Map、Properties</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>yyy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>Enjoy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>yin<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>yin<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>Enjoy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>Enjoy<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>hl<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;李四&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;王五&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;张三&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;李四&quot;</span>&gt;</span>19<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;王五&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>





<ul>
<li>还是set方法，没什么好说的，了解就行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] array;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSet</span><span class="params">(Set&lt;String&gt; set)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h2 id="数据源对象管理"><a href="#数据源对象管理" class="headerlink" title="数据源对象管理"></a>数据源对象管理</h2><ul>
<li><p>用druid举例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/hmdp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>主要在于配置文件的name，可以百度查文档，不过多赘述</p>
</li>
</ul>
<h2 id="加载-properties文件"><a href="#加载-properties文件" class="headerlink" title="加载 properties文件"></a>加载 properties文件</h2><ol>
<li><p>开启context空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">+       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=</span></span><br><span class="line"><span class="tag">               <span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">               http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">+                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">+              http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>使用context文件，加载properties文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用属性占位符 ${}读取 properties 文件中的属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>jdbc.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localohost:3306/bbbb</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li><p>当配置文件单独使用username这种名称时,是可能会失效的，原因是会被系统中的重名环境变量顶替，如果需要，可以在加载properties文件时，多配置一个参数 <code>system-properties-mode=&quot;NEVER&quot;</code>  意为系统环境变量不生效</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果多个配置文件需要同时加载，可以使用 <code>,</code> 分隔  或使用 <code>*</code> 号，表示所有 properties文件都加载</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">     <span class="comment">&lt;!--加载jdbc &amp;&amp; jdbc2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,jdbc2.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载所有 properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="6">
<li><p>建议使用规范格式<code>classpath:*.properties</code>,读取当前工程内所有properties文件<br><code>classpath*:*.properties</code>:可以读取类路径所依赖jar包中的properties文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul>
<li><p>类加载形式</p>
<ol>
<li><p>类路径加载配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件路径加载配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>加载多个配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>,<span class="string">&quot;bean2.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>获取bean的方式</p>
<ol>
<li><p>使用bean名获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BootDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BootDao) context.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用bean名获取并指定类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BootDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;bookDao&quot;</span>, BootDao.class);</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用bean类型获取,当前容器内只能有一个这个类型的bean，否则会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BootDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> context.getBean(BootDao.class); </span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>容器类层结构图</p>
<p><img src="https://pic.imgdb.cn/item/64997d9e1ddac507cc508c77.jpg"></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<ul>
<li>容器相关</li>
</ul>
</blockquote>
<ul>
<li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean<code>延迟</code>加载</li>
<li>ApplicationContext接口是Spring容器的核心接口，初始化时bean<code>立即</code>加载</li>
<li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li>
<li>ApplicationContext接口常用初始化类<ul>
<li>ClassPathXmlApplicationContext</li>
<li>FileSystemXmlApplicationContext</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>bean相关</li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span>									<span class="attr">bean的id</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">&quot;dao bookDaoImpl daoImpl&quot;</span>				<span class="attr">bean的别名</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.yin.dao.impl.BookDaoImpl&quot;</span>			<span class="attr">bean类型</span>，<span class="attr">静态工厂类</span>，<span class="attr">FactoryBean类</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>								<span class="attr">控制bean的实例数量</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>							<span class="attr">生命周期初始化方法</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>						<span class="attr">生命周期销毁方法</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>								<span class="attr">自动装配类型</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>					<span class="attr">bean工厂方法</span>，<span class="attr">应用与静态工厂或实例工厂</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-bean</span>=<span class="string">&quot;com.yin.factory.BookDaoFactory&quot;</span> <span class="attr">实例工厂bean</span></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">      <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>								<span class="attr">控制bean延迟</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></table></figure>









<h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><blockquote>
<p>终于来了，md敲xml敲得脑子都麻了</p>
</blockquote>
<blockquote>
<p>之前使用配置文件的方式太过于繁琐</p>
</blockquote>
<ul>
<li><p>定义bean</p>
</li>
<li><p>使用<code>@Component</code>定义bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>核心配置文件中通过组件扫描加载bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">      http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.yin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>Spring提供<code> @Component</code>注解的三个衍生注解</p>
<ul>
<li>@Controller :用于表现层bean定义</li>
<li>@Service:用于业务层bean定义</li>
<li>@Repository:用于数据层bean定义</li>
</ul>
</li>
</ul>
<h1 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h1><blockquote>
<p>Spring3.0进行了船新升级，升级了纯注解开发模式，使用java类代替xml配置文件，开启了Spring快速开发赛道</p>
</blockquote>
<ul>
<li>所有配置文件转换为两个注解<ul>
<li>@Configuration：声明配置类</li>
<li>@ComponentScan : 扫描扫描路径，此注解只能添加一次，多个路径使用数组</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.yin.dao&quot;,&quot;com.yin.service&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><p>读取Spring 核心配置文件初始化容器对象切换为读取java类配置类初始化容器对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppAnnotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class );</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> (BookService) context.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="bean管理"><a href="#bean管理" class="headerlink" title="bean管理"></a>bean管理</h2><ol>
<li>bean作用范围</li>
</ol>
<ul>
<li><p>使用<code>@Scope</code>定义bean作用范围   默认：<code>singleton</code>  非单例：<code>prototype</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>bean生命周期</li>
</ol>
<ul>
<li><p>使用<code>@@PostConstruct</code>和<code>@PreDestroy</code>注解定义bean生命周期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy...........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>注意，spring容器关闭了可是却没有销毁对象，它仍存在内存中</li>
<li>好奇非单例为什么不会执行destroy</li>
<li>刚刚去搜了下，非单例模式容器并没有调用destroy指定方法</li>
<li>多例模式下spring不负责销毁(管理bean的生命周期)，所以没有调用destroy方法</li>
</ul>
</li>
</ul>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ul>
<li><p>自动装配</p>
</li>
<li><p>在执行方法中的bean方法是会报<code>NullPointerException</code>错误，原因是bean诸如失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save......&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>解决方案:自动转配，按类型装配</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">+    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save......&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>试着放在set上，一样可以执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">+    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save......&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>那么如果讲set去掉呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save......&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一样可以执行，通过暴力反射</p>
</li>
<li><p>那此时又有个问题，@Autowired是通过类型自动装配，按如果有两个同类型的实现类呢？</p>
</li>
<li><p>spring也给出了解决方法，在自动装配时，使用<code>@Qualifier</code>指定名称即可</p>
</li>
<li><p>注意点：<code>@Qualifier</code>必须依赖 @Autowired存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;bookService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">+    <span class="meta">@Qualifier(&quot;bookDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save......&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p>使用<code>@Value</code> 进行简单类型注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
<li><p>如何加载外部资源文件，以properties文件为例</p>
<ol>
<li><p>在spring配置类中添加注解<code>@PropertySource</code></p>
<ol>
<li>1 多个则使用大括号<code>&#123;&#125;</code>以逗号<code>,</code>分割</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line">或</span><br><span class="line"><span class="meta">@PropertySource(&quot;&#123;jdbc.properties,jdbc2.properties,jdbc3.properties&#125;&quot;)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>@Value</code>中直接使用配置文件中的属性即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>注意，路径仅支持单一文件配置，多文件使用数组格式，不允许使用通配符 <code>*</code>，spring会当成文件名</p>
</li>
</ul>
<blockquote>
<p><code>总结</code>：</p>
</blockquote>
<ol>
<li>自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据，因此无需提供setter方法</li>
<li>自动装配建议使用无参构造方法创建对象(默认)，如果不提供对应构造方法，请提供唯一的构造方法</li>
<li>使用<code>@Qualifier</code>注解开启指定名称装配bean</li>
<li><code>@Qualifier</code>必须依赖 @Autowired注解使用</li>
<li>加载外部资源时，路径仅支持单一文件配置，多文件使用数组格式，不允许使用通配符 <code>*</code>，spring会当成文件名</li>
</ol>
<h2 id="第三方bean管理"><a href="#第三方bean管理" class="headerlink" title="第三方bean管理"></a>第三方bean管理</h2><h3 id="第三方bean管理-1"><a href="#第三方bean管理-1" class="headerlink" title="第三方bean管理"></a>第三方bean管理</h3><ul>
<li><p>使用bean管理第三方bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个方法获得要管理的对象</span></span><br><span class="line">    <span class="comment">///添加@Bean，表示当前方法的返回值是一个bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/shjk&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是建议独立的配置类管理第三方bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个方法获得要管理的对象</span></span><br><span class="line">    <span class="comment">///添加@Bean，表示当前方法的返回值是一个bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/hmdp&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将独立的类加入核心配置</p>
</li>
<li><p>方式一：导入式(推荐)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个方法获得要管理的对象</span></span><br><span class="line">    <span class="comment">///添加@Bean，表示当前方法的返回值是一个bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/hmdp&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>@Import</code>注解手动加入配置类到核心配置，此注解只能使用一次，多个配饰类使用数组格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>方式二：扫描式(不推荐)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123; </span><br><span class="line">    <span class="comment">//定义一个方法获得要管理的对象</span></span><br><span class="line">    <span class="comment">///添加@Bean，表示当前方法的返回值是一个bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/hmdp&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>ComponentScan(&#123;com.yin.config,con.yin.service&#125;)</code>，加载对应配置信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yin.config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="第三方bean依赖注入"><a href="#第三方bean依赖注入" class="headerlink" title="第三方bean依赖注入"></a>第三方bean依赖注入</h3><ul>
<li><p>有个问题，如果配置类里需要的东西我没有，咋整</p>
</li>
<li><p>简单类型依赖注入,直接使用@Value进行配置,然后使用变量名填充</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;com.mysql.cj.jdbc.Driver&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String driver;</span><br><span class="line"><span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/hmdp&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="meta">@Value(&quot;123456&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String passWord;</span><br></pre></td></tr></table></figure>



<ul>
<li>引用类型,引用类型注入只需要定义方法设置形参即可，容器会根据类型自动装配对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">      <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">      bookDao.save();</span><br><span class="line">      <span class="keyword">return</span> dataSource;</span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure>



<ul>
<li><strong>总结</strong>：<ul>
<li>第三方bean管理<ul>
<li>bean</li>
</ul>
</li>
<li>第三方bean依赖注入<ul>
<li>引用类型：方法形参</li>
<li>简单类型：成员变量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="xml配置和注解配置对比"><a href="#xml配置和注解配置对比" class="headerlink" title="xml配置和注解配置对比"></a>xml配置和注解配置对比</h2><table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">XML配置</th>
<th align="center">注解</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>定义bean</strong></td>
<td align="center">bean标签<br>- id属性<br>- class属性</td>
<td align="center">@Component<br>- @Controller<br>- Servcie<br>- @Repository<br>@ComponentScan</td>
</tr>
<tr>
<td align="center"><strong>设置依赖注入</strong></td>
<td align="center">setter注入(set方法)<br>-引用&#x2F;简单<br>构造器注入(构造方法)<br>- 引用&#x2F;简单<br>自动装配</td>
<td align="center">@Autowired<br>- @Qialifier<br>@Value</td>
</tr>
<tr>
<td align="center"><strong>配置第三方bean</strong></td>
<td align="center">bean标签<br>静态工厂、实例工厂、FactoryBean</td>
<td align="center">@Bean</td>
</tr>
<tr>
<td align="center"><strong>作用范围</strong></td>
<td align="center">- scope属性</td>
<td align="center">@Scope</td>
</tr>
<tr>
<td align="center"><strong>生命周期</strong></td>
<td align="center">标准接口<br>- init-method<br>- destroy-method</td>
<td align="center">@PostContstructor<br>@PreDestroy</td>
</tr>
</tbody></table>
<h1 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h1><ol>
<li><p>导入所需要的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--druid连接池--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--spring 操作 jdbc--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--spring 整合mybatis--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个测试库，随便加两条数据</p>
</li>
<li><p>创建spring配置类和jdbc配置类，使用导入@Import将jdbc、Mybatis配置类配置到spring配置类中,同时加载资源文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yin&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置Myabtis配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mybatis配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="comment">//soring整合mybatis方法</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置扫描包</span></span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.yin.domain&quot;</span>);</span><br><span class="line">        <span class="comment">//dataSource我们之前都做过了，直接拿来用</span></span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        <span class="comment">//扫描位置</span></span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.yin.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(AccountService.class);</span><br><span class="line">        <span class="comment">//根据id查询</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">byId</span> <span class="operator">=</span> bean.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(byId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是，ok了</p>
</li>
</ol>
<blockquote>
<p>Account{id&#x3D;1, name&#x3D;’张三’, money&#x3D;1000.0}</p>
</blockquote>
<h1 id="整合junit"><a href="#整合junit" class="headerlink" title="整合junit"></a>整合junit</h1><ul>
<li><p>接着刚才的工程继续</p>
<ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">&lt;!--spring整合junit--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.15.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在text包创建测试用例</p>
</li>
<li><p>在类名上添加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//spring整合junit的专用类运行器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//spring环境配置</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">textFindId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">byId</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(byId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><ul>
<li><p>AOP 核心理念</p>
<ul>
<li><code>面向切面编程思想</code></li>
</ul>
</li>
<li><p>AOP作用</p>
<ul>
<li>在不惊动原始设计阿基础上为其进行功能增强</li>
<li>Spring理念：无侵入式&#x2F;无入侵时</li>
</ul>
</li>
<li><p>连接点(JoinPoint ): 程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等</p>
<ul>
<li>在SpringAOP中，理解为方法的执行</li>
</ul>
</li>
<li><p>切入点 ( Pointcut ) :匹配连接点的式子</p>
<ul>
<li><p>在SpringAOP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法</p>
<ul>
<li><p>一个具体方法: com.yin.dao包下的BookDao接口中的无形参无返回值的save方法</p>
</li>
<li><p>匹配多个方法:所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>通知( Advice):在切入点处执行的操作，也就是共性功能<br>- 在SpringAOP中，功能最终以方法的形式呈现</p>
</li>
<li><p>通知类:定义通知的类</p>
</li>
<li><p>切面(Aspect): 描述通知与切入点的对应关系</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/649a75051ddac507cc9de54e.jpg"></p>
<h2 id="AOP入门案例"><a href="#AOP入门案例" class="headerlink" title="AOP入门案例"></a>AOP入门案例</h2><ul>
<li>案例设定：测定接口执行效率</li>
<li>简化设定：在接口执行前输出当前时间</li>
<li>开发模式：XML 或 <code>注解</code></li>
<li>思路分析：<ol>
<li>导入坐标(pom.xml)</li>
<li>制作连接点(原始操作，Dao接口与实现类)</li>
<li>制作共性功能(通知类与操作)</li>
<li>定义切入点</li>
<li>绑定切入点和通知关系 (切面)</li>
</ol>
</li>
</ul>
<p>初始环境</p>
<ol>
<li><p>创建maven工程</p>
</li>
<li><p>导入坐标,这里aop默认被context依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>创建Spring配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.yin&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建BookDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>创建BookDaoImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao .....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update .........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
<li><p>创建启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span>  context.getBean(BookDao.class);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>在aop包中新建MyAdvice类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切入点,描述</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.yin.dao.impl.BookDaoImpl.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//自定义一个方法,将逻辑写入</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>在配置类上添加注解<code>@EnableAspectJAutoProxy</code> 开启spring对aop注解驱动支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.yin&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<p>​	<img src="https://pic.imgdb.cn/item/649a7d7f1ddac507ccabd662.jpg"></p>
<ul>
<li>总结，切入点定义依托一个不具有实际意义的方法进行，既无参数，无返回值，方法体无实际逻辑</li>
</ul>
<h2 id="AOP工作流程"><a href="#AOP工作流程" class="headerlink" title="AOP工作流程"></a>AOP工作流程</h2><ul>
<li><p>Spring容器启动</p>
</li>
<li><p>读取所有切面配置中的切入点</p>
</li>
<li><p>初始化bean，判定bean对应的类中的方法是否匹配到任意切入点</p>
<ul>
<li><p>匹配失败，创建对象</p>
</li>
<li><p>匹配成功，创建原始对象(<strong>目标对象</strong>)的<strong>代理</strong>对象</p>
</li>
</ul>
</li>
<li><p>获取bean执行方法</p>
<ul>
<li>获取bean，调用方法并执行，完成操作</li>
<li>获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li>
</ul>
</li>
</ul>
<h2 id="AOP核心概念"><a href="#AOP核心概念" class="headerlink" title="AOP核心概念"></a>AOP核心概念</h2><ul>
<li>目标对象(Target) : 原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的</li>
<li>代理(Proxy): 目标对象无法直接完成工作，需要对其进行回填，通过原始对象的代理对象实现</li>
</ul>
<h2 id="AOP切入点表达式"><a href="#AOP切入点表达式" class="headerlink" title="AOP切入点表达式"></a>AOP切入点表达式</h2><ul>
<li><p>切入点：要进行增强的方法</p>
</li>
<li><p>切入点表达式：要进行增强的方法的描述方式</p>
</li>
<li><p>描述方式一：按接口描述</p>
<ul>
<li>执行 com.yin.dao包下的BookDao接口中的无参数 update方法</li>
<li>execution(void com.yin.dao.BookDao.update())</li>
</ul>
</li>
<li><p>描述方式二：按实现类方法描述</p>
<ul>
<li><p>执行 com.yin.dao.impl包下的BookDaoImpl类中的无参数 update方法</p>
</li>
<li><p>execution(void com.yin.dao.impl.BookDaoImpl.update())</p>
</li>
</ul>
</li>
<li><p>语法格式</p>
</li>
<li><p>切入点表达式标准格式：动作关键字(访问修饰符 返回值 包名.类名&#x2F;接口名.方法名 (参数) 异常名)</p>
<blockquote>
<p> execution(public Book com.yin.dao.impl.BookDaoImpl.update(id))</p>
</blockquote>
<ul>
<li>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</li>
<li>访问修饰符：public、private 等，可以省略</li>
<li>返回</li>
<li>包名</li>
<li>类&#x2F;接口名</li>
<li>方法名</li>
<li>参数</li>
<li>异常名：方法定义中抛出指定异常，可以省略</li>
</ul>
</li>
<li><p>通配符</p>
</li>
<li><p>可以使用通配符描述切入点，快速描述</p>
<ul>
<li><p>* : 单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</p>
<pre><code>- execution (public * com.itheima.*.UserService.find* (*))*

- \*匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法
</code></pre>
</li>
</ul>
</li>
<li><p>多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</p>
<ul>
<li>execution (public User com..UserService.findById (..) )<ul>
<li>匹配com包下的任意包中的UserService类或接口中所有名称为findByld的方法</li>
</ul>
</li>
</ul>
</li>
<li><p>*专用于匹配子类类型<br>execution(* *..<em>Service+,</em>(..))</p>
</li>
<li><p>书写格式</p>
</li>
<li><p>所有代码按照标准规范开发，否则以下技巧全部失效</p>
</li>
<li><p>描述切入点<strong>通常描述接口</strong>，而不描述实现类</p>
</li>
<li><p>访问控制修饰符针对接口开发均采用public描述( <strong>可省略访问控制修饰符描述</strong>)</p>
</li>
<li><p>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述</p>
</li>
<li><p><strong>包名</strong>书写<strong>尽量不使用..匹配</strong>，效率过低，常用做单个包描述匹配，或精准匹配</p>
</li>
<li><p><strong>接口名</strong>&#x2F;类名书写名称与模块相关的<strong>采用*匹配</strong>，例如UserService书写成*Service，绑定业务层接口名</p>
</li>
<li><p><strong>方法名</strong>书写以<strong>动词</strong>进行<strong>精准匹配</strong>，名词采用*匹配，例如getByld书写成getBy*,selectAll书写成selectAll</p>
</li>
<li><p>参数规则较为复杂，根据业务方法灵活调整</p>
</li>
<li><p>通常<strong>不使用异常</strong>作为<strong>匹配</strong>规则</p>
</li>
</ul>
<h2 id="AOP通知类型"><a href="#AOP通知类型" class="headerlink" title="AOP通知类型"></a>AOP通知类型</h2><ul>
<li>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</li>
<li>AOP通知共分为5种类型<ul>
<li>前置通知</li>
<li>后置通知</li>
<li>环绕通知(重点)</li>
<li>返回后通知(了解)</li>
<li>抛出异常后通知(了解)</li>
</ul>
</li>
</ul>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yin.aop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.yin.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(int com.yin.dao.BookDao.Select())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before advice.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after advice.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice.......&quot;</span>);</span><br><span class="line">        <span class="comment">//必须得有对原始操作的调用</span></span><br><span class="line">        point.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">aroundSelect</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before advice.......&quot;</span>);</span><br><span class="line">        <span class="comment">//必须得有对原始操作的调用</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> point.proceed();</span><br><span class="line"><span class="comment">//        System.out.println(proceed);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;around after advice.......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt2()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning advice.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterThrowing advice.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>@Around注意事项<ol>
<li>环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加</li>
<li>通知通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行</li>
<li>对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型</li>
<li>原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Obiect</li>
<li>由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象</li>
</ol>
</li>
</ul>
<h2 id="AOP通知获取数据"><a href="#AOP通知获取数据" class="headerlink" title="AOP通知获取数据"></a>AOP通知获取数据</h2><ol>
<li>获取参数</li>
<li>获取返回值</li>
<li>获取异常</li>
</ol>
<ul>
<li>获取切入点方法的参数<ul>
<li>JoinPoint : 适用于前置、后置、返回后、抛出异常后通知</li>
<li>ProceedJointPoint :适用于环绕通知</li>
</ul>
</li>
<li>获取切入点方法返回值<ul>
<li>返回后通知</li>
<li>环绕通知</li>
</ul>
</li>
<li>获取切入点方法运行异常信息<ul>
<li>抛出异常后通知</li>
<li>环绕通知</li>
</ul>
</li>
</ul>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><ul>
<li>Spring注解式事务通常添加在<strong>业务层接口中</strong>而不会添加到业务层实现类中，<strong>降低耦合</strong><br>注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务</li>
</ul>
<ol>
<li>在业务层接口上添加 Spring事务管理</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在配置类中设置事务管理器   事务管理器要根据实现技术进行选择，Mybatis框架使用的是JDBC事务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">DataSourceTransactionManager</span> <span class="variable">transactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    transactionManager.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>开启注解式事务驱动</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.yin&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line">+ <span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Spring事务角色"><a href="#Spring事务角色" class="headerlink" title="Spring事务角色"></a>Spring事务角色</h3><ul>
<li><p>事务管理员:发起事务方，在spring中通常指业务层开启事务的方法</p>
</li>
<li><p>事务协调员：加入事务方，在spring中通常指代数据层方法，也可以是业务层方法</p>
</li>
<li><p>当调用了transfer方法时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span>&#123;</span><br><span class="line">      dao.outMoney(out,money);</span><br><span class="line">      dao.inMoney(in,money);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>也就相当于调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update tbl_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">inMoney</span><span class="params">( <span class="meta">@Param(&quot;name&quot;)</span>String name, <span class="meta">@Param(&quot;money&quot;)</span>Double money)</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Update(&quot;update tbl_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">outMoney</span><span class="params">( <span class="meta">@Param(&quot;name&quot;)</span>String name, <span class="meta">@Param(&quot;money&quot;)</span>Double money)</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
</li>
<li><p>那么当程序启动之后，执行transfer就会调用数据层的操作，而由于是数据层操作，并且属于增删改，那么在inMoney和outMoney执行时都会开启对应的事务，两者会开两个不同的事务(事务1，事务2)，如果说事务2出问题时，事务1是不会加入到事务2的回滚，因此，如果出现异常，他们谁都不会回滚</p>
<ul>
<li>而spring是怎么解决的呢，我们在transfer上加了<code> @Transactional</code>注解，代表开启了spring的事务(事务3)，开启后就有了三个事务，而事务1和事务2都在spring事务3的控制范围内，事务1和事务2加入到了事务3中，由原来的三个事务变为spring的一个事务，那么就是说在这一个事务内，同成功同失败。</li>
<li>而spring开启的事务称为<code>事务管理员</code>,加入到sping的事务称为<code>事务协调员</code></li>
</ul>
</li>
</ul>
<h2 id="事务相关配置"><a href="#事务相关配置" class="headerlink" title="事务相关配置"></a>事务相关配置</h2><ul>
<li>事务传播行为：事务协调员对事务管理员所携带事务的处理态度</li>
</ul>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">作用</th>
<th align="center">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">readOnly</td>
<td align="center"><strong>设置是否为只读事务</strong></td>
<td align="center">readOnly &#x3D; true 只读事务</td>
</tr>
<tr>
<td align="center">timeOut</td>
<td align="center"><strong>设置事务超时时间</strong></td>
<td align="center">timeOut &#x3D; -1 永不超时</td>
</tr>
<tr>
<td align="center"><strong><code>rollbackFor</code></strong></td>
<td align="center"><strong>设置事务回滚异常(class)</strong></td>
<td align="center">rollbackFor &#x3D; {NullPoinException.class}</td>
</tr>
<tr>
<td align="center">rollbackForClassName</td>
<td align="center"><strong>设置事务回滚异常(String)</strong></td>
<td align="center">同上格式为字符串</td>
</tr>
<tr>
<td align="center">noRollbackFor</td>
<td align="center"><strong>设置事务不回滚异常(class)</strong></td>
<td align="center">noRollbackFor&#x3D; {NullPoinException.class}</td>
</tr>
<tr>
<td align="center">noRollbackForClassName</td>
<td align="center"><strong>设置事务不回滚异常(String)</strong></td>
<td align="center">同上格式为字符串</td>
</tr>
<tr>
<td align="center">propagation</td>
<td align="center">设置事务传播行为</td>
<td align="center">………..</td>
</tr>
</tbody></table>
<p>在业务层接口添加spring事务，设置事务传播行为 <code>REQUIRES_NEW</code>（需要新事务	）</p>
<ul>
<li>事务传播行为</li>
</ul>
<table>
<thead>
<tr>
<th align="center">传播属性</th>
<th align="center">事务管理员</th>
<th align="center">事务协调员</th>
</tr>
</thead>
<tbody><tr>
<td align="center">REQUIRED(默认)</td>
<td align="center">开启 T<br>无</td>
<td align="center">加入T<br>新建T2</td>
</tr>
<tr>
<td align="center">REQUIRES_NEW</td>
<td align="center">开启 T<br/>无</td>
<td align="center">新建T2<br>新建T2</td>
</tr>
<tr>
<td align="center">SUPPORTS</td>
<td align="center">开启 T<br/>无</td>
<td align="center">加入T<br>无</td>
</tr>
<tr>
<td align="center">NOT_SUPPORTED</td>
<td align="center">开启T<br>无</td>
<td align="center">无</td>
</tr>
<tr>
<td align="center">MANDATORY</td>
<td align="center">开启T<br/>无</td>
<td align="center">加入T<br><code>ERROR</code></td>
</tr>
<tr>
<td align="center">NEVER</td>
<td align="center">开启T<br/>无</td>
<td align="center"><code>ERROR</code><br>无</td>
</tr>
<tr>
<td align="center">NESTED</td>
<td align="center">设置savePoint，一旦事务回滚，事务将回滚到savePoint处，交由客户响应提交&#x2F;回滚</td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
  </entry>
  <entry>
    <title>springboot启动创建bean报错</title>
    <url>//2023/07/16/springboot%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0bean/</url>
    <content><![CDATA[<h1 id="springboot-mybatisplus-空xml文件启动报错"><a href="#springboot-mybatisplus-空xml文件启动报错" class="headerlink" title="springboot + mybatisplus 空xml文件启动报错"></a>springboot + mybatisplus 空xml文件启动报错</h1><p>今天在启动springboot + mybatispuls的项目时，突然报错<br><img src="https://pic.imgdb.cn/item/64b34a351ddac507cc019ad6.jpg"></p>
<ul>
<li><p>经过查询，发现个很奇怪的bug，昨天测试代码生成器生成了一个空的 <code>mapper.xml</code>空文件，然后就导致了创建bean时出错，里面加上内容或者删除都可以，我删除后再次启动。</p>
</li>
<li><p>正常运行</p>
<p><img src="https://pic.imgdb.cn/item/64b34bf91ddac507cc05b2a5.jpg"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>BUG分享</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis一级缓存和二级缓存</title>
    <url>//2023/07/30/mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<p>一级缓存<br><img src="https://pic.imgdb.cn/item/64c674ee1ddac507cc0b8fae.jpg"></p>
<p>理解为客户端获取数据，经过redis<br>也叫本地缓存</p>
<p>存在 SqlSession中的一级缓存使用的是 hashmap<br>key：hashCode + sqlId + sql语句<br>value： 映射的java对象</p>
<p><img src="https://pic.imgdb.cn/item/64c675161ddac507cc0bdde5.jpg"></p>
<p>二级缓存<br>二级缓存是跨Sqlsession的缓存机制，多个用户查询数据库时，只要有一个sqlSession拿到了数据，就会存入二级缓存，那么其他的sqlsession就可以直接从二级缓存中拿数据，每次当查询数据库时，会先去查二级缓存，二级缓存没有再去一级缓存，最后查询数据库，查询到结果后再写入到缓存，</p>
]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>spring实例化bean的三种方式</title>
    <url>//2023/07/30/spring%E5%AE%9E%E4%BE%8B%E5%8C%96bean%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>实例化bean的三种方式<br>使用无参可访问的构造方法(可写可不写)</p>
<p>  public BookDaoImpl() {<br>        System.out.println(“book Dao constructor”);<br>    }<br>使用静态工厂</p>
<p>工厂类</p>
<p>package com.yin.factory;<br>​<br>import com.yin.dao.OrderDao;<br>import com.yin.dao.impl.OrderDaoImpl;<br>​<br>public class OrderFactory {<br>    public static OrderDao getOrderDao() {<br>        for (int i &#x3D; 0; i &lt; 10; i++) {<br>            System.out.print(i);<br>        }<br>        return new OrderDaoImpl();<br>    }<br>}<br>使用 factory-method 指定静态工厂调用的方法</p>
<bean id="factory" class="com.yin.factory.OrderFactory" factory-method="getOrderDao"/>
启动类

<p>  OrderDao orderDao &#x3D; OrderFactory.getOrderDao();<br>  orderDao.save();<br>使用实例工厂</p>
<p>dao接口</p>
<p>package com.yin.dao;<br>​<br>public interface UserDao {<br>    void save();<br>}<br>dao实现层</p>
<p>package com.yin.dao.impl;<br>​<br>import com.yin.dao.UserDao;<br>​<br>public class UserDaoImpl implements UserDao {<br>    @Override<br>    public void save() {<br>        System.out.println(“user Dao”);<br>    }<br>}<br>factory工厂,这里不是静态的</p>
<p>package com.yin.factory;<br>​<br>import com.yin.dao.UserDao;<br>import com.yin.dao.impl.UserDaoImpl;<br>​<br>public class UserFactory {<br>    public UserDao getUserDao(){<br>        return new UserDaoImpl();<br>    }<br>}<br>xml配置bean</p>
<!-- 方式三： 使用实例工厂实例化bean-->
<p>​<br>    <!--第一步需要先创建出工厂的bean--><br>    <bean id="userFactory" class="com.yin.factory.UserFactory"/><br>​<br>    <!--第二步
     factory-bean： bean的实例
     factory-method： 使用的哪个方法
     --><br>    <bean id="userDao" factory-bean="userFactory" factory-method="getUserDao"/><br>测试</p>
<p>package com.yin;<br>​<br>import com.yin.dao.UserDao;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;<br>​<br>public class App3 {<br>    public static void main(String[] args) {<br>        ApplicationContext c &#x3D; new ClassPathXmlApplicationContext(“applicationContext.xml”);<br>        UserDao userDao &#x3D; (UserDao) c.getBean(“userDao”);<br>        userDao.save();<br>    }<br>}<br> 方式三变种，使用FactoryBean实例化</p>
<p>创建UserDaoFactoryBean类,继承FactoryBean接口，实现泛型</p>
<p>package com.yin.factory;<br>​<br>import com.yin.dao.UserDao;<br>import com.yin.dao.impl.UserDaoImpl;<br>import org.springframework.beans.factory.FactoryBean;<br>​<br>public class UserDaoFactoryBean implements FactoryBean<UserDao> {<br>    &#x2F;&#x2F;代替原始实例工厂中的创建对象的方法<br>    @Override<br>    public UserDao getObject() throws Exception {<br>        return new UserDaoImpl();<br>    }<br>​<br>    &#x2F;&#x2F;    返回对象类型<br>    @Override<br>    public Class&lt;?&gt; getObjectType() {<br>        return UserDao.class;<br>    }<br>}<br>配置xml文件，最后实例化出来的不是<br>FactoryBean对象，而是FactoryBean中的getObject方法造出来的对象<br>  <!--方式四 : 方式三的变种：使用FactoryBean 实例化bean--><br>    <bean id="userDao" class="com.yin.factory.UserDaoFactoryBean"/><br>其余照旧</p>
<p>默认为单例模式，如果要修改为多例,在<br>factoryBean类中是实现isSingleton方法<br>   &#x2F;**<br>     *<br>     * @return true：单例 ，false:多例<br>     *<br>     *&#x2F;<br>    @Override<br>    public boolean isSingleton() {<br>        return false;<br>    }</p>
<p>实例化bean的四种方式</p>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"><br>​<br>    <!--方式一：使用构造方法实例化bean--><br>    <bean id="bookDao" name="dao" class="com.yin.dao.impl.BookDaoImpl"/><br>​<br>    <bean id="bookService" class="com.yin.service.impl.BookServiceImpl"><br>        <property name="bookDao" ref="dao"/><br>    </bean><br>​<br>    <!--方式二：使用静态工厂实例化bean--><br>    <bean id="factory" class="com.yin.factory.OrderFactory" factory-method="getOrderDao"/><br>​<br>    <!-- 方式三： 使用实例工厂实例化bean--><br>    <!--第一步需要先创建出工厂的bean--><br>    <bean id="userFactory" class="com.yin.factory.UserFactory"/><br>    <!--第二步
     factory-bean： bean的实例
     factory-bean： 使用的哪个方法
     --><br>    <bean id="userDao" factory-bean="userFactory" factory-method="getUserDao"/><br>​</p>
<pre><code>&lt;!--方式四 : 方式三的变种：使用FactoryBean 实例化bean--&gt;
&lt;bean id=&quot;userDao&quot; class=&quot;com.yin.factory.UserDaoFactoryBean&quot;/&gt;
</code></pre>
</beans>
默认实例化的bean都是单例的





]]></content>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis种#和$区别</title>
    <url>//2023/07/30/mybatis%E7%A7%8D#%E5%92%8C$%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>  #{}         自带 ‘ ‘     在sql语句中作为 ?<br>  ${}         不带 ‘ ‘    在sql语句中作为 本身 要注意字符串拼接</p>
<p>批量删除只能只有用 ${} ,使用 in关键字<br>动态表名只能使用 ${}, 否则会报错<br> <select id="getById" resultType="com.yin.pojo.User"><br>        select * from user where name &#x3D; #{username}</p>
<pre><code>    select * from user where name = &#39;$&#123;username&#125;&#39;
&lt;/select&gt;
</code></pre>
<p>#{}的本质是占位符赋值<br>${}的本质是字符串拼接</p>
<p>如果有多个参数<br>使用arg0，arg1……<br>或者 param1,param2…..    </p>
<pre><code>&lt;select id=&quot;login&quot; resultType=&quot;com.yin.pojo.User&quot;&gt;
    select * from user where name = #&#123;arg0&#125; and password = #&#123;arg1&#125;
&lt;/select&gt;
</code></pre>
  <select id="login" resultType="com.yin.pojo.User">
        select * from user where name = '${param1}' and password = '${param2}'
    </select>    

<p>自定义哈希map键值对<br>接口中新增<br>User loginByMap(HashMap&lt;String,Object&gt; map);<br>2. xml映射文件添加<br>  <select id="loginByMap" resultType="com.yin.pojo.User"><br>        select *<br>        from user<br>        where name &#x3D; #{name}<br>          and password &#x3D; #{password}<br>    </select><br>3. 测试<br>@Test<br>    public void loginByMap(){<br>        SqlSession sqlSession &#x3D; SqlSessionUtil.getSqlSession();<br>        UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);<br>        HashMap&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();<br>        map.put(“name”,”TOM666”);<br>        map.put(“password”,”123”);<br>        User user &#x3D; mapper.loginByMap(map);<br>        System.out.println(user);<br>        sqlSession.close();<br>    }<br>测试，成功</p>
<ul>
<li>如果mapper接口方法的参数是实体类类型的参数<br>只要通过 #{} 和 ${} 访问实体类的属性名，就可以获取相对应的属性值 <insert id="save">
      insert into user values (null,#{name},#{password},#{age},#{tel})
  </insert></li>
</ul>
<p>@Test<br>    public void save(){<br>        SqlSession sqlSession &#x3D; SqlSessionUtil.getSqlSession();<br>        UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);<br>        User user &#x3D; new User(null, “adi”, “123”, 18, “sdas”);<br>        int i &#x3D; mapper.save(user);<br>        System.out.println(i);<br>        sqlSession.close();<br>    }</p>
]]></content>
      <categories>
        <category>编程学习</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Autowired注入失败</title>
    <url>//2023/09/02/Autowired%E6%B3%A8%E5%85%A5%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<ol>
<li><p>@Resource注解在<code>javax.annotation.Resource</code>包中，不是有Spring提供的注解,但是Spring支持该注解的导入。</p>
</li>
<li><p>@Autowired注解由Spring提供，其存在默认值 required &#x3D; true ，所以必须要有一个不为NULL的对象，当IDEA检测不到对象时就会报错，而此时如果改用@Resource注解则会报错消失，但是我目前并不清楚这样的替换有没有什么隐患。于此操作类似的 就是将@Autowired注解的required 设置为false。</p>
</li>
<li><p>@Autowird注解默认通过<code>byType</code>方式注入，而@Resource注解则是通过<code>byName</code>方式注入</p>
</li>
<li><p>例如：在使用 @Autowired 注解导入 Mapper 对象报错，可能正是因为 @Autowired 需要一个非 NULL 的对象，而被 @Mapper 修饰的类为 MyBatis 的注解，IDEA 并不能很好的识别其为非 NULL 对象，因此就会报错。所以采用替换为@Resource的注解能方便的解决这个问题。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>BUG分享</category>
      </categories>
  </entry>
  <entry>
    <title>maven依赖管理爆红</title>
    <url>//2023/09/05/maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E7%88%86%E7%BA%A2/</url>
    <content><![CDATA[<h1 id="版本管理爆红"><a href="#版本管理爆红" class="headerlink" title="版本管理爆红"></a>版本管理爆红</h1><ul>
<li>使用版本管理爆红，无法识别,将<code>&lt;dependencyManagement&gt;</code>标签注释，重新刷新加载maven即可</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--knife4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;knife4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jjwt--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h1><p>A模块的 pom 文件 依赖了 B模块<br>B模块的 pom 文件 也依赖了 A模块</p>
<p>就会造成循环依赖,删除任意一个依赖即可</p>
]]></content>
      <categories>
        <category>BUG分享</category>
      </categories>
  </entry>
</search>
